<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[LeetCode —— Sudoku Solver]]></title>
      <url>http://koala.ink/2018/01/17/leetcode_37_sudoku_solver/</url>
      <content type="html"><![CDATA[<blockquote>
<p>换用JavaScript刷题，有种不一样的感觉。  </p>
</blockquote>
<p><a href="https://leetcode.com/problems/sudoku-solver/description/">题目链接：LeetCode —— Sudoku Solver</a>  </p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>数独游戏规则：需要根据9×9盘面上的已知数字，推理出所有剩余空格的数字，并满足每一行、每一列、每一个粗线宫（3*3）内的数字均含1-9，不重复。<br><code>board</code>中使用字符串<code>&#39;.&#39;</code>表示空格；</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>状态标记：<br>使用三个<code>int</code>数组<code>rolSt</code>、<code>colSt</code>、<code>blkSt</code>分别表示每行/每列/每宫的填入状态；<br>举例说明：如果<code>rolSt[i]=9</code>，转换成二进制<code>000001001</code>，也就是说第<code>i</code>行已经填入了数字<code>1</code>和<code>4</code>；  </p>
<p>深度优先遍历(DFS)棋盘，注意终点和边界的判断即可；   <a id="more"></a></p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><blockquote>
<p>竟打败了100%的javascript提交  </p>
</blockquote>
<p>Runtime: <strong>117 ms</strong>  </p>
<p><img src="/posts_assets/leetcode_37_sudoku_solver/runtime.jpg" alt="runtime">  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> rolSt;</div><div class="line"><span class="keyword">var</span> colSt;</div><div class="line"><span class="keyword">var</span> blkSt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DFS</span>(<span class="params">board, fi, fj</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> i, j, k, blkId, t;</div><div class="line">  <span class="keyword">if</span>(fi === <span class="number">8</span> &amp;&amp; fj === <span class="number">8</span>)&#123; <span class="comment">// 全部填写完毕</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  i = fi;</div><div class="line">  j = fj;</div><div class="line">  <span class="keyword">while</span>(board[i][j] !== <span class="string">'.'</span>)&#123; <span class="comment">// 找到下一个要填入的单元格</span></div><div class="line">    ++j;</div><div class="line">    i += <span class="built_in">Math</span>.floor(j/<span class="number">9</span>);</div><div class="line">    j %= <span class="number">9</span>;</div><div class="line">    <span class="keyword">if</span>(i &gt;= <span class="number">9</span>)&#123; <span class="comment">// 全部填写完毕</span></div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  blkId = <span class="built_in">Math</span>.floor(i/<span class="number">3</span>)*<span class="number">3</span>+<span class="built_in">Math</span>.floor(j/<span class="number">3</span>); <span class="comment">// 宫下标</span></div><div class="line">  <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">9</span>; ++k)&#123;</div><div class="line">    t = <span class="number">1</span>&lt;&lt;k;</div><div class="line">    <span class="keyword">if</span>((rolSt[i]&amp;t) === <span class="number">0</span> &amp;&amp; (colSt[j]&amp;t) === <span class="number">0</span> &amp;&amp; (blkSt[blkId]&amp;t) === <span class="number">0</span>)&#123;</div><div class="line">      rolSt[i] |= t;</div><div class="line">      colSt[j] |= t;</div><div class="line">      blkSt[blkId] |= t;</div><div class="line">      board[i][j] = k+<span class="number">1</span>+<span class="string">''</span>;</div><div class="line">      <span class="keyword">if</span>(DFS(board, i, j))&#123; <span class="comment">// 递归往后填</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 回溯</span></div><div class="line">        rolSt[i] -= t;</div><div class="line">        colSt[j] -= t;</div><div class="line">        blkSt[blkId] -= t;</div><div class="line">        board[i][j] = <span class="string">'.'</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 找不到可以填入的数字 返回false</span></div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</div><div class="line"> * @param &#123;character[][]&#125; board</div><div class="line"> * @return &#123;void&#125; Do not return anything, modify board in-place instead.</div><div class="line"> */</span></div><div class="line"><span class="keyword">var</span> solveSudoku = <span class="function"><span class="keyword">function</span>(<span class="params">board</span>) </span>&#123;</div><div class="line">  rolSt = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</div><div class="line">  colSt = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</div><div class="line">  blkSt = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</div><div class="line">  <span class="keyword">var</span> blkId, t;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)&#123; <span class="comment">// 初始化状态</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j)&#123;</div><div class="line">      <span class="keyword">if</span>(board[i][j] !== <span class="string">'.'</span>)&#123;</div><div class="line">        blkId = <span class="built_in">Math</span>.floor(i/<span class="number">3</span>)*<span class="number">3</span>+<span class="built_in">Math</span>.floor(j/<span class="number">3</span>);</div><div class="line">        t = <span class="number">1</span>&lt;&lt;(board[i][j]<span class="number">-1</span>);</div><div class="line">        rolSt[i] |= t;</div><div class="line">        colSt[j] |= t;</div><div class="line">        blkSt[blkId] |= t;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  DFS(board, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 开始DFS</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode —— N-Queens]]></title>
      <url>http://koala.ink/2017/07/04/leetcode_51_n_queens/</url>
      <content type="html"><![CDATA[<blockquote>
<p>换用JavaScript刷题，有种不一样的感觉。  </p>
</blockquote>
<p><a href="https://leetcode.com/problems/n-queens/#/description">题目链接：LeetCode —— N-Queens</a>  </p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>N皇后问题，在一个n*n规格的棋盘上放置n个Queen，放置规则为：同一行/列/斜边上只能有一个Queen。<br>输入n，程序返回所有的放置方案。<br>输出棋盘中：<code>.</code>表示空，<code>Q</code>表示Queen。  <a id="more"></a><br>例：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">输入：n = <span class="number">4</span></div><div class="line">返回：</div><div class="line">[</div><div class="line"> [<span class="string">".Q.."</span>,  <span class="comment">// Solution 1</span></div><div class="line">  <span class="string">"...Q"</span>,</div><div class="line">  <span class="string">"Q..."</span>,</div><div class="line">  <span class="string">"..Q."</span>],</div><div class="line"></div><div class="line"> [<span class="string">"..Q."</span>,  <span class="comment">// Solution 2</span></div><div class="line">  <span class="string">"Q..."</span>,</div><div class="line">  <span class="string">"...Q"</span>,</div><div class="line">  <span class="string">".Q.."</span>]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>经典的DFS问题，对于每行，枚举所有的列，判断当前状态是否可放置Q，如果可以放置，则进入下一行的搜索；因为题目要求返回所有的放置方案，因此在DFS回溯过程中记得要撤销放置；<br>map结构：map[i]表示第i行放置Q的列坐标。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>Runtime: <strong>122 ms</strong>  </p>
<p><img src="/posts_assets/leetcode_51_n_queens/runtime.jpeg" alt="runtime">  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * @param &#123;number&#125; n</div><div class="line"> * @return &#123;string[][]&#125;</div><div class="line"> */</span></div><div class="line"><span class="keyword">var</span> solveNQueens = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> map = [];</div><div class="line">  <span class="keyword">var</span> ans = [];</div><div class="line">  <span class="keyword">var</span> tmpans = [];</div><div class="line">  <span class="comment">// init</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; ++i) map.push(<span class="number">-1</span>);</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">DFS</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(x === n)&#123;</div><div class="line">      <span class="comment">// find one solution</span></div><div class="line">      tmpans = [];</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</div><div class="line">        tmpans.push(<span class="string">'.'</span>.repeat(map[i]) + <span class="string">'Q'</span> + <span class="string">'.'</span>.repeat(x-map[i]<span class="number">-1</span>));</div><div class="line">      &#125;</div><div class="line">      ans.push(tmpans);</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</div><div class="line">      <span class="keyword">var</span> flag = <span class="literal">true</span>;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x; ++i)&#123;</div><div class="line">        <span class="keyword">if</span>(map[i] === j || x-i === j-map[i] || x-i === map[i]-j)&#123;</div><div class="line">          flag = <span class="literal">false</span>;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(flag)&#123;</div><div class="line">        map[i] = j;</div><div class="line">        DFS(x+<span class="number">1</span>);</div><div class="line">        map[i] = <span class="number">-1</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  DFS(<span class="number">0</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> ans;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode —— Regular Expression Matching]]></title>
      <url>http://koala.ink/2017/06/10/leetcode_10_regular_expression_matching/</url>
      <content type="html"><![CDATA[<blockquote>
<p>换用JavaScript刷题，有种不一样的感觉。  </p>
</blockquote>
<p><a href="https://leetcode.com/problems/regular-expression-matching/#/description">题目链接：LeetCode —— Regular Expression Matching</a>  </p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>正则表达式匹配，规定正则表达式中的符号只有：<code>.</code> 和 <code>*</code>  </p>
<p><code>.</code> 可以匹配任意一个字符<br><code>*</code> 可以匹配它的前一个字符0或任意多次<br>并且要求匹配整个字符串才算成功  <a id="more"></a><br>例：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">isMatch(<span class="string">"aa"</span>,<span class="string">"a"</span>); <span class="comment">// false</span></div><div class="line">isMatch(<span class="string">"aa"</span>,<span class="string">"aa"</span>); <span class="comment">// true</span></div><div class="line">isMatch(<span class="string">"aaa"</span>,<span class="string">"aa"</span>); <span class="comment">// false</span></div><div class="line">isMatch(<span class="string">"aa"</span>, <span class="string">"a*"</span>); <span class="comment">// true</span></div><div class="line">isMatch(<span class="string">"aa"</span>, <span class="string">".*"</span>); <span class="comment">// true</span></div><div class="line">isMatch(<span class="string">"ab"</span>, <span class="string">".*"</span>); <span class="comment">// true</span></div><div class="line">isMatch(<span class="string">"aab"</span>, <span class="string">"c*a*b"</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><p>可以直接使用JS的正则匹配方法，尽管有点投机……  </p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><p>动态规划  </p>
<p>假设 Si = <code>&lt;s1, s2, s3, ..., sm&gt;</code>，Pj = <code>&lt;p1, p2, p3, ..., pn&gt;</code><br>dp[i][j] 表示 <code>isMatch(Si, Pj)</code> 的值  </p>
<p>初始化：<br><code>dp[0][0] = isMatch(&#39;&#39;, &#39;&#39;) = true;</code><br><code>i &gt; 0 &amp;&amp; j = 0</code> 时 <code>dp[i][0] = isMatch(Si, &#39;&#39;) = false;</code>  </p>
<p>状态转移：<br>分以下两种情况：<br><code>pj !== &#39;*&#39;</code><br>当i=0时，Pj必然不会匹配空串，因此<code>dp[i][j] = false</code><br>当i&gt;0时，若pj = si，那么<code>dp[i][j] = dp[i-1][j-1]</code>；若pj != si，那么<code>dp[i][j] = false</code>  </p>
<p><code>pj === &#39;*&#39;</code><br>匹配字符出现<code>&#39;*&#39;</code>，则需要去比较 pj-1 与 si 是否想等<br>因为<code>&#39;*&#39;</code>也可以匹配0次，所以如果Pj-2匹配Si成功，那么Pj匹配Si也必然成功  </p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><h3 id="Solution-1-1"><a href="#Solution-1-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><p>Runtime: <strong>155 ms</strong>  </p>
<p><img src="/posts_assets/leetcode_10_regular_expression_matching/runtime_1.jpeg" alt="runtime 1">  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * @param &#123;string&#125; s</div><div class="line"> * @param &#123;string&#125; p</div><div class="line"> * @return &#123;boolean&#125;</div><div class="line"> */</span></div><div class="line"><span class="keyword">var</span> isMatch = <span class="function"><span class="keyword">function</span>(<span class="params">s, p</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^'</span>+p+<span class="string">'$'</span>)).test(s);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Solution-2-1"><a href="#Solution-2-1" class="headerlink" title="Solution 2"></a>Solution 2</h3><p>Runtime: <strong>145 ms</strong>  </p>
<p><img src="/posts_assets/leetcode_10_regular_expression_matching/runtime_2.jpeg" alt="runtime 2">  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * @param &#123;string&#125; s</div><div class="line"> * @param &#123;string&#125; p</div><div class="line"> * @return &#123;boolean&#125;</div><div class="line"> */</span></div><div class="line"><span class="keyword">var</span> isMatch = <span class="function"><span class="keyword">function</span>(<span class="params">s, p</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> dp = [[]], i, j;</div><div class="line">  dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= s.length; ++i)&#123;</div><div class="line">    i &gt; <span class="number">0</span> &amp;&amp; dp.push([]);</div><div class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= p.length; ++j)&#123;</div><div class="line">      <span class="keyword">if</span>(p[j<span class="number">-1</span>] !== <span class="string">'*'</span>)&#123;</div><div class="line">        dp[i][j] = i &gt; <span class="number">0</span> &amp;&amp; dp[i<span class="number">-1</span>][j<span class="number">-1</span>] &amp;&amp; (s[i<span class="number">-1</span>] === p[j<span class="number">-1</span>] || p[j<span class="number">-1</span>] === <span class="string">'.'</span>);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        dp[i][j] = dp[i][j<span class="number">-2</span>] || i &gt; <span class="number">0</span> &amp;&amp; dp[i<span class="number">-1</span>][j] &amp;&amp; (s[i<span class="number">-1</span>] === p[j<span class="number">-2</span>] || p[j<span class="number">-2</span>] === <span class="string">'.'</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> dp[s.length][p.length] ? <span class="literal">true</span> : <span class="literal">false</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode —— Two Sum]]></title>
      <url>http://koala.ink/2017/06/02/leetcode_1_two_sum/</url>
      <content type="html"><![CDATA[<blockquote>
<p>换用JavaScript刷题，有种不一样的感觉。  </p>
</blockquote>
<p><a href="https://leetcode.com/problems/two-sum/#/description">题目链接：LeetCode —— Two Sum</a>  </p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数数组和一个整数target，在数组中找到两个数相加和等于target，输出这两个数在数组中的下标。<br><strong>注：每个输入都能保证有一个唯一解，且同一个位置的数不会被使用两次。</strong>  <a id="more"></a><br>例：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">输入：nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span></div><div class="line">因为：nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span></div><div class="line">所以 <span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>]</div></pre></td></tr></table></figure></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>直接暴力，时间复杂度O(n^2)必然是要吃TLE的。这里得想个O(n)的算法，因此可以用hash map，循环数组，依次判断 <code>nums[i]</code> 是否在hash map中，若存在，则已找到答案；若不存在，则在hash map中纪录 <code>hash[target - nums[i]] = i</code>。  </p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>Runtime: <strong>95 ms</strong>  </p>
<p><img src="/posts_assets/leetcode_1_two_sum/runtime.jpeg" alt="runtime">  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * @param &#123;number[]&#125; nums</div><div class="line"> * @param &#123;number&#125; target</div><div class="line"> * @return &#123;number[]&#125;</div><div class="line"> */</span></div><div class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> i, hash = &#123;&#125;;</div><div class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; nums.length; ++i)&#123;</div><div class="line">    <span class="keyword">if</span>(hash[nums[i]] !== <span class="literal">undefined</span>)&#123;</div><div class="line">      <span class="keyword">return</span> [hash[nums[i]], i];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      hash[target - nums[i]] = i;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Diff算法与实现]]></title>
      <url>http://koala.ink/2017/05/31/algorithm_diff/</url>
      <content type="html"><![CDATA[<h2 id="什么是Diff"><a href="#什么是Diff" class="headerlink" title="什么是Diff"></a>什么是Diff</h2><p>在日常工作中，diff是大家常用的一个工具，它能快速的计算出两个文本的差异，并将差异结果一目了然的展示出来，帮助我们快速定位在不同版本中文件的修改位置。  </p>
<a id="more"></a>
<p><img style="margin: 0 auto;" width="300" src="/posts_assets/algorithm_diff/diff_simple_flowchart.jpeg" alt="Diff简单流程图"></p>
<p>以上流程图简单描述了我们使用diff程序的流程，只需往diff程序中输入text1与text2（我们规定，text1为初始文本，text2为编辑文本），diff程序会自动计算出两个文本的差异并可视化输出。  </p>
<p>在这篇文章中，将会简单的谈一谈diff程序内部流程是如何流转并实现的，以及介绍在实现过程中会遇到的一些算法问题。  </p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>举个简单的例子：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">text1: <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</div><div class="line">text2: <span class="built_in">console</span>.log(<span class="string">'hi js'</span>);</div></pre></td></tr></table></figure></p>
<p><span>console.log(‘h</span><del style="background:#ffe6e6;">ello</del><ins style="background:#e6ffe6;">i</ins><span>&nbsp;</span><del style="background:#ffe6e6;">world</del><ins style="background:#e6ffe6;">js</ins><span>‘);</span></p>

<p>从结果中我们可以看出，diff程序的可视化输出，无非是将文本中未改变的部分原样输出，其余字符，若是在text1中，则被标记为删除；若是在text2中，则被标记为新增。如下使用红色标记两个文本的未改变部分：<br>text1: <font color="red">console.log(‘h</font>ello<font color="red">-</font>world<font color="red">‘);</font><br>text2: <font color="red">console.log(‘h</font>i<font color="red">-</font>js<font color="red">‘);</font><br>红色部分除外，在text1中的<code>ello</code>和<code>world</code>在结果中都将被标记为删除；text2中的<code>i</code>和<code>js</code>在结果中都将被标记为新增。<br>因此，diff程序的关键就在于如何找到text1与text2所有相同文本（即找到标记红色的文本），然后再分别标记出剩下的删除或新增文本即可。  </p>
<h2 id="如何diff"><a href="#如何diff" class="headerlink" title="如何diff"></a>如何diff</h2><h3 id="LCS"><a href="#LCS" class="headerlink" title="LCS"></a>LCS</h3><p>计算两个文本相同部分的问题，即求两个字符串的最长公共子序列(Longest Common Subsequence，简称LCS)问题，介绍LCS问题解法之前，先了解以下概念。  </p>
<h4 id="Subsequence-NOT-Substring"><a href="#Subsequence-NOT-Substring" class="headerlink" title="Subsequence(NOT Substring)"></a>Subsequence(NOT Substring)</h4><p>设序列Xm=<code>&lt;x1, x2, …, xm&gt;</code>，从Xm序列中任意取出若干个元素，按照元素下标从小到大的顺序排列得到一个新的序列Zk=<code>&lt;z1, z2, ..., zk&gt;</code>，则Zk为Xm的一个子序列。子序列只要求元素的前后位置关系与原序列中保持一致即可，不必保证元素必需是连续的。</p>
<h4 id="公共子序列"><a href="#公共子序列" class="headerlink" title="公共子序列"></a>公共子序列</h4><p>给出两个序列Xm与Yn，找到一个序列Zk，满足：Zk即是Xm的子序列，又是Yn的子序列，则Zk为Xm与Yn的一个公共子序列  </p>
<h4 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h4><p>给出两个序列Xm与Yn，找到一个Xm与Yn的公共子序列Zk，Zk的长度是Xm与Yn所有公共子序列中长度最长的一个。  </p>
<h4 id="暴力美学"><a href="#暴力美学" class="headerlink" title="暴力美学"></a>暴力美学</h4><p>最简单直接的，就是暴力求解，如下为暴力法求解LCS的伪代码：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">Zk = 空</div><div class="line"><span class="keyword">for</span> Xm的所有子序列 Zx</div><div class="line">  <span class="keyword">if</span> Zx是Yn的子序列 &amp;&amp; Zx长度大于Zk</div><div class="line">    Zk = Zx</div></pre></td></tr></table></figure></p>
<p>一个长度为m的序列，存在2^m个子序列；判断Zx序列是否为Yn序列的子序列，时间复杂度为O(n)；因此暴力求解算法的时间复杂度为O(n*2^m)。指数级别时间复杂度的算法，基本上是要把电脑搞挂的，这显然不是我们想要的结果。  </p>
<h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><p>动态规划一般也只能应用于有最优子结构的问题。最优子结构的意思是局部最优解能决定全局最优解(对有些问题这个要求并不能完全满足，故有时需要引入一定的近似)。简单地说，问题能够分解成子问题来解决。<br>使用动态规划算法求解最优解的时候，最关键的问题在于如何找到最优解问题的转化方程。  </p>
<p>设序列Xm=<code>&lt;x1, x2, …, xm&gt;</code>和Yn=<code>&lt;y1, y2, …, yn&gt;</code>的一个最长公共子序列Zk=<code>&lt;z1, z2, …, zk&gt;</code>，则：  </p>
<ol>
<li>若xm=yn，可以使用反证法证明：xm(yn)必然是Zk的最后一个字符，即zk=xm=yn，且Zk-1是Xm-1和Yn-1的最长公共子序列。因此 <code>LCS(X, Y)</code> 即可以转化成 <code>LCS(Xm-1, Yn-1) + 1</code>；  </li>
<li>若xm≠yn且zk≠xm ，亦可用反证法证明：Z是Xm-1和Y的最长公共子序列；  </li>
<li>若xm≠yn且zk≠yn ，同第二点，可得出Z是X和Yn-1的最长公共子序列。<br>其中：Xm-1=<code>&lt;x1, x2, …, xm-1&gt;</code>，Yn-1=<code>&lt;y1, y2, …, yn-1&gt;</code>，Zk-1=<code>&lt;z1, z2, …, zk-1&gt;</code>。  </li>
</ol>
<p>整合2、3点的结论，得出当xm≠yn时，可以将 <code>LCS(X, Y)</code> 转化成 <code>MAX(LCS(Xm-1, Y), LCS(X, Yn-1))</code>。  </p>
<p>设dp[i][j]表示序列Xi和Yj的一个最长公共子序列Zk的长度，即dp[i][j] = k。<br>因此我们可以得到以下公式：<br><img src="/posts_assets/algorithm_diff/lcs_formula.jpeg" alt="LCS公式">  </p>
<p>根据此公式，我们定义一个二维数组dp，size为m*n，dp数组中的每个元素的值，都可以通过其左上/左/上三个方位的单元格得到，因此我们只需顺序填满dp表格，在dp[m][n]处就可以得到Xm与Yn的最长公共子序列长度。如下所示(X: ABCABBA, Y: CBABAC)：<br><img style="margin: 0 auto;" width="300" src="/posts_assets/algorithm_diff/lcs_map.jpeg" alt="lcs dp表格">  </p>
<p>仅仅得到最长公共子序列的长度显然不足以达到我们的目的，为了能够得到一个完整的LCS，我们在计算dp表格的过程中，还需要同时记录计算每个单元格值的来源位置，使用<code>↖︎</code>、<code>↑</code>、<code>←</code>三个字符来表示，如下图（若dp[i-1][j]与dp[i][j-1]相等时，默认取左边单元格，即dp[i][j-1]）：<br><img style="margin: 0 auto;" width="300" src="/posts_assets/algorithm_diff/lcs_map_mark.jpeg" alt="lcs map"><br>在上图的表格中，我们只需要从最右下角的单元格开始，按照箭头的指示就可以一步步往左上角靠近，如图中标记红色的路线。在此路线中，<code>←</code>符号表示Y扫过一个字符，此字符需标记为新增；<code>↑</code>符号表示X扫过一个字符，此字符需标记为删除；<code>↖︎</code>表示X、Y同时扫过一个字符，此字符为LCS中的元素，为未改变字符。<br>如上操作，我们就可以得到X与Y的一个<span><del style="background:#ffe6e6;">AB</del><span>C</span><del style="background:#ffe6e6;">A</del><span>B</span><ins style="background:#e6ffe6;">A</ins><span>BA</span><ins style="background:#e6ffe6;">C</ins></span></p>
<p>至此我们已经可以实现一个简单的diff程序了。<br><a href="/rush/algorithm_diff/lib/diff_match.js">前往阅读“阉割版”Diff插件源码</a><br><a href="/rush/algorithm_diff/index.html">点我查看“阉割版”Diff插件Demo演示</a>  </p>
<h3 id="SED"><a href="#SED" class="headerlink" title="SED"></a>SED</h3><p>除了上面介绍的LCS算法之外，最短编辑距离(Shortest Edit Distance，简称SED)算法同样可以用来实现文本diff。<br>SED问题的描述是：给出两个字符串text1与text2，求将text1编辑成text2所需要的最短编辑距离。定义有效的编辑操作有：删除一个字符、新增一个字符、替换一个字符，其中一次删除或新增操作编辑距离记为1，替换操作的编辑距离记为2（因为一个替换操作相当于一个删除操作加上一个新增操作）。  </p>
<p>仔细观察可以发现，SED问题其实是LCS问题的一个逆向描述。LCS求尽可能多的相同部分，而SED求尽可能少的编辑部分（即不同部分）。他们必然满足一个关系：<code>m + n === 2 * LCS(X, Y) + SED(X, Y);</code> 其中m、n分别为X与Y的长度。因此SED问题的结果与LCS是等效的，求解SED问题同样可以使用动态规划的思想来解，只是在公式上有所不同罢了，以下给出SED的求解公式：  </p>
<p>设f[i][j]表示从字符xi转化成yj的编辑距离；<br>设dp[i][j]表示序列Xi=<code>&lt;x1, x2, …, xi&gt;</code>转化成Yj=<code>&lt;y1, y2, …, yj&gt;</code>的最短编辑距离；  </p>
<p><img style="width: 50%;margin: 0 auto;" src="/posts_assets/algorithm_diff/sed_formula1.jpeg" alt="LCS公式 f"><br><img src="/posts_assets/algorithm_diff/sed_formula2.jpeg" alt="LCS公式 dp">  </p>
<p>同样，根据公式，依次填满dp表格，同时标记上每个单元格的来源方位，即可找到两个文本的差异，演算过程类似LCS，在此不再赘述。  </p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>上面介绍的LCS与SED算法，时间复杂度都是O(n*m)，因此精确计算LCS/SED是非常耗费性能的。<br>对于基于字符的diff程序，n与m分别为text1与text2的字符数。一个简单有效的优化方式就是转化成基于行的diff，转化后n与m分别为text1与text2的行数，这就可以大大加速diff的耗时，同时也使得diff结果更具语义(svn/git 的diff命令，就是基于行的diff)。  </p>
<h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>除了转化成基于行的diff之外，在进行LCS/SED之前，可以进行以下预处理操作来加速diff程序  </p>
<h4 id="Equality"><a href="#Equality" class="headerlink" title="Equality"></a>Equality</h4><p>简单的判断text1与text2是否全等，可以免去许多不必要的计算。在一个庞大的项目库中，往往每次修改的文件只是其中很小的一部分，因此绝大部分的文件都可以通过判断内容是否全等直接得到结果，无需再进行LCS/SED计算。  </p>
<h4 id="Common-Prefix-Suffix"><a href="#Common-Prefix-Suffix" class="headerlink" title="Common Prefix/Suffix"></a>Common Prefix/Suffix</h4><p>提取text1与text2的公共前缀与后缀，再对剩余部分进行diff，可以缩小text1与text2的diff范围。提取公共前缀/后缀的操作，可以使用二分查找的算法，可以在O(logn)的时间复杂度内完成(log以2为底数)。  </p>
<h4 id="Singular-Insertion-Deletion"><a href="#Singular-Insertion-Deletion" class="headerlink" title="Singular Insertion/Deletion"></a>Singular Insertion/Deletion</h4><p>在上一步提取完公共前缀/后缀之后，若是text1剩下的为空字符串，则表示仅仅是新增了text2剩下部分的字符串；若是text2剩下的为空字符串，则表示仅仅是删除了text1剩下部分的字符串。因此在这种情况下，也可以直接得到结果，无需再进行LCS/SED计算。  </p>
<h4 id="Two-Edits"><a href="#Two-Edits" class="headerlink" title="Two Edits"></a>Two Edits</h4><p>同样再提取公共前缀/后缀之后，剩余部分在头尾都不会有相同的字符，但是在中间部分可能仍有大量的相同部分，若我们能找到剩余部分的一个公共子串，该公共子串可以将text1、text2剩余部分都分割成两个部分[text1_pre, text1_suf]、[text2_pre, text2_suf]，那么我们就可以转化成求diff(text1_pre, text2_pre)和diff(text1_suf, text2_suf)，再将得到的结果拼接在一起，就可以得到完整的diff结果。为了保证这个分割是有效的，可以规定这个公共字串的长度必需大于较长串长度的二分之一。  </p>
<p>计算最长公共子串仍然是一个复杂的程序，但是我们可以利用满足长度大于二分之一较长串长度的特殊条件，进行特殊查找即可。  </p>
<p><img style="width: 50%;margin: 0 auto;" src="/posts_assets/algorithm_diff/two_edits1.jpeg" alt="two_edits1">  </p>
<p>拖动一个二分之一长度的字符串，我们可以发现，这个字符串必然会包含第二个四分之一子串（图中红色部分）或者第三个四分之一子串。利用这个关系，我们只需要分别取这个四分之一子串，判断是否是另一个字符串的子串，若是，则先用此四分之一子串将两个字符串分隔开，如下图所示，分别求前部分的公共后缀，以及后半部分的公共前缀，然后将<code>公共后缀+四分之一子串+公共前缀</code>即可得到一个公共子串，如此求完所有的公共子串，取最长的一个，判断其长度是否大于长串的二分之一即可。  </p>
<p><img style="width: 50%;margin: 0 auto;" src="/posts_assets/algorithm_diff/two_edits2.jpeg" alt="two_edits2"></p>
<h3 id="后处理"><a href="#后处理" class="headerlink" title="后处理"></a>后处理</h3><p>后处理主要是将前面计算得到的diffs数组进行merge合并，并且做一些语义化的处理，是的输出结果更具语义，利于阅读。  </p>
<h4 id="Semantics"><a href="#Semantics" class="headerlink" title="Semantics"></a>Semantics</h4><p>对于下图所示的例子，以下计算出的6个diff结果都是等效的。之所以有这么多等效的结果，是因为diffs的编辑具有可移动性。若一个编辑操作的左右两边都是相同部分，满足：  </p>
<ol>
<li>编辑部分的第一个字符等于其后相同部分的第一个字符，则此编辑部分可右移一个元素；  </li>
<li>编辑部分的最后一个字符等于其前面相同部分的第一个字符，则此编辑部分可左移一个元素。  </li>
</ol>
<p><img style="width: 60%;margin: 0 auto;" src="/posts_assets/algorithm_diff/semantics.jpeg" alt="semantics"></p>
<p>这6个diff结果中，显然Diff 3与Diff 4是更具有语义的，因此，我们可以指定一个规则，给每个diff结果进行一个评分，得分高的diff结果，则表示它更具有语义。可以有一下几点评分项目：  </p>
<ol>
<li>编辑的边界是一个非字母数字字符，1分；</li>
<li>编辑的边界是一个空白符，2分；</li>
<li>编辑的边界是一个换行符，3分；</li>
<li>编辑的边界是一个空行，4分；</li>
<li>编辑的边界不再是相等部分（移动消耗了整个相等部分），5分。</li>
</ol>
<p>依据以上几点评分规则，我们可以得到，Diff 1、2、5、6的结果，的0分；Diff 3、4的结果，因为边界分别有两个空白符，因此得4分。所以程序就可以判断出，Diff 3、4得结果，才是更具有语义的。  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结以上的描述，我们可以得出以下完整的Diff程序流程图：  </p>
<p><img src="/posts_assets/algorithm_diff/diff_flowchart.jpeg" alt="diff程序流程图">  </p>
<h2 id="阅读资料"><a href="#阅读资料" class="headerlink" title="阅读资料"></a>阅读资料</h2><p><a href="https://neil.fraser.name/writing/diff/">Diff Strategies</a><br><a href="https://neil.fraser.name/software/diff_match_patch/myers.pdf">An O(ND) Difference Algorithm and Its Variations∗</a>  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 常用指令整理]]></title>
      <url>http://koala.ink/2017/05/17/git_cmd/</url>
      <content type="html"><![CDATA[<h2 id="检出项目"><a href="#检出项目" class="headerlink" title="检出项目"></a>检出项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git <span class="built_in">clone</span> [url]</div><div class="line">git <span class="built_in">clone</span> [url] dirname <span class="comment"># 检出代码到指定目录</span></div><div class="line">git <span class="built_in">clone</span> [url] -b branch_name <span class="comment"># 检出指定分支代码</span></div><div class="line"></div><div class="line">git submodule init <span class="comment"># 初始化submodule</span></div><div class="line">git submodule update <span class="comment"># 更新检出submodule</span></div><div class="line">git submodule update --init --recursive <span class="comment"># 初始化检出所有submodule</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git fetch <span class="comment"># 获取远程的更新</span></div><div class="line">git fetch origin master <span class="comment"># 获取master分支的远程更新</span></div><div class="line"></div><div class="line">git pull origin master <span class="comment"># 获取远程master分支到更新，并且与本地的master分支合并</span></div></pre></td></tr></table></figure>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git branch <span class="comment"># 查看本地分支</span></div><div class="line">git branch -r <span class="comment"># 查看远端分支</span></div><div class="line">git branch <span class="_">-a</span> <span class="comment"># 查看本地和远端分支</span></div><div class="line"></div><div class="line">git branch my_branch <span class="comment"># 创建my_branch分支</span></div><div class="line">git checkout my_branch <span class="comment"># 切换到my_branch分支</span></div><div class="line">git checkout -b mybranch <span class="comment"># 创建并切换到my_branch分支</span></div><div class="line">git branch <span class="_">-d</span> mybranch <span class="comment"># 删除本地mybranch分支(需先切换到其它分支)</span></div><div class="line"></div><div class="line">git push origin mybranch:mybranch <span class="comment"># 以本地mybranch分支新建远端mybranch分支</span></div><div class="line">git push origin --delete mybran <span class="comment"># 删除远端mybranch分支</span></div><div class="line"></div><div class="line">git merge mybranch <span class="comment"># 将mybranch分支合并到当前分支</span></div><div class="line">git merge --no-ff mybranch <span class="comment"># 将mybranch分支合并到当前分支 使用非快进式合并</span></div></pre></td></tr></table></figure>
<h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git status <span class="comment"># 查看修改状态</span></div><div class="line"></div><div class="line">git add file.js <span class="comment"># 提交文件修改到暂存区</span></div><div class="line">git reset file.js <span class="comment"># 撤销提交文件到暂存区</span></div><div class="line"></div><div class="line">git commit -m <span class="string">'message'</span> <span class="comment"># 提交修改</span></div><div class="line">git commit -am <span class="string">'message'</span> <span class="comment"># 提交所有变动 相当于 git add . &amp;&amp; git commit -m 'message'</span></div><div class="line"></div><div class="line"><span class="comment"># git push之前 先更新代码 git fetch &amp;&amp; git pull</span></div><div class="line"><span class="comment"># push操作后 别人才能 fetch || pull 到你提交的更新</span></div><div class="line">git push origin master <span class="comment"># 将提交推送到远端master分支</span></div></pre></td></tr></table></figure>
<h2 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a>暂存</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git stash <span class="comment"># 暂存当前工作环境</span></div><div class="line">git stash list <span class="comment"># 列出所有暂存的工作环境列表</span></div><div class="line"></div><div class="line">git stash pop <span class="comment"># 恢复到上一个暂存的工作环境 并从stash list中删除</span></div><div class="line">git stash apply stash@&#123;0&#125; <span class="comment"># 恢复 stash@&#123;0&#125; 工作环境 不从stash list中删除</span></div><div class="line">git stash drop stash@&#123;0&#125; <span class="comment"># 从stash list中删除 stash@&#123;0&#125;工作环境</span></div><div class="line">git stash clear <span class="comment"># 清空暂存工作环境列表</span></div></pre></td></tr></table></figure>
<h2 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git fetch -t <span class="comment"># 获取远端tag更新</span></div><div class="line"></div><div class="line">git tag <span class="comment"># 列出所有tag</span></div><div class="line">git tag tag_name -m <span class="string">'message'</span> <span class="comment"># 创建tag_name标签</span></div><div class="line">git show tag_name <span class="comment"># 查看tag信息</span></div><div class="line">git checkout tag_name <span class="comment"># 切换到tag_name标签</span></div><div class="line">git tag <span class="_">-d</span> tag_name <span class="comment"># 删除tag_name标签</span></div><div class="line">git push origin tag_name <span class="comment"># 将tag_name标签提交到远端</span></div><div class="line">git push origin --delete tag tag_name <span class="comment"># 删除远程tag_name标签</span></div></pre></td></tr></table></figure>
<h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git <span class="built_in">log</span> -p <span class="comment">#查看上次提交的差异变化</span></div><div class="line">git <span class="built_in">log</span> -p -2 <span class="comment">#查看最近两次提交的差异变化</span></div><div class="line">git <span class="built_in">log</span> --online <span class="comment">#列表列出提交记录</span></div><div class="line">git <span class="built_in">log</span> --committer xxx <span class="comment">#列出xxx的提交记录</span></div></pre></td></tr></table></figure>
<h2 id="其它常见问题"><a href="#其它常见问题" class="headerlink" title="其它常见问题"></a>其它常见问题</h2><h3 id="gitignore-无效"><a href="#gitignore-无效" class="headerlink" title=".gitignore 无效"></a>.gitignore 无效</h3><p>原因可能是 gitignore 中的文件已经存在git版本库中，需要将文件从git中移除，gitignore文件才会生效<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git rm -r --cached .</div><div class="line">git add .</div><div class="line">git commit -m <span class="string">'update .gitignore'</span></div></pre></td></tr></table></figure></p>
<h3 id="更改项目git地址"><a href="#更改项目git地址" class="headerlink" title="更改项目git地址"></a>更改项目git地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git remote rm origin <span class="comment">#删除旧的git地址</span></div><div class="line">git remote add origin [url] <span class="comment">#添加新的git地址</span></div></pre></td></tr></table></figure>
<h3 id="查看文件变更记录"><a href="#查看文件变更记录" class="headerlink" title="查看文件变更记录"></a>查看文件变更记录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git <span class="built_in">log</span> -p file_name</div></pre></td></tr></table></figure>
<h3 id="更新远程分支列表信息"><a href="#更新远程分支列表信息" class="headerlink" title="更新远程分支列表信息"></a>更新远程分支列表信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git remote update origin --prune</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[停留曝光]]></title>
      <url>http://koala.ink/2017/03/22/exposure/</url>
      <content type="html"><![CDATA[<h2 id="应用背景"><a href="#应用背景" class="headerlink" title="应用背景"></a>应用背景</h2><p>应BI要求，对于推荐商品的上报，需要做停留曝光，也就是当推荐商品出现在视窗中时，才可以进行数据上报，即与图片懒加载的加载时机相同。<br>此插件可适用于：停留曝光、图片懒加载、翻页加载等。</p>
<h2 id="实现要点"><a href="#实现要点" class="headerlink" title="实现要点"></a>实现要点</h2><p>停留曝光的实现关键点在于，如何判断商品出现在视窗中。我们可以通过判断滚动速度，来判断页面是否停留（当用户以很慢的速度滚动浏览页面时，也应该算曝光；但是如果是快速滑过，则不算曝光）。</p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><table>
<thead>
<tr>
<th>参数字段</th>
<th style="text-align:center">参数类型</th>
<th style="text-align:right">参数描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>selector</td>
<td style="text-align:center">string</td>
<td style="text-align:right">曝光元素选择器</td>
<td></td>
</tr>
<tr>
<td>speed</td>
<td style="text-align:center">number</td>
<td style="text-align:right">页面滚动阀值，即当页面滚动速度等于此值时，则认定为元素曝光</td>
<td></td>
</tr>
<tr>
<td>autoClear</td>
<td style="text-align:center">boolean</td>
<td style="text-align:right">当所有元素都曝光过(至少一次)后，是否自动清除事件监听</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><table>
<thead>
<tr>
<th>参数字段</th>
<th style="text-align:center">参数类型</th>
<th style="text-align:right">参数描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>onExposure</td>
<td style="text-align:center">当有元素曝光时</td>
<td style="text-align:right">曝光元素数组</td>
<td>元素重复曝光，会重复执行</td>
</tr>
<tr>
<td>onFirstExposure</td>
<td style="text-align:center">当有元素首次曝光时</td>
<td style="text-align:right">曝光元素数组</td>
<td>元素首次曝光后，不再执行此钩子函数</td>
</tr>
<tr>
<td>onAllExposured</td>
<td style="text-align:center">当所有元素都曝光过(至少一次)时</td>
<td style="text-align:right">曝光元素数组</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> exposure = <span class="keyword">new</span> Exposure(&#123;</div><div class="line">  <span class="attr">selector</span>: <span class="string">'.selector'</span>,</div><div class="line">  <span class="attr">speed</span>: <span class="number">20</span>,</div><div class="line">  <span class="attr">autoClear</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">onExposure</span>: <span class="function"><span class="keyword">function</span>(<span class="params">targets</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'targets exposured:'</span>, targets);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onFirstExposure</span>: <span class="function"><span class="keyword">function</span>(<span class="params">targets</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'targets first exposured:'</span>, targets);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onAllExposured</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'all the targets are exposured.'</span>);</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="用法举例"><a href="#用法举例" class="headerlink" title="用法举例"></a>用法举例</h2><h3 id="停留曝光"><a href="#停留曝光" class="headerlink" title="停留曝光"></a>停留曝光</h3><p>通过此插件，就可以很轻松的实现之前描述的停留曝光的需求了，代码如下：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 停留曝光 上报</span></div><div class="line"><span class="comment">// 只需要在 onFirstExposure 中进行上报即可</span></div><div class="line"><span class="keyword">var</span> exposure = <span class="keyword">new</span> Exposure(&#123;</div><div class="line">  <span class="attr">selector</span>: <span class="string">'.recommend-item'</span>,</div><div class="line">  <span class="attr">speed</span>: <span class="number">20</span>,</div><div class="line">  <span class="attr">onFirstExposure</span>: <span class="function"><span class="keyword">function</span>(<span class="params">targets</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> items = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; targets.length; ++i)&#123;</div><div class="line">      items.push(targets[i].getAttribute(<span class="string">'item-id'</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 上报</span></div><div class="line">    spider.trackAction(&#123;</div><div class="line">      <span class="attr">actionName</span>: <span class="string">"recommend-exposure"</span>,</div><div class="line">      <span class="attr">actionArgs</span>: &#123;</div><div class="line">        <span class="string">"items"</span>: items.join(<span class="string">','</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>因为此插件工作机制类似图片懒加载功能，因此也可以用来实现图片懒加载，如下：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 图片懒加载</span></div><div class="line"><span class="keyword">var</span> exposure = <span class="keyword">new</span> Exposure(&#123;</div><div class="line">  <span class="attr">selector</span>: <span class="string">'.recommend-item'</span>,</div><div class="line">  <span class="attr">speed</span>: <span class="number">20</span>,</div><div class="line">  <span class="attr">onFirstExposure</span>: <span class="function"><span class="keyword">function</span>(<span class="params">targets</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> items = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; targets.length; ++i)&#123;</div><div class="line">      <span class="comment">// 图片懒加载</span></div><div class="line">      <span class="keyword">var</span> img = $(targets[i]).find(<span class="string">'img'</span>);</div><div class="line">      img.attr(<span class="string">'src'</span>, img.attr(<span class="string">'data-src'</span>));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="翻页加载"><a href="#翻页加载" class="headerlink" title="翻页加载"></a>翻页加载</h3><p>如果保证页面从顶部开始加载，可以将speed设置为一个很大的值，那么当所有的元素都曝光过的时候，就可以粗略的断定页面滚动到底部了，因此可以在 onAllExposured 回调中进行翻页加载，大致如下：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> isLoading = <span class="literal">false</span>,</div><div class="line">    hasNext = <span class="literal">true</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadPage</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// do something here ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> exposure = <span class="keyword">new</span> Exposure(&#123;</div><div class="line">  <span class="attr">selector</span>: <span class="string">'.selector'</span>,</div><div class="line">  <span class="attr">speed</span>: <span class="number">9999</span>, <span class="comment">// 将滚动阀值设置为一个大值</span></div><div class="line">  autoClear: <span class="literal">false</span>, <span class="comment">// 所有元素都曝光后不清除事件</span></div><div class="line">  onAllExposured: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(isLoading) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(!hasNext)&#123;</div><div class="line">      exposure.clear();</div><div class="line">    &#125;</div><div class="line">    isLoading = <span class="literal">true</span>;</div><div class="line">    loadPage();</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="插件源码"><a href="#插件源码" class="headerlink" title="插件源码"></a>插件源码</h2><p>最后，贴上插件代码：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * 停留曝光 by daihuibin 2017/3/21</div><div class="line"> *</div><div class="line"> * var exposure = new Exposure(&#123;</div><div class="line"> *   selector: 'selector', // 曝光元素的选择器</div><div class="line"> *   speed: 20, // 滚屏速度阀值 滚动速度小于此值则也认定为曝光</div><div class="line"> *   autoClear: true, // 在所有元素都曝光过之后，自动清除事件监听</div><div class="line"> *   onExposure: function(targets)&#123;&#125;, // 元素曝光回调 传入当前曝光的元素数组</div><div class="line"> *   onFirstExposure: function(targets)&#123;&#125;, // 元素首次曝光回调 传入当前首次曝光的元素数组</div><div class="line"> *   onAllExposured: function()&#123;&#125;, // 所有元素都曝光过执行回调</div><div class="line"> * &#125;);</div><div class="line"> */</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> Exposure = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> DEF = &#123;</div><div class="line">      <span class="attr">selector</span>: <span class="string">''</span>,</div><div class="line">      <span class="attr">speed</span>: <span class="number">20</span>,</div><div class="line">      <span class="attr">autoClear</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">onExposure</span>: <span class="function"><span class="keyword">function</span>(<span class="params">targets</span>)</span>&#123;&#125;,</div><div class="line">      <span class="attr">onFirstExposure</span>: <span class="function"><span class="keyword">function</span>(<span class="params">targets</span>)</span>&#123;&#125;,</div><div class="line">      <span class="attr">onAllExposured</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Exposure</span>(<span class="params">ops</span>)</span>&#123;</div><div class="line">      <span class="keyword">this</span>.ops = $.extend(&#123;&#125;, DEF, ops);</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Exposure.prototype = &#123;</div><div class="line">      <span class="attr">targetCanExposure</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> rect = target.getBoundingClientRect(),</div><div class="line">            vpHeight = <span class="built_in">document</span>.head.parentNode.clientHeight;</div><div class="line">        <span class="comment">// 定义元素超过一半内容展示在窗口即为曝光</span></div><div class="line">        <span class="keyword">if</span>(rect.bottom &gt;= rect.height/<span class="number">2</span> &amp;&amp; rect.top &lt;= vpHeight - rect.height/<span class="number">2</span>)&#123;</div><div class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">getScrollSpeed</span>: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> curPosY = el ? el.getBoundingClientRect().top : <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> curPosX = el ? el.getBoundingClientRect().left: <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> speedY = <span class="keyword">this</span>.lastPosY - curPosY;</div><div class="line">        <span class="keyword">var</span> speedX = <span class="keyword">this</span>.lastPosX - curPosX;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.lastSpeeds.length&lt;<span class="number">10</span>)&#123;</div><div class="line">            <span class="keyword">this</span>.lastSpeeds.push((speedY+speedX)/<span class="number">2</span>)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">this</span>.lastSpeeds.shift()</div><div class="line">            <span class="keyword">this</span>.lastSpeeds.push((speedY+speedX)/<span class="number">2</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> sumSpeed = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.lastSpeeds.length; ++i)&#123;</div><div class="line">          sumSpeed += <span class="keyword">this</span>.lastSpeeds[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.aveSpeed = <span class="built_in">Math</span>.abs(sumSpeed/<span class="keyword">this</span>.lastSpeeds.length);</div><div class="line">        <span class="keyword">this</span>.lastPosY = curPosY;</div><div class="line">        <span class="keyword">this</span>.lastPosX = curPosX;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">getExposureTargets</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>,</div><div class="line">            els = $(<span class="keyword">this</span>.ops.selector),</div><div class="line">            obj = &#123;</div><div class="line">              <span class="attr">exposureTargets</span>: [],</div><div class="line">              <span class="attr">firstExposureTargets</span>: [],</div><div class="line">            &#125;,</div><div class="line">            exposureCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">        els.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</div><div class="line">          <span class="comment">// 元素是否可以曝光</span></div><div class="line">          <span class="keyword">if</span>(_this.targetCanExposure(<span class="keyword">this</span>))&#123;</div><div class="line">            <span class="comment">// 元素是否首次曝光</span></div><div class="line">            <span class="keyword">if</span>(!<span class="built_in">Number</span>($<span class="keyword">this</span>.attr(<span class="string">'exposure'</span>)))&#123;</div><div class="line">              $<span class="keyword">this</span>.attr(<span class="string">'exposure'</span>, <span class="number">1</span>);</div><div class="line">              obj.exposureTargets.push(<span class="keyword">this</span>);</div><div class="line">              obj.firstExposureTargets.push(<span class="keyword">this</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              obj.exposureTargets.push(<span class="keyword">this</span>);</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">if</span>(<span class="built_in">Number</span>($<span class="keyword">this</span>.attr(<span class="string">'exposure'</span>)))&#123;</div><div class="line">            ++exposureCount;</div><div class="line">          &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(els.length === exposureCount)&#123;</div><div class="line">          <span class="comment">// 元素全都曝光过 执行回调函数</span></div><div class="line">          <span class="keyword">if</span>(<span class="keyword">this</span>.ops.autoClear)&#123;</div><div class="line">            <span class="keyword">this</span>.clear();</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">typeof</span> <span class="keyword">this</span>.ops.onAllExposured === <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.ops.onAllExposured.call(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> obj;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">doExposure</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// 获取曝光元素</span></div><div class="line">        <span class="keyword">var</span> obj = <span class="keyword">this</span>.getExposureTargets();</div><div class="line">        <span class="comment">// console.log(obj);</span></div><div class="line">        <span class="keyword">if</span>(obj.exposureTargets.length &amp;&amp; <span class="keyword">typeof</span> <span class="keyword">this</span>.ops.onExposure === <span class="string">'function'</span>)&#123;</div><div class="line">          <span class="keyword">this</span>.ops.onExposure.call(<span class="keyword">this</span>, obj.exposureTargets);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(obj.firstExposureTargets.length &amp;&amp; <span class="keyword">typeof</span> <span class="keyword">this</span>.ops.onFirstExposure === <span class="string">'function'</span>)&#123;</div><div class="line">          <span class="keyword">this</span>.ops.onFirstExposure.call(<span class="keyword">this</span>, obj.firstExposureTargets);</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">scrollEventHandle</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> el = <span class="literal">null</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; e.target.childNodes.length; ++i)&#123;</div><div class="line">          <span class="keyword">if</span>(e.target.childNodes[i].nodeType == <span class="number">1</span>)&#123;</div><div class="line">            el = e.target.childNodes[i];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.getScrollSpeed(el);</div><div class="line">        <span class="comment">// console.log(this.aveSpeed);</span></div><div class="line"></div><div class="line">        <span class="comment">// 滚屏速度大于设置的速度阀值 return</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.aveSpeed &gt; <span class="keyword">this</span>.ops.speed)&#123;</div><div class="line">          <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.doExposure();</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">clear</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $(<span class="built_in">window</span>).off(<span class="string">'scroll'</span>, <span class="keyword">this</span>.scrollEventHandleBind);</div><div class="line">        $(<span class="built_in">window</span>).off(<span class="string">'scrollEnd'</span>, <span class="keyword">this</span>.scrollEndEventHandleBind);</div><div class="line">        <span class="keyword">this</span>.scrollEventHandleBind = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">this</span>.scrollEndEventHandleBind = <span class="literal">null</span>;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">run</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.scrollEventHandleBind = <span class="keyword">this</span>.scrollEventHandle.bind(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">this</span>.scrollEndEventHandleBind = <span class="keyword">this</span>.doExposure.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.lastPosY = <span class="built_in">document</span>.body ? <span class="built_in">document</span>.body.getBoundingClientRect().top : <span class="built_in">document</span>.head.parentNode.getBoundingClientRect().top;</div><div class="line">        <span class="keyword">this</span>.lastPosX = <span class="built_in">document</span>.body ? <span class="built_in">document</span>.body.getBoundingClientRect().left : <span class="built_in">document</span>.head.parentNode.getBoundingClientRect().left;</div><div class="line">        <span class="keyword">this</span>.lastSpeeds = [];</div><div class="line">        <span class="keyword">this</span>.aveSpeed = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          _this.doExposure();</div><div class="line">          $(<span class="built_in">window</span>).off(<span class="string">'load'</span>, onload);</div><div class="line">          $(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>, _this.scrollEventHandleBind);</div><div class="line">          $(<span class="built_in">window</span>).on(<span class="string">'scrollEnd'</span>, _this.scrollEndEventHandleBind);</div><div class="line">        &#125;</div><div class="line">        $(<span class="built_in">window</span>).on(<span class="string">'load'</span>, onload);</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// scrollEnd event</span></div><div class="line">        <span class="keyword">var</span> cntr = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> lastCntr = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> diff = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> scrollEnd = <span class="built_in">document</span>.createEvent(<span class="string">'HTMLEvents'</span>);</div><div class="line">        scrollEnd.initEvent(<span class="string">'scrollEnd'</span>, <span class="literal">true</span>, <span class="literal">false</span>);</div><div class="line">        scrollEnd.eventType = <span class="string">'message'</span>;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">enterFrame</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">if</span>(cntr != lastCntr)&#123;</div><div class="line">            diff++;</div><div class="line">            <span class="keyword">if</span>(diff == <span class="number">5</span>)&#123;</div><div class="line">              <span class="built_in">window</span>.dispatchEvent(scrollEnd);</div><div class="line">              cntr = lastCntr;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          requestAnimationFrame(enterFrame);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">window</span>.requestAnimationFrame(enterFrame)</div><div class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          lastCntr = cntr;</div><div class="line">          diff = <span class="number">0</span>;</div><div class="line">          ++cntr;</div><div class="line">        &#125;, <span class="literal">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// start exposure listener</span></div><div class="line">        <span class="keyword">this</span>.run();</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Exposure;</div><div class="line">  &#125;)();</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Exposure;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[F2E Books List]]></title>
      <url>http://koala.ink/2016/10/20/F2E_books_list/</url>
      <content type="html"><![CDATA[<!-- ¥49.00 -->你不知道的JavaScript（上卷）<br><br><!-- ¥79.00 -->你不知道的JavaScript(中卷)<br><br><!-- ¥139.00 -->O’Reilly精品图书系列:JavaScript权威指南(第6版)<br><br><!-- ¥35.00 -->计算机科学丛书：设计模式 可复用面向对象软件的基础<br><br><a id="more"></a>
<!-- ¥69.00 -->ES6 标准入门（第2版）<br><br><!-- ¥49.00 -->JavaScript语言精粹（修订版）<br><br><!-- ¥39.00 -->编程珠玑（第2版·修订版）<br><br><!-- ¥35.00 -->编程珠玑（续）（修订版）<br><br><!-- ¥128.00 -->算法导论（原书第3版）<br><br><!-- ¥59.00 -->点石成金：访客至上的Web和移动可用性设计秘笈(第3版)<br><br><!-- ¥86.80 -->Node.js硬实战：115个核心技巧<br><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">!(<span class="regexp">/^,?$|^(,,+?)\1+$/</span>.test(<span class="built_in">Array</span>(++x)))</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css3动画详解]]></title>
      <url>http://koala.ink/2016/09/29/css3_transition_animation/</url>
      <content type="html"><![CDATA[<h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><ul>
<li><a href="/rush/css3_transition_animation/demo/3dtransforms/index.html">3D transforms</a>  </li>
<li><a href="/rush/css3_transition_animation/demo/3dhover/index.html">3D hover</a>  </li>
<li><a href="/rush/css3_transition_animation/demo/leaves/index.html">leaves</a>  </li>
<li><a href="/rush/css3_transition_animation/demo/menu/index.html">menu</a>  </li>
</ul>
<h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><p>description：设置对象变换时的过渡，指定对象属性的值发生变化时的过渡动画。<br>transition：<code>transition-property || transition-duration || transition-timing-function || transition-delay</code>  </p>
<p>default:  <code>all 0s ease 0s</code>  </p>
<a id="more"></a>
<h3 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h3><p>description：设置对象过渡的持续时间<br>transition-duration：<code>&lt;time&gt;</code>  </p>
<h3 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h3><p>description：设置对象中的参与过渡的属性<br>value: <code>none | all |  [IDENT]</code>  </p>
<p><code>none</code>指所有属性都不参与过渡；<code>all</code>指所有属性都参与过渡；<code>[IDENT]</code>指定个别属性参与过渡。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.button</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#800</span>;</div><div class="line">    <span class="attribute">transition</span>: background-color .<span class="number">5s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.panel</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</div><div class="line">    <span class="attribute">transition</span>: height .<span class="number">5s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> + <span class="selector-class">.panel</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">180px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查看演示：<a href="/rush/css3_transition_animation/diy/transition.html">transition demo</a>  </p>
<p>此时我们<code>hover</code>在<code>.button</code>上的时候，可以看到<code>.button</code>元素的<code>background-color</code>属性值会从<code>#800</code>过渡到<code>red</code>，<code>.panel</code>的<code>height</code>的属性会从<code>0px</code>过渡到<code>180px</code>。如果此时我们在<code>.panel</code>中增加文案，之前设定的<code>180px</code>已经展示不下新的文案，所以需要把代码<code>.button:hover + .panel</code>选择器中的<code>height: 180px</code>改成<code>height: auto</code>，这时我们再看看页面效果。(<a href="/rush/css3_transition_animation/diy/transition_1.html">点击查看DEMO</a>)  </p>
<p>此时会发现，<code>.panel</code>的高度不再有一个过渡的动画，而是直接从<code>0px</code>瞬间变化到<code>auto</code>，这是为什么呢？  </p>
<p><strong><font color="red">注：并不是所有的属性和属性值都能存在过渡动画。</font></strong>  </p>
<p>这里特别需要注意的是，如果想要指定某个属性有过渡的状态，我们就需要保证我们能够计算出过渡过程中每个时间点的属性值。<br>比如，从<code>height: 0;</code>过渡到<code>height: 180px;</code>，过度时间是<code>t</code>，那我们可以算出在<code>x</code>时刻的属性状态是<code>height: (180px-0)*x/t;</code>。（<strong>注：这里公式成立的前提是假设<code>transition-timing-function: linear;</code>，如果<code>transition-timing-function</code>为其他值，一样可以计算，只不过算法不同</strong>）  </p>
<p>然而刚才设置了<code>height: auto;</code>，则在<code>x</code>时刻的属性状态为<code>height: (auto-0px)*x/t;</code>，显然，这种状态是不存在的，因此在设置高度变成<code>auto</code>之后，也自然不会再有过渡动画了。  </p>
<p>所以此处可以修改为使用<code>transform: scale(1, 0);</code>来代替<code>height: 0;</code>，使用<code>transform: scale(1);</code>代替<code>height: auto;</code>，如此一来，就又能出现过渡动画了，<a href="/rush/css3_transition_animation/diy/transition_scale.html">请看修改为<code>transform</code>后的DEMO</a>。  </p>
<p>再比如日常中最常使用的控制元素显示隐藏的代码是<code>display: block;</code>和<code>display: none;</code>，这也是不存在过渡动画的，因此，可以调整改为使用<code>opacity: 1;</code>和<code>opacity: 0;</code>来替换。  </p>
<h3 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h3><p>description：设置对象中过渡的动画类型，通俗的理解就是设置在过渡过程中元素值的变化速度<br>transition-timing-function:  <code>ease | linear | ease-in | ease-out | ease-in-out | step-start | step-end | steps(&lt;integer&gt;[, [ start | end ] ]?) | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)</code>  </p>
<h4 id="预设的五个时间曲线"><a href="#预设的五个时间曲线" class="headerlink" title="预设的五个时间曲线"></a>预设的五个时间曲线</h4><p><img src="/posts_assets/css3_transition_animation/transition_timing_function_0.jpg" alt="transition_timing_function_0.jpg">  </p>
<p>上图展示了<code>transition-timing-function</code>设置为<code>ease</code>, <code>linear</code>, <code>ease-in</code>, <code>ease-out</code>, <code>ease-in-out</code>的运动状态图。图中表示的是相同时间间隔捕捉到的小球位置，可以看出，在小球越密集的地方，表示其运动速度越快；小球越稀疏的地方，表示其运动速度越慢。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">transition-property</span>: transform;</div><div class="line">    <span class="attribute">transition-duration</span>: <span class="number">2s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box1</span> &#123; <span class="attribute">transition-timing-function</span>: ease;&#125;</div><div class="line"><span class="selector-class">.box2</span> &#123; <span class="attribute">transition-timing-function</span>: linear; &#125;</div><div class="line"><span class="selector-class">.box3</span> &#123; <span class="attribute">transition-timing-function</span>: ease-in; &#125;</div><div class="line"><span class="selector-class">.box4</span> &#123; <span class="attribute">transition-timing-function</span>: ease-out; &#125;</div><div class="line"><span class="selector-class">.box5</span> &#123; <span class="attribute">transition-timing-function</span>: ease-in-out; &#125;</div></pre></td></tr></table></figure>
<p>运行效果<a href="/rush/css3_transition_animation/diy/ease.html">点击查看DEMO</a>  </p>
<p><img src="/posts_assets/css3_transition_animation/transition_timing_function_1.jpg" alt="transition_timing_function_1.jpg">  </p>
<h4 id="阶跃函数"><a href="#阶跃函数" class="headerlink" title="阶跃函数"></a>阶跃函数</h4><p><strong>steps(<integer>[, [ start | end ] ]?)</strong><br>阶跃函数指定接收两个参数，第一个参数为正整数，指定阶跃函数的间隔数；第二个参数可选，值为<code>[ start | end ]</code>，为跃点，指定在每个间隔的起点或是终点发生阶跃变化，默认为<code>end</code>。<br><code>step-start</code>和<code>step-end</code>是<code>steps</code>函数的特殊形式：<code>step-start = steps(1, start)</code>，<code>step-end = steps(1, end)</code>  </p>
<p><img src="/posts_assets/css3_transition_animation/steps.jpg" alt="steps.jpg"><br>上图为一张<code>500*72</code>的雪碧图，其中有十个小企鹅，每个小企鹅<code>50*72</code>，连起来播放是一个挥手的动画。<br><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.hello</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">72px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(steps.png) no-repeat <span class="number">0</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="attribute">transition-duration</span>: <span class="number">3s</span>;</div><div class="line"></div><div class="line">    <span class="attribute">transition-timing-function</span>: <span class="built_in">steps</span>(3, start);</div><div class="line"></div><div class="line">    <span class="attribute">transition-timing-function</span>: <span class="built_in">steps</span>(3, end);</div><div class="line"></div><div class="line">    <span class="attribute">transition</span>: background-position <span class="number">1s</span> <span class="built_in">steps</span>(9);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.hello</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">background-position</span>: -<span class="number">450px</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码中指定<code>.hello</code>的大小为一个小企鹅的尺寸，背景图片为上面的这张雪碧图，起始<code>background-position: 0px 0px;</code>，鼠标<code>hover</code>时<code>background-position</code>会过渡到<code>-450px 0</code>的位置，也就是最后一个小企鹅的左上角。这里设置了<code>steps(9)</code>，其中9是因为我们希望每次阶跃变化的大小是一个企鹅的宽度<code>50px</code>，从<code>0px 0px</code>过渡到<code>-450px 0</code>，状态一共需要阶跃9次。<a href="/rush/css3_transition_animation/diy/steps.html">点击查看DEMO</a>  </p>
<p>接下去看下一个例子，区别一下第二个参数设置为<code>start</code>和<code>end</code>的不同之处<br><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">transition-property</span>: width;</div><div class="line">    <span class="attribute">transition-duration</span>: <span class="number">3s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box1</span> &#123;</div><div class="line">    <span class="attribute">transition-timing-function</span>:  <span class="built_in">steps</span>(3, start);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box2</span> &#123;</div><div class="line">    <span class="attribute">transition-timing-function</span>:  <span class="built_in">steps</span>(3, end);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="/rush/css3_transition_animation/diy/start_end.html">点击查看DEMO</a>  </p>
<p>可以看到，<code>.box1</code>在鼠标<code>hover</code>的时候，他的宽度马上增加了<code>100px</code>,进入了第一阶段的状态，第三秒开始的时候，他的宽度已经达到了<code>400px</code>；而<code>.box2</code>在鼠标<code>hover</code>的时候，在第一秒始终停留在初始状态，直到第三秒末，宽度才变成<code>400px</code>。如下两张状态图：  </p>
<p><img src="/posts_assets/css3_transition_animation/steps_start.jpg" alt="steps_start.jpg"><br><code>start</code>是在一个阶段开始之前就发生阶跃变化，整体过渡过程表现为跳过了初始状态。  </p>
<p><img src="/posts_assets/css3_transition_animation/steps_end.jpg" alt="steps_end.jpg"><br><code>end</code>是在一个阶段结束的之后发生阶跃变化，整个过渡过程表现为跳过了最后的结束状态。  </p>
<h4 id="贝塞尔曲线函数"><a href="#贝塞尔曲线函数" class="headerlink" title="贝塞尔曲线函数"></a>贝塞尔曲线函数</h4><p><strong>cubic-bezier(&lt; number &gt;, &lt; number &gt;, &lt; number &gt;, &lt; number &gt;)</strong><br>贝塞尔曲线函数接收四个参数，取值范围为[0,1]。之前介绍的 <a href="#预设的五个时间曲线">预设的五个时间曲线</a> ，都可以转化为贝塞尔曲线的表达形式，如下所示：<br><strong>ease:</strong> <code>cubic-bezier(0.25, 0.1, 0.25, 1.0)</code><br><strong>linear:</strong> <code>cubic-bezier(0.0, 0.0, 1.0, 1.0)</code><br><strong>ease-in:</strong> <code>cubic-bezier(0.42, 0, 1.0, 1.0)</code><br><strong>ease-out:</strong> <code>cubic-bezier(0, 0, 0.58, 1.0)</code><br><strong>ease-in-out:</strong> <code>cubic-bezier(0.42, 0, 0.58, 1.0)</code>  </p>
<p>贝塞尔曲线函数，其实定义的是属性状态与时间的一个关系函数。如下坐标轴所示：<br><img src="/posts_assets/css3_transition_animation/cubic_bezier.jpg" alt="cubic_bezier.jpg">  </p>
<p>坐标轴中横坐标是时间，纵坐标是属性状态，最右上角的坐标是<code>(1,1)</code>。在时间曲线中的每一个点，表示的就是对应时刻下属性的取值，每个点的斜率表示的就是在这个时刻属性的变化速度，因此在时间曲线中斜率越小，也就是越平缓的地方，表示属性变化速度越慢；斜率越大，也就是越陡峭的地方，表示属性变化速度越快。如上图中开始跟结束的时候，斜率都比较小，而中间的阶段，斜率比较大，因此这个曲线表示的就是在变化过程中由慢到快再到慢的一个过程。  </p>
<p>贝塞尔曲线函数的四个参数，前两个是上图中红色点的坐标(x1,y1)，后两个是图中蓝色点的坐标(x2,y2)，也就是 <strong>cubic-bezier(x1, y1, x2, y2)</strong> 这样的形式。我们可以在 <a href="http://cubic-bezier.com/">http://cubic-bezier.com/</a> 这个工具上来调整我们独特的贝塞尔曲线，通过拖拽红色跟蓝色点，可以形成不一样的贝塞尔曲线。我们发现，其实规定取值范围在[0,1]之间，针对的是x坐标，也就是时间，因为时间如果超过了这个范围，就会出现在同一个时刻对应了两个不同的属性状态，这个是没有意义的；而y坐标是可以超过这个范围的，如下我们通过拖拽两个点形成了这样一个曲线：<br><img src="/posts_assets/css3_transition_animation/cubic_bezier_over.jpg" alt="cubic_bezier_over.jpg"><br>表示的是在过渡过程中属性值会超过终止状态的设定值然后在回到终点位置，表现为回弹的效果。<br>又或者是这样：<br><img src="/posts_assets/css3_transition_animation/cubic_bezier_back.jpg" alt="cubic_bezier_back.jpg"><br>表示在开始的时候会往回运动之后再过渡到终点位置。<br><img src="/posts_assets/css3_transition_animation/cubic_bezier_preview.jpg" alt="cubic_bezier_preview.jpg"><br>因此我们可以通过拖拽两个点来实现不一样的动画效果，在右边窗口可以看到最上面展示了我们调整出来的贝塞尔曲线表达式，点击 <strong>Preview &amp; compare</strong> 右边的 <strong>GO!</strong> 按钮，既可以查看我们调整出来的曲线运动情况，红色的为我们调整的曲线，蓝色的为对照曲线，可以点击 <strong>Library</strong> 下面的曲线来选择不一样的参照曲线。  </p>
<h3 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h3><p>description：设置对象延迟过渡的时间<br>transition-duration：<code>&lt;time&gt;</code>  </p>
<p>可以通过设置不一样的<code>transition-delay</code>来错开不同属性过渡的开始时间，呈现为按一定的顺序来开始过渡。  </p>
<h3 id="transition的不足"><a href="#transition的不足" class="headerlink" title="transition的不足"></a>transition的不足</h3><ul>
<li>在页面加载的时候不能触发，因为只有在属性值发生改变的时候才会触发过渡动画。  </li>
<li>动画不能重复播放，过渡动画只会播放一次。  </li>
<li>无法设置多种状态（keyframes只有from，to），只能从初始状态过渡到终止状态，无法再设置其他的状态。  </li>
<li>transition规则作用的是单个属性的过渡状态，不能涉及多个属性，即使定义了<code>transition: all 1s ease 0s;</code>这样的规则，其对应的每个属性过渡动画也都是相互独立，相当于是定义了很多个<code>transition</code>规则，而每个<code>transition</code>只作用于一个属性。  </li>
</ul>
<h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><p>description：设置对象所应用的动画特效。<br>animation： <code>animation-name  ||  animation-duration  ||  animation-timing-function  ||  animation-delay  ||  animation-iteration-count  ||  animation-direction  ||  animation-fill-mode  ||  animation-play-state</code>  </p>
<h3 id="animation-name"><a href="#animation-name" class="headerlink" title="animation-name"></a>animation-name</h3><p>description：设置对象所应用的动画名称(<code>@keyframes</code>)<br>animation-name：<code>none | &lt;identifier&gt;</code><br>default: <code>none</code>  </p>
<p>定义动画的写法如下：<br><figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@@<span class="keyword">keyframes</span> identifier &#123;</div><div class="line">    <span class="selector-tag">from</span> &#123; <span class="comment">/* css styles */</span> &#125;</div><div class="line">    20% &#123; <span class="comment">/* css styles */</span> &#125;</div><div class="line">    40% &#123; <span class="comment">/* css styles */</span> &#125;</div><div class="line">    <span class="selector-tag">to</span> &#123; <span class="comment">/* css styles */</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中<code>from</code>等同于<code>0%</code>，<code>to</code>等同于<code>100%</code>。  </p>
<h3 id="animation-duration"><a href="#animation-duration" class="headerlink" title="animation-duration"></a>animation-duration</h3><p>description：指定对象动画的持续时间<br>transition-duration：<code>&lt;time&gt;</code>  </p>
<h3 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h3><p>description：设置对象动画的过渡类型  </p>
<p>这里<code>animation-timing-function</code>的用法与 <a href="#transition-timing-function">transition-timing-function</a> 类似，就不在多做介绍。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0);</div><div class="line">    <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</div><div class="line">    <span class="attribute">animation-timing-function</span>: ease;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box1</span> &#123; <span class="attribute">animation-name</span>: move; &#125;</div><div class="line"><span class="selector-class">.box2</span> &#123; <span class="attribute">animation-name</span>: anotherMove; &#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> move &#123;</div><div class="line">    <span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translate</span>(400px, 0); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> anotherMove &#123;</div><div class="line">    50% &#123; <span class="attribute">transform</span>: <span class="built_in">translate</span>(200px, 0); &#125;</div><div class="line">    <span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translate</span>(400px, 0); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码为两个<code>.box</code>指定不一样的<code>animation-name</code>：<code>move</code>动画让box从<code>translate(0)</code>运动到<code>translate(400px, 0)</code>，动画时间是<code>2s</code>；<code>anotherMove</code>动画让box第一秒从<code>translate(0)</code>运动到<code>translate(200px, 0)</code>，第二秒再从<code>translate(200px, 0)</code>运动到<code>translate(400px, 0)</code>，比较这两个动画是否相同？<a href="/rush/css3_transition_animation/diy/timingfunction.html">点击查看DEMO演示</a>  </p>
<p>实际运行效果两个动画并不相同，他们的运动情况如下所示：<br><img src="/posts_assets/css3_transition_animation/animation_timing_function.jpg" alt="animation_timing_function.jpg">  </p>
<p>可以看到，<strong><font color="red"><code>animation-timing-function</code>作用的对象，其实是两个关键帧之间，而不是整个动画过程。</font></strong>  </p>
<h3 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a>animation-delay</h3><p>description：指定对象动画延迟的时间<br>transition-duration：<code>&lt;time&gt;</code>  </p>
<p>可以通过给每个动画设置不同的<code>animation-delay</code>来设置每个动画开始的时间，调整每个动画的播放顺序。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">animation</span>: zoomInLeft .<span class="number">5s</span> <span class="number">1s</span> backwards, shake .<span class="number">5s</span> <span class="number">1.5s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> zoomInLeft &#123;</div><div class="line">    <span class="selector-tag">from</span> &#123;</div><div class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(.1, .1, .1) <span class="built_in">translate3d</span>(-1000px, 0, 0);</div><div class="line">        <span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(0.550, 0.055, 0.675, 0.190);</div><div class="line">    &#125;</div><div class="line">    60% &#123;</div><div class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(.475, .475, .475) <span class="built_in">translate3d</span>(10px, 0, 0);</div><div class="line">        <span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(0.175, 0.885, 0.320, 1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> shake &#123;</div><div class="line">    <span class="selector-tag">from</span>, <span class="selector-tag">to</span> &#123;</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">    &#125;</div><div class="line">    10%, 30%, 50%, 70%, 90% &#123;</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-10px, 0, 0);</div><div class="line">    &#125;</div><div class="line">    20%, 40%, 60%, 80% &#123;</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(10px, 0, 0);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码为<code>.box</code>设定了两个动画，一个是<code>zoomInLeft</code>，控制让<code>.box</code>出现的动画；另一个是<code>shake</code>，控制<code>.box</code>的抖动动画。这里希望<code>shake</code>动画的播放在<code>zoomInLeft</code>动画之后，所以就要将<code>shake</code>动画的<code>animation-delay</code>设置为<code>zoomInLeft</code>动画的延迟时间加上动画时间，即：<code>shake.animation-delay = zoomInLeft.animation-delay + zoomInLeft.animation-duration;</code>。<a href="/rush/css3_transition_animation/diy/delay.html">点击查看动画效果</a>  </p>
<h3 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a>animation-iteration-count</h3><p>description：设置对象动画的循环次数<br>animation-iteration-count：<code>infinite | &lt;number&gt;</code><br>default: <code>1</code>  </p>
<p><code>animation-iteration-count</code>默认值是1，也就是只播放一次动画，这里可以设置一个正整数，表示你希望动画播放的次数，或者设置为<code>infinite</code>，表示无限循环。  </p>
<h3 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h3><p>description：设置对象动画在循环中是否反向运动<br>animation-direction：<code>normal | reverse | alternate | alternate-reverse</code><br>default: <code>normal</code>  </p>
<p><code>normal</code>为正常模式，动画会从第一帧播放到最后一帧；<code>reverse</code>为反向模式，动画会倒着从最后一帧播放到第一帧；<code>alternate</code>设置动画先正向播放，第二次再从反向播放，如此交替；<code>alternate-reverse</code>则是先让动画反向播放，第二次再正向播放，如此交替。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">animation-timing-function</span>: linear;</div><div class="line">    <span class="attribute">animation-iteration-count</span>: <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">animation-name</span>: move;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box1</span> &#123; <span class="attribute">animation-direction</span>: normal; &#125;</div><div class="line"><span class="selector-class">.box2</span> &#123; <span class="attribute">animation-direction</span>: reverse; &#125;</div><div class="line"><span class="selector-class">.box3</span> &#123; <span class="attribute">animation-direction</span>: alternate; &#125;</div><div class="line"><span class="selector-class">.box4</span> &#123; <span class="attribute">animation-direction</span>: alternate-reverse; &#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> move &#123;</div><div class="line">    <span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translate</span>(400px, 0); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码为四个box分别设置了不同的<code>animation-direction</code>，<a href="/rush/css3_transition_animation/diy/direction.html">点击查看代码运行效果</a>  </p>
<p>从DEMO的运行效果中，可以总结出这四个不同值的区别表现为如下效果：  </p>
<p><img src="/posts_assets/css3_transition_animation/animation_direction.jpg" alt="animation_direction.jpg">  </p>
<p>在一开始的DEMO中有一个 <a href="/rush/css3_transition_animation/demo/leaves/index.html">模拟树叶飘落</a> 的动画，树叶除了匀速下落的动画之外，还有一个左右旋转的动画，来模拟左右飘动，左右旋转就是通过设置对象的<code>animation-direction: alternate</code>来实现的。</p>
<h3 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a>animation-fill-mode</h3><p>description：设置对象动画时间之外的状态<br>animation-fill-mode：<code>none | forwards | backwards | both</code><br>default: <code>none</code>  </p>
<p><code>animation-fill-mode</code>属性用来设置对象动画之外的状态，动画之外的状态包括两个，一个是动画开始之前，一个是动画开始之后。<code>none</code>就是指定不设置动画之外的状态；<code>forwards</code>设置对象在动画结束之后停留在最后一帧的状态；<code>backwards</code>设置对象动画 <strong><font color="red">开始之前</font></strong> 停留在第一帧的状态；<code>both</code>是同时设置<code>forwards</code>和<code>backwards</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">animation</span>: move <span class="number">1s</span> linear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box1</span> &#123; <span class="attribute">animation-fill-mode</span>: none; &#125;</div><div class="line"><span class="selector-class">.box2</span> &#123; <span class="attribute">animation-fill-mode</span>: forwards; &#125;</div><div class="line"><span class="selector-class">.box3</span> &#123; <span class="attribute">animation-fill-mode</span>: backwards; &#125;</div><div class="line"><span class="selector-class">.box4</span> &#123; <span class="attribute">animation-fill-mode</span>: both; &#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> move &#123;</div><div class="line">    <span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translate</span>(400px, 0); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/rush/css3_transition_animation/diy/fillmode.html">点击查看DEMO运行效果</a>  </p>
<p>很多人不能理解<code>animation-fill-mode</code>属性各个值的区别，主要在于错误的理解了这个属性的含义，认为这个属性是用来设置动画结束之后的状态，于是就单单看了上面的这个 <a href="/rush/css3_transition_animation/diy/fillmode.html">DEMO</a> ，发现完全无法区分<code>none</code>和<code>backwards</code>的区别，也无法区分<code>forwards</code>和<code>both</code>的区别，不能理解<code>both</code>同时设置<code>forwards</code>和<code>backwards</code>到底是什么意思。  </p>
<p>其实关键就在于没有理解<code>animation-fill-mode</code>属性设置的是对象动画之外的状态，不仅包括了动画结束的状态，还有动画开始前的状态。下面这个截图是W3C上对这四个值对解释：<br><img src="/posts_assets/css3_transition_animation/animation_fill_mode_diff.jpg" alt="animation_fill_mode_diff.jpg">  </p>
<p>理解完这四个属性对真正区别，再来看下面对这个DEMO就不会再搞混了。<br><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(200px, 0);</div><div class="line"></div><div class="line">    <span class="attribute">animation</span>: <span class="number">2s</span> linear <span class="number">1s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">animation-name</span>: move;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box1</span> &#123; <span class="attribute">animation-fill-mode</span>: none; &#125;</div><div class="line"><span class="selector-class">.box2</span> &#123; <span class="attribute">animation-fill-mode</span>: forwards; &#125;</div><div class="line"><span class="selector-class">.box3</span> &#123; <span class="attribute">animation-fill-mode</span>: backwards; &#125;</div><div class="line"><span class="selector-class">.box4</span> &#123; <span class="attribute">animation-fill-mode</span>: both; &#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> move &#123;</div><div class="line">    <span class="selector-tag">from</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translate</span>(0, 0); &#125;</div><div class="line">    <span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translate</span>(400px, 0); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="/rush/css3_transition_animation/diy/fillmodediff.html">点击查看DEMO运行效果</a>  </p>
<h3 id="animation-play-state"><a href="#animation-play-state" class="headerlink" title="animation-play-state"></a>animation-play-state</h3><p>description：设置对象动画的状态<br>animation-play-state：<code>running | paused</code><br>default: <code>running</code>  </p>
<p>可以通过<code>animation-play-state</code>来设置动画对运动和暂停，比如希望在鼠标<code>hover</code>的时候，让动画先停止下来，鼠标移开之后再继续播放，就可以通过设置<code>.element:hover { animation-play-state: paused; }</code>来实现就可以了。  </p>
<h2 id="零JS实现的游戏机DEMO"><a href="#零JS实现的游戏机DEMO" class="headerlink" title="零JS实现的游戏机DEMO"></a>零JS实现的游戏机DEMO</h2><p>到此就介绍完<code>transition</code>和<code>animation</code>两个属性的所有子属性各值的区别和用法了，接下去看一个完全用HTML和CSS3实现的一个游戏机DEMO：<br><img src="/posts_assets/css3_transition_animation/game.jpg" alt="game.jpg">  </p>
<p><a href="/rush/css3_transition_animation/demo/game/index.html">DEMO演示传送门</a>  </p>
<p>这个DEMO中的两个难点是如何划定人物移动的范围，还有就是在放开控制按钮的时候如何让人物停在当前位置。  </p>
<ul>
<li>人物的上下左右移动，是使用的<code>margin-top</code>和<code>margin-left</code>属性的<code>transition</code>过渡来实现的，按下上下的时候，控制人物的<code>margin-top</code>到最上或最下的位置；按下左右的时候，控制人物的<code>margin-left</code>在最左或最右的位置，这样人物的移动就不会超过范围了。<br><strong>注：这里不使用<code>transform</code>，是因为使用<code>translate</code>来控制人物左右位移的时候，还得同时维持他的<code>translateY</code>值；控制人物上下位移的时候，同样得维持他的<code>translateX</code>值。不使用<code>transform</code>来控制上下左右的位移，就是因为没法得知当前人物的<code>translateY</code>或<code>translateX</code>是多少。</strong>  </li>
<li>放开控制按钮，让人物停留在当前位置，是因为在人物对象上设置了<code>transition-delay: 999999s;</code>，也就是让人物属性发生变化的时候会先delay 999999s之后才开始过渡，在点击按钮的时候，再重新设置人物对象的<code>transition</code>使得人物属性值变化没有delay。这样就能实现当放开控制按钮的时候，让人物 <strong>看起来好像</strong> 停留在当前的位置。  </li>
</ul>
<h2 id="JS-VS-CSS3-Animation"><a href="#JS-VS-CSS3-Animation" class="headerlink" title="JS VS CSS3 Animation"></a>JS VS CSS3 Animation</h2><p>这里简单罗列几点JS动画和CSS3动画之间的优劣：  </p>
<ul>
<li>功能涵盖面，JS比CSS3大  <ul>
<li>定义动画过程的@keyframes不支持递归定义，如果有多种类似的动画过程，需要调节多个参数来生成的话，将会有很大的冗余（比如jQuery Mobile的动画方案），而JS则天然可以以一套函数实现多个不同的动画过程  </li>
<li>时间尺度上，@keyframes的动画粒度粗，而JS的动画粒度控制可以很细  </li>
<li>CSS3动画里被支持的时间函数非常少，不够灵活  </li>
<li>以现有的接口，CSS3动画无法做到支持两个以上的状态转化  </li>
</ul>
</li>
<li>实现/重构难度不一，CSS3比JS更简单，性能调优方向固定  </li>
<li>对于帧速表现不好的低版本浏览器，CSS3可以做到自然降级，而JS则需要撰写额外代码  </li>
<li>CSS动画有天然事件支持（TransitionEnd、AnimationEnd，但是它们都需要针对浏览器加前缀），JS则需要自己写事件  </li>
<li>CSS3有兼容性问题，而JS大多时候没有兼容性问题  </li>
</ul>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p>最后分享几个CSS3动画库：  </p>
<ul>
<li><a href="https://daneden.github.io/animate.css/">Animate.css</a>  </li>
<li><a href="https://www.minimamente.com/example/magic_animations/">Magic Animations</a>  </li>
<li><a href="http://bouncejs.com/">Bouncejs</a>  </li>
<li><a href="http://elrumordelaluz.github.io/csshake/">CSShake</a>  </li>
</ul>
<h2 id="Ending-…"><a href="#Ending-…" class="headerlink" title="Ending …"></a>Ending …</h2><p>终</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HEXO+Github 搭建博客]]></title>
      <url>http://koala.ink/2016/09/27/hexo_github_blog/</url>
      <content type="html"><![CDATA[<h2 id="什么是-Hexo"><a href="#什么是-Hexo" class="headerlink" title="什么是 Hexo?"></a>什么是 Hexo?</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。  </p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 Hexo 只需几分钟时间，若在安装过程中遇到问题或无法找到解决方式，可提交问题至 <a href="https://github.com/hexojs/hexo/issues">HEXO GitHub issues</a>。  </p>
<a id="more"></a>
<h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单。然而在安装前，必须检查电脑中是否已安装下列应用程序：  </p>
<ul>
<li><a href="http://nodejs.org/">Node.js</a>  </li>
<li><a href="https://git-scm.com/">Git</a>  </li>
</ul>
<p>如果电脑中已经安装上述必备程序，那么恭喜！接下来只需要使用 npm 即可完成 Hexo 的安装。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>Mac 用户</strong><br>在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。  </p>
</blockquote>
<h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><ul>
<li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.  </li>
<li>Mac：使用 <a href="http://brew.sh/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或下载 <a href="https://sourceforge.net/projects/git-osx-installer/">安装程序</a> 安装。  </li>
<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code>  </li>
<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code>  </li>
</ul>
<h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm">nvm</a>。  </p>
<p>cURL:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">curl https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure>
<p>Wget:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure>
<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">nvm install stable</div></pre></td></tr></table></figure>
<p>或者也可以下载 <a href="http://nodejs.org/">安装程序</a> 来安装。  </p>
<h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">hexo init &lt;folder&gt;</div><div class="line"><span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>新建完成后，指定文件夹的目录如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── <span class="built_in">source</span></div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure>
<h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>网站的 配置 信息，可以在此配置大部分的参数。  </p>
<h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>应用程序的信息。<a href="http://embeddedjs.com/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，可以自由移除。  </p>
<h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p><a href="https://hexo.io/docs/writing.html#Scaffolds">模版</a> 文件夹。当新建文章时，Hexo 会根据 scaffold 来建立文件。  </p>
<h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。  </p>
<h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p><a href="https://hexo.io/docs/themes.html">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。  </p>
<hr>
<p>更多的配置信息可参考 <a href="https://hexo.io/docs/">HEXO官方文档</a>  </p>
<h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><p>至此，所有的安装工作都已经完成，<code>&lt;folder&gt;</code> 就是你个人博客的跟目录，接下去的所有操作都是在此目录下进行。  </p>
<p>在你的博客目录下执行以下命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>在浏览器访问：<a href="http://localhost:4000/">http://localhost:4000/</a> 即可进入访问自己的博客。  </p>
<h2 id="GitHub配置"><a href="#GitHub配置" class="headerlink" title="GitHub配置"></a>GitHub配置</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>创建与你GitHub用户名对应的仓库，在 Repository name 下填写 <code>your_user_name.github.io</code> ，这是固定写法，将 your_user_name 替换成你的GitHub用户名即可。  </p>
<h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>修改博客跟目录下的<code>_config.yml</code>文件：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> git</div><div class="line"><span class="attr">  repo:</span> git@github.com:your_user_name/your_user_name.github.io.git</div><div class="line"><span class="attr">  branch:</span> master</div><div class="line"><span class="attr">  name:</span> your_user_name</div><div class="line"><span class="attr">  email:</span> your_email@example.com</div></pre></td></tr></table></figure>
<p>安装插件支持git部署：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>安装完以上插件后，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>部署成功后，在浏览器访问：<a href="http://your_user_name.github.io/">http://your_user_name.github.io/</a> ，其中your_user_name替换成你自己的GitHub用户名。  </p>
<h2 id="Hexo-命令"><a href="#Hexo-命令" class="headerlink" title="Hexo 命令"></a>Hexo 命令</h2><h3 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">hexo clean      <span class="comment"># 清除本地静态页面</span></div><div class="line">hexo generate   <span class="comment"># 生成静态页面至public目录</span></div><div class="line">hexo deploy     <span class="comment"># 部署到GitHub</span></div></pre></td></tr></table></figure>
<p>也可以缩写成：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">hexo new <span class="string">"postName"</span>       <span class="comment"># 新建文章</span></div><div class="line">hexo new page <span class="string">"pageName"</span>  <span class="comment"># 新建页面</span></div><div class="line">hexo generate   <span class="comment"># 生成静态页面至public目录</span></div><div class="line">hexo server     <span class="comment"># 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class="line">hexo deploy     <span class="comment"># 将.deploy目录部署到GitHub</span></div><div class="line">hexo <span class="built_in">help</span>       <span class="comment"># 查看帮助</span></div><div class="line">hexo version    <span class="comment"># 查看Hexo的版本</span></div></pre></td></tr></table></figure>
<h2 id="使用自己的域名"><a href="#使用自己的域名" class="headerlink" title="使用自己的域名"></a>使用自己的域名</h2><p>如果想使用自己的域名来访问博客，那就设置一下域名的DNS解析即可。  </p>
<p>进入 域名管理 -&gt; 域名解析 ，类型选择CNAME记录，对应值填上 your_user_name.github.io ，保存即可。这样你就可以使用自己的域名来访问你的博客了 <strong>（修改DNS解析不会马上生效，设置后大概需要等1~2小时左右才会生效）</strong> 。  </p>
<hr>
<p>本文链接：<a href="/2016/09/27/hexo_github_blog/">HEXO+Github,搭建属于自己的博客</a>  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery/Zepto 插件模板]]></title>
      <url>http://koala.ink/2016/01/07/jquery_zepto_plugins_tpl/</url>
      <content type="html"><![CDATA[<p>最近一个多月有点偷懒，好久没更博了，一直没有时间做个总结。今天就先对先前写jQuery/Zepto的插件做个总结，整理出一份模板，以供以后使用。确切的说应该是两份模板，一份jQuery，一份Zepto，但是这两者间差异不大，只是一些细小的区别罢了。好了，不说废话了，切入正题。  </p>
<p>在插件开发过程中，为了避免文件合并后代码之间的相互影响，所以每个插件都应该写在自己的一个命名空间内，在自己的命名空间中运行。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// code your plugn ...</span></div><div class="line"></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如上使用立即执行的匿名函数包裹整个插件，这样插件就能拥有独立的命名空间而不受其他代码的影响，当然也不会影响其他的代码。在一些代码中，为了避免对 $ 使用的混乱，所以最好在自己插件的命名空间中设定好固定的$ ，所以改成如下  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// code your plugn ...</span></div><div class="line"></div><div class="line">&#125;)( jQuery );</div></pre></td></tr></table></figure>
<p>这样就指定了$ 所代表的是jQuery ，避免了一些不必要的麻烦，当然，如果你使用的是Zepto开发插件，那么就将最后面的jQuery改成Zepto传给$ 就可以了。将这段代码保存为plugn.js 文件。之后就可以开始在这个命名空间内写自己的插件了。  </p>
<p>定义好命名空间之后，就是将插件函数扩展到 jQuery.fn  ，在jQuery中， jQuery.fn = jQuery.prototype， 所以只要将你的插件函数扩展到jQuery.fn 中，那么所有的jQuery对象都能够调用到这个函数。jQuery提供了扩展jQuery.fn 的方法，是 jQuery.fn.extend(object) ，这个方法将object对象扩展到jQuery.fn (也就是jQuery.prototype )中，如下：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>)</span>&#123;</div><div class="line"></div><div class="line">  $.fn.extend(&#123;</div><div class="line">    <span class="attr">plugn1</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">this</span>.html(<span class="string">'&lt;h1&gt;Hello in plugn1&lt;/h1&gt;'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">plugn2</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">this</span>.html(<span class="string">'&lt;h1&gt;Hello in plugn2&lt;/h1&gt;'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;)( jQuery );</div></pre></td></tr></table></figure>
<p>这样在调用的时候就很简单，形式如下：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.11.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/plugn.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></div><div class="line">  $(<span class="string">"#test"</span>).plugn1();  <span class="comment">// &lt;h1&gt;Hello in plugn1&lt;/h1&gt;</span></div><div class="line">  <span class="comment">// $("#test").plugn2();  // &lt;h1&gt;Hello in plugn2&lt;/h1&gt;</span></div><div class="line">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里有必要提一下jQuery实现的extend函数，也就是jQuery.extend() 这个函数，这个函数形式如下：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">Objectj jQuery.extend(dest,src1[,src2,src3...])</div></pre></td></tr></table></figure>
<p>第一个参数为被扩展的目标源对象(dest)，这个函数会将之后的所有对象(src1[,src2…])扩展合并到dest中，函数返回扩展后的dest对象。可见这个函数修改了dest对象的结构，所以如果不希望改变dest对象的结构，也可以这样调用 res = $.extend({},src1[,src2,src3…]) 。   </p>
<p>这个函数的另一种形式是：   </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">Objectj jQuery.extend(boolean,dest,src1[,src2,src3...])</div></pre></td></tr></table></figure>
<p>这里的第一个参数是boolean型变量，代表是否进行深度拷贝，之后的几个参数如上一个形式中提到的一样，这里就不再重复。所谓的深度拷贝，就是当对象中还嵌套对象时，会继续合并扩展嵌套的对象，而不是单纯的替换。如下举例说明：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> result=$.extend( <span class="literal">true</span>, &#123;&#125;,</div><div class="line">  &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">location</span>: &#123;<span class="attr">city</span>: <span class="string">"Boston"</span>,<span class="attr">county</span>:<span class="string">"USA"</span>&#125; &#125;,</div><div class="line">  &#123; <span class="attr">last</span>: <span class="string">"Resig"</span>, <span class="attr">location</span>: &#123;<span class="attr">state</span>: <span class="string">"MA"</span>,<span class="attr">county</span>:<span class="string">"China"</span>&#125; &#125;);</div></pre></td></tr></table></figure>
<p>运行的结果result值如下：   </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">result = &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">last</span>: <span class="string">"Resig"</span>, <span class="attr">location</span>: &#123; <span class="attr">city</span>: <span class="string">"Boston"</span>, <span class="attr">state</span>: <span class="string">"MA"</span>, <span class="attr">county</span>: <span class="string">"China"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<p>如果将$.extend 的第一个参数改为false ，那么运行的结果如下所示：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">result = &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">last</span>: <span class="string">"Resig"</span>, <span class="attr">location</span>: &#123; <span class="attr">state</span>: <span class="string">"MA"</span>, <span class="attr">county</span>: <span class="string">"China"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<p>extend函数还有另外一个形式，就是  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">Objectj jQuery.extend(src)</div></pre></td></tr></table></figure>
<p>这里就是当参数只有一个的时候，那么jQuery.extend(src)  就是将src扩展到jQuery中。因此 jQuery.extend(object)也可以扩展jQuery，但是扩展的函数调用形式不再是 $(…).myFunc() ，而是 $.myFunc() ，因为这里是扩展到jQuery类全局，相当于是添加jQuery类的方法，属于类级别插件；而$.fn.extend扩展到jQuery.prototype中，是扩展到jQuery的对象原型中，所以每个jQuery对象都能调用到这个函数，属于对象级别的插件。这样说比较抽象，写个demo对比一下  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  jQuery.fn = jQuery.prototype = &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">   * 这里与使用 jQuery.fn.extend(objPlugn) 等效</div><div class="line">   * @type &#123;Function&#125;</div><div class="line">   */</span></div><div class="line">  jQuery.fn.objPlugn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"objPlugn"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">   * 这里与使用 jQuery.extend(funcPlugn) 等效</div><div class="line">   * @type &#123;Function&#125;</div><div class="line">   */</span></div><div class="line">  jQuery.funcPlugn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"funcPlugn"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">   * 这里的 jq 实例即我们使用的 $(...)</div><div class="line">   * @type &#123;jQuery&#125;</div><div class="line">   */</span></div><div class="line">  <span class="keyword">var</span> jq = <span class="keyword">new</span> jQuery();</div><div class="line"></div><div class="line">  jq.objPlugn();      <span class="comment">// objPlugn</span></div><div class="line">  <span class="comment">// jq.funcPlugn();    // 报错 TypeError: jq.funcPlugn is not a function</span></div><div class="line">  jQuery.funcPlugn();    <span class="comment">// funcPlugn</span></div><div class="line"></div><div class="line">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>因此使用$.extend 与使用$.fn.extend 扩展的jQuery插件还是有区别的。  </p>
<p>这里我们可以查看jQuery的源码  </p>
<p><img src="/posts_assets/jquery_zepto_plugins_tpl/extend.png" alt="jQuery.extend">  </p>
<p>jQuery.extend 函数实现</p>
<p>图中的第一行我们就能看到，$.extend 与$.fn.extend 这两个函数的实现其实是一样的，而之所以会有刚才说的那些区别，原因就在代码中的197行：target = this; 这一句。在这个if 分支内，就表示传入的src 只有一个的情况，那么就将扩展源对象设置为this，对this进行扩展。当调用extend的上下文环境不同，要扩展的目标源对象就不同，当使用$.extend扩展插件，this指向的是jQuery；而使用$.fn.extend的时候，this指向的是$.fn，即$.prototype。所以要搞清楚$.extend(obj) 与$.fn.extend(obj) 所扩展的对象不同，调用的形式也不同。  </p>
<p>回到刚才说的$.fn.extend() ，这里我们将我们的插件扩展到$.fn 中，以便所有的jQuery对象能够调用，调用形式为$(…).myPlugn() ，如上面在index.html 文件中的$(“#test”).plugn1(); 。  </p>
<p>在使用jQuery对象函数的时候，往往能够链式调用，这点是jQuery一个很大的优点，所以为了使我们开发的插件也能够这样链式操作，我们应该在我们写的插件函数中将自身return回来，把plugn.js文件改成如下形式：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">   * 如之前说,这里与使用如下形式无异</div><div class="line">   * $.fn.extend(&#123;</div><div class="line">   *     myPlugn : function()&#123;</div><div class="line">   *       // ...</div><div class="line">   *     &#125;</div><div class="line">   * &#125;)</div><div class="line">   * @return &#123;[type]&#125; [description]</div><div class="line">   */</span></div><div class="line">  $.fn.myPlugn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">      $<span class="keyword">this</span>.html(<span class="string">'&lt;h1&gt;Hello World&lt;/h1&gt;'</span>);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;)( jQuery );</div></pre></td></tr></table></figure>
<p>这里对this还执行了一次each，是为了支持如果jQuery选择器选中了多个元素，那么可以对选中每个元素都执行到我们插件想要做的事。将index.html代码改为如下  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.11.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/plugn.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></div><div class="line">  $(<span class="string">".test"</span>).myPlugn().css(&#123;<span class="attr">color</span>: <span class="string">'#f00'</span>&#125;);</div><div class="line">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意此时的jQuery选择器选中了所有class=”test” 的元素，然后执行myPlugn() ，之后还将选中元素的 css 样式修改了，可见，现在已经可以支持链式操作，并且能对选中的jQuery元素都分别进行myPlugn() 操作。到现在为止，已经可以开始开发自己的jQuery小插件了。但是我们在开发过程中，往往希望能够将插件封装起来，这样可以反复的调用，并且操作简单，易于维护。所以我们先假定已经写好了一个MyPlugn的类，我们先修改一下plugn.js文件  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">     * 将 plugn 扩展到 $.fn</div><div class="line">     * @author   dhb(dai_huibin@126.com)</div><div class="line">     * @date     2015-12-23</div><div class="line">     * @datetime 2015-12-23T11:20:43+0800</div><div class="line">     * @param    &#123;object|string&#125;    options    setting options</div><div class="line">     * @param    &#123;array&#125;            paramArray 调用参数</div><div class="line">     * @return   &#123;object&#125;            return self</div><div class="line">     */</span></div><div class="line">  $.fn.myPlugn = <span class="function"><span class="keyword">function</span>(<span class="params">options, paramArray</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">/**</div><div class="line">       * 我们在首次调用myPlugn的时候，实例化一个 MyPlugn 对象，并且将这个实例缓存在$(this).data(myPlugn)中</div><div class="line">       * 这样下次再调用myPlugn的时候，就不需要再实例化，只需要从$(this).data(myPlugn)中取出之前的实例进行操作即可</div><div class="line">       */</span></div><div class="line">      <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</div><div class="line">        instance = $<span class="keyword">this</span>.data($.fn.myPlugn.info.name);</div><div class="line"></div><div class="line">      <span class="comment">// 这里判断，如果已经存在instance，则表示已实例化过，就无需再实例化MyPlugn对象了</span></div><div class="line">      <span class="keyword">if</span>( !instance )&#123;</div><div class="line">        instance = <span class="keyword">new</span> MyPlugn($<span class="keyword">this</span>, options);</div><div class="line">        <span class="comment">// 这里将首次实例化的instance对象缓存到$(this).data(myPlugn)中</span></div><div class="line">        $<span class="keyword">this</span>.data($.fn.myPlugn.info.name, instance);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</div><div class="line">       * 这里是对插件的一个优化</div><div class="line">       * 判断当传入的options参数为字符串类型时，表示的是要调用instance实例中的options方法。举个例子</div><div class="line">       * var test = $('.test').myPlugn();</div><div class="line">       * test.myPlugn('add');</div><div class="line">       * 这样的第二句代码就调用了instance.add()这个方法</div><div class="line">       * 这里还能够传入参数，比如 add 函数形式为： add(a,b)&#123; return a+b; &#125;</div><div class="line">       * 那么我们就把第二句代码改为 test.myPlugn('add',[1,2]) 即可</div><div class="line">       * 注意这里的第二个参数要求是一个数组，对应你要调用的那个函数的参数，比如上面的例子就如同调用了 instance.add(1,2)</div><div class="line">       */</span></div><div class="line">      <span class="keyword">typeof</span> options === <span class="string">"string"</span> &amp;&amp; <span class="keyword">typeof</span> instance[options] === <span class="string">"function"</span> &amp;&amp; instance[options].apply(instance,paramArray);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">     * plugn infomation</div><div class="line">     * 这里可以添加一些插件的信息</div><div class="line">     * 如版本号，插件名等</div><div class="line">     * @type &#123;Object&#125;</div><div class="line">     */</span></div><div class="line">  $.fn.myPlugn.info = &#123;</div><div class="line">    <span class="string">"version"</span> : <span class="string">"v1.0"</span>,</div><div class="line">    <span class="string">"name"</span> : <span class="string">"myPlugn"</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</div><div class="line">     * plugn default settings</div><div class="line">     * 这里可以配置插件的一些默认项</div><div class="line">     * @type &#123;Object&#125;</div><div class="line">     */</span></div><div class="line">  $.fn.myPlugn.defaults = &#123;</div><div class="line">    <span class="comment">// default settings</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;)( jQuery );</div></pre></td></tr></table></figure>
<p>写到这里，我们就可以开始安心的去实现 MyPlugn 这个类了，将我们插件要实现的功能写在这个类里面就大功告成了。  </p>
<p>下面贴上完整的jQuery-plugn.js 模板：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 这里先定义了我们要实现的MyPlugn类，以及在开发过程中需要用到的一些私有函数方法集合</span></div><div class="line">  <span class="keyword">var</span> MyPlugn, myPlugnPrivateMethod;</div><div class="line"></div><div class="line">  <span class="comment">// 这里使用立即执行的匿名函数来划分一个命名空间，避免干扰，在匿名函数内返回MyPlugn类</span></div><div class="line">  MyPlugn = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</div><div class="line">     * 构造函数</div><div class="line">     * @author   dhb(dai_huibin@126.com)</div><div class="line">     * @date     2015-12-23</div><div class="line">     * @datetime 2015-12-23T11:12:00+0800</div><div class="line">         * @param       &#123;object|string&#125;     element   DOM object or selector</div><div class="line">         * @param       &#123;object&#125;           options   settings</div><div class="line">     */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MyPlugn</span>(<span class="params">element, options</span>)</span>&#123;</div><div class="line">      <span class="comment">// 构造函数内，将调用这儿插件函数的元素存下，并获取到一些插件配置的信息，执行初始化函数</span></div><div class="line">      <span class="keyword">this</span>.el = $(element);</div><div class="line">      <span class="keyword">this</span>.ops = $.extend(&#123;&#125;, $.fn.myPlugn.defaults, options);</div><div class="line">      <span class="keyword">this</span>.init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    MyPlugn.prototype = &#123;</div><div class="line">      <span class="attr">init</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// 这里是我们插件的一些初始化动作...</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">add</span> : <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(a+b);</div><div class="line">      &#125;,</div><div class="line">      <span class="comment">// ... 这里添加更多我们需要的函数，接口</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> MyPlugn;</div><div class="line">  &#125;)();</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">   * plugn 私有函数对象</div><div class="line">   * @type &#123;Object&#125;</div><div class="line">   */</span></div><div class="line">  myPlugnPrivateMethod = &#123;</div><div class="line">    <span class="comment">// 这里添加不希望被外界调用到的函数，只供 MyPlugn 使用</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">     * 将 plugn 扩展到 $.fn</div><div class="line">     * @author   dhb(dai_huibin@126.com)</div><div class="line">     * @date     2015-12-23</div><div class="line">     * @datetime 2015-12-23T11:20:43+0800</div><div class="line">     * @param    &#123;object|string&#125;    options    setting options</div><div class="line">     * @param    &#123;array&#125;            paramArray 调用参数</div><div class="line">     * @return   &#123;object&#125;            return self</div><div class="line">     */</span></div><div class="line">  $.fn.myPlugn = <span class="function"><span class="keyword">function</span>(<span class="params">options, paramArray</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">/**</div><div class="line">       * 我们在首次调用myPlugn的时候，实例化一个 MyPlugn 对象，并且将这个实例缓存在$(this).data(myPlugn)中</div><div class="line">       * 这样下次再调用myPlugn的时候，就不需要再实例化，只需要从$(this).data(myPlugn)中取出之前的实例进行操作即可</div><div class="line">       */</span></div><div class="line">      <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</div><div class="line">        instance = $<span class="keyword">this</span>.data($.fn.myPlugn.info.name);</div><div class="line"></div><div class="line">      <span class="comment">// 这里判断，如果已经存在instance，则表示已实例化过，就无需再实例化MyPlugn对象了</span></div><div class="line">      <span class="keyword">if</span>( !instance )&#123;</div><div class="line">        instance = <span class="keyword">new</span> MyPlugn($<span class="keyword">this</span>, options);</div><div class="line">        <span class="comment">// 这里将首次实例化的instance对象缓存到$(this).data(myPlugn)中</span></div><div class="line">        $<span class="keyword">this</span>.data($.fn.myPlugn.info.name, instance);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</div><div class="line">       * 这里是对插件的一个优化</div><div class="line">       * 判断当传入的options参数为字符串类型时，表示的是要调用instance实例中的options方法。举个例子</div><div class="line">       * var test = $('.test').myPlugn();</div><div class="line">       * test.myPlugn('add');</div><div class="line">       * 这样的第二句代码就调用了instance.add()这个方法</div><div class="line">       * 这里还能够传入参数，比如 add 函数形式为： add(a,b)&#123; return a+b; &#125;</div><div class="line">       * 那么我们就把第二句代码改为 test.myPlugn('add',[1,2]) 即可</div><div class="line">       * 注意这里的第二个参数要求是一个数组，对应你要调用的那个函数的参数，比如上面的例子就如同调用了 instance.add(1,2)</div><div class="line">       */</span></div><div class="line">      <span class="keyword">typeof</span> options === <span class="string">"string"</span> &amp;&amp; <span class="keyword">typeof</span> instance[options] === <span class="string">"function"</span> &amp;&amp; instance[options].apply(instance,paramArray);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">     * plugn infomation</div><div class="line">     * 这里可以添加一些插件的信息</div><div class="line">     * 如版本号，插件名等</div><div class="line">     * @type &#123;Object&#125;</div><div class="line">     */</span></div><div class="line">  $.fn.myPlugn.info = &#123;</div><div class="line">    <span class="string">"version"</span> : <span class="string">"v1.0"</span>,</div><div class="line">    <span class="string">"name"</span> : <span class="string">"myPlugn"</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</div><div class="line">     * plugn default settings</div><div class="line">     * 这里可以配置插件的一些默认项</div><div class="line">     * @type &#123;Object&#125;</div><div class="line">     */</span></div><div class="line">  $.fn.myPlugn.defaults = &#123;</div><div class="line">    <span class="comment">// default settings</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;)( jQuery );</div></pre></td></tr></table></figure>
<p>到此jQuery插件的模板就完整了。  </p>
<p>在使用Zepto开发插件时，用法与jQuery大同小异。在这份模板上最大的区别在于$(this).data() 函数的使用。  </p>
<p>jQuery的data函数功能十分强大，能够缓存字符串，对象，函数等任何类型的数据，比如我们这边使用的时候将整个instance实例存在了$(this).data(‘myPlugn’) 中。这点在Zepto上就有所不同，Zepto的data函数相对来说就比较弱，只能存字符串变量，不能存储对象类型的变量，因此使用Zepto开发插件的时候，要想缓存实例的instance对象，需要做一个优化。下面贴上Zepto插件的模板，在data上缓存instance的细节不同罢了。  </p>
<p>贴上Zepto-plugn.js 模板代码：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 这里先定义了我们要实现的MyPlugn类，以及在开发过程中需要用到的一些私有函数方法集合</span></div><div class="line">  <span class="keyword">var</span> MyPlugn, myPlugnPrivateMethod;</div><div class="line"></div><div class="line">  <span class="comment">// 这里使用立即执行的匿名函数来划分一个命名空间，避免干扰，在匿名函数内返回MyPlugn类</span></div><div class="line">  MyPlugn = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</div><div class="line">     * 构造函数</div><div class="line">     * @author   dhb(dai_huibin@126.com)</div><div class="line">     * @date     2015-12-23</div><div class="line">     * @datetime 2015-12-23T11:12:00+0800</div><div class="line">         * @param       &#123;object|string&#125;     element   DOM object or selector</div><div class="line">         * @param       &#123;object&#125;           options   settings</div><div class="line">     */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MyPlugn</span>(<span class="params">element, options</span>)</span>&#123;</div><div class="line">      <span class="comment">// 构造函数内，将调用插件的元素存下，并获取到一些插件配置，执行初始化函数</span></div><div class="line">      <span class="keyword">this</span>.el = $(element);</div><div class="line">      <span class="keyword">this</span>.ops = $.extend(&#123;&#125;, $.fn.myPlugn.defaults, options);</div><div class="line">      <span class="keyword">this</span>.init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    MyPlugn.prototype = &#123;</div><div class="line">      <span class="attr">init</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// 这里是我们插件的一些初始化动作...</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">add</span> : <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(a+b);</div><div class="line">      &#125;,</div><div class="line">      <span class="comment">// ... 这里添加更多我们需要的函数，接口</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> MyPlugn;</div><div class="line">  &#125;)();</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">   * plugn 私有函数对象</div><div class="line">   * @type &#123;Object&#125;</div><div class="line">   */</span></div><div class="line">  myPlugnPrivateMethod = &#123;</div><div class="line">    <span class="comment">// 这里添加不希望被外界调用到的函数，只供 MyPlugn 使用</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">     * 将 plugn 扩展到 $.fn</div><div class="line">     * @author   dhb(dai_huibin@126.com)</div><div class="line">     * @date     2015-12-23</div><div class="line">     * @datetime 2015-12-23T11:20:43+0800</div><div class="line">     * @param    &#123;object|string&#125;    options    setting options</div><div class="line">     * @param    &#123;array&#125;            paramArray 调用参数</div><div class="line">     * @return   &#123;object&#125;            return self</div><div class="line">     */</span></div><div class="line">  $.fn.myPlugn = <span class="function"><span class="keyword">function</span>(<span class="params">options, paramArray</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">/**</div><div class="line">       * 我们在首次调用myPlugn的时候，实例化一个 MyPlugn 对象，并且将这个实例缓存在$(this).data(myPlugn)中</div><div class="line">       * 这样下次再调用myPlugn的时候，就不需要再实例化，只需要从$(this).data(myPlugn)中取出之前的实例进行操作即可</div><div class="line">       */</span></div><div class="line">      <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</div><div class="line">        instance = $.fn.myPlugn.lookup[$<span class="keyword">this</span>.data($.fn.myPlugn.info.name)];</div><div class="line"></div><div class="line">      <span class="comment">// 这里判断，如果已经存在instance，则表示已实例化过，就无需再实例化MyPlugn对象了</span></div><div class="line">      <span class="keyword">if</span>( !instance )&#123;</div><div class="line">        instance = <span class="keyword">new</span> MyPlugn($<span class="keyword">this</span>, options);</div><div class="line">        <span class="comment">// 这里将首次实例化的instance对象缓存到$.myPlugn.lookup中，对应key值存入$(this).data(myPlugn)中</span></div><div class="line">        $.fn.myPlugn.lookup[++$.fn.myPlugn.lookup.i] = instance;</div><div class="line">        $<span class="keyword">this</span>.data($.fn.myPlugn.info.name,$.fn.myPlugn.lookup.i);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</div><div class="line">       * 这里是对插件的一个优化</div><div class="line">       * 判断当传入的options参数为字符串类型时，表示的是要调用instance实例中的options方法。举个例子</div><div class="line">       * var test = $('.test').myPlugn();</div><div class="line">       * test.myPlugn('add');</div><div class="line">       * 这样的第二句代码就调用了instance.add()这个方法</div><div class="line">       * 这里还能够传入参数，比如 add 函数形式为： add(a,b)&#123; return a+b; &#125;</div><div class="line">       * 那么我们就把第二句代码改为 test.myPlugn('add',[1,2]) 即可</div><div class="line">       * 注意这里的第二个参数要求是一个数组，对应你要调用的那个函数的参数，比如上面的例子就如同调用了 instance.add(1,2)</div><div class="line">       */</span></div><div class="line">      <span class="keyword">typeof</span> options === <span class="string">"string"</span> &amp;&amp; <span class="keyword">typeof</span> instance[options] === <span class="string">"function"</span> &amp;&amp; instance[options].apply(instance,paramArray);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">     * plugn infomation</div><div class="line">     * 这里可以添加一些插件的信息</div><div class="line">     * 如版本号，插件名等</div><div class="line">     * @type &#123;Object&#125;</div><div class="line">     */</span></div><div class="line">  $.fn.myPlugn.info = &#123;</div><div class="line">    <span class="string">"version"</span> : <span class="string">"v1.0"</span>,</div><div class="line">    <span class="string">"name"</span> : <span class="string">"myPlugn"</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">     * plugn instance</div><div class="line">     * i 为 MyPlugn 实例的计数</div><div class="line">     * 将instance实例存放在这个对象中</div><div class="line">     * 获取instance的key为 $(this).data('myPlugn') =&gt; instance</div><div class="line">     * @type &#123;Object&#125;</div><div class="line">     */</span></div><div class="line">  $.fn.myPlugn.lookup = &#123;</div><div class="line">    <span class="attr">i</span> : <span class="number">0</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</div><div class="line">     * plugn default settings</div><div class="line">     * 这里可以配置插件的一些默认项</div><div class="line">     * @type &#123;Object&#125;</div><div class="line">     */</span></div><div class="line">  $.fn.myPlugn.defaults = &#123;</div><div class="line">    <span class="comment">// default settings</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;)( Zepto );</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算机学院大学生程序设计竞赛 杭电ACM校赛]]></title>
      <url>http://koala.ink/2015/11/29/hdu_acm/</url>
      <content type="html"><![CDATA[<p>比赛一共八道题，都是简单题，比赛时间4小时，三个小时AK，在此纪念一下。</p>
<p>比赛链接传送门：<a href="http://acm.hdu.edu.cn/contests/contest_show.php?cid=638">计算机学院大学生程序设计竞赛（2015’11）</a></p>
<h2 id="1001-搬砖"><a href="#1001-搬砖" class="headerlink" title="1001 搬砖"></a>1001 搬砖</h2><p>题目要求将一堆砖块分成一块一块单独的，每次可以将一堆砖块分成两堆，消耗的体力值为两堆砖块数目的差值，问最少消耗多少体力可以将这堆砖块分完。输入第一行T，位输入数据组数，然后T行每行一个整数n表示初始的砖块数目，输出最少消耗的体力值。  </p>
<p>解题思路：那么要使得消耗的体力最少，就应该尽可能的将它分成数目相同的两堆，因此对于每堆砖块，假设砖块数目为x，那么有两种情况：当x位偶数时，平均分为两堆，每堆砖块数目为x/2，消耗体力为0；当x位基数时，分为两堆，砖块数目分别问x/2与x/2+1，消耗体力为1。因此得到递推公式为：<br><a id="more"></a><br>f(x) = 2 * f(x/2)   —   当x为偶数  </p>
<p>f(x) = f(x/2) + f(x/2+1) + 1   —   当x为基数  </p>
<p>AC代码：  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>+fun(n/<span class="number">2</span>)+fun(n/<span class="number">2</span>+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>*fun(n/<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">int</span> ans;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        ans = fun(n);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1002-投币洗衣机"><a href="#1002-投币洗衣机" class="headerlink" title="1002 投币洗衣机"></a>1002 投币洗衣机</h2><p>n天每天需要换洗v件衣服，当衣服屯积到一定数量时，小明会一起拿去洗，条件是这样的：当衣服总数大于等于a并且小于b，则将衣服全部洗掉，需要投2枚硬币；当衣服总数大于等于b并且小于c，则将衣服全部洗掉，需要投3枚硬币；当衣服总数大于等于c，则将衣服全部洗掉，需要投4枚硬币。问一共需要多少钱。输入第一行为n a b c分别表示天数n，以及三个条件限制的件数a b c (1&lt;=a&lt;b&lt;c&lt;=300)，第二行输入n个数，第i个数字表示第i天需要换洗的衣服数vi。  </p>
<p>解题思路：定义sum累计当前囤积的衣服数，if判断顺序为 当sum&gt;=c时，就将ans+=4；当sum&gt;=b时，将ans+=3；当sum&gt;=a时，将ans+=2。注意每次在洗衣服的时候，都要将sum清零。  </p>
<p>AC代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n,a,b,c,tmp,sum,ans;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;a,&amp;b,&amp;c)!=EOF)&#123;</div><div class="line">        sum = ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</div><div class="line">            sum+=tmp;</div><div class="line">            <span class="keyword">if</span>(sum&gt;=c)&#123;</div><div class="line">                sum =<span class="number">0</span>;</div><div class="line">                ans += <span class="number">4</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;=b)&#123;</div><div class="line">                sum =<span class="number">0</span>;</div><div class="line">                ans+=<span class="number">3</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;=a)&#123;</div><div class="line">                sum =<span class="number">0</span>;</div><div class="line">                ans+=<span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1003-玩骰子"><a href="#1003-玩骰子" class="headerlink" title="1003 玩骰子"></a>1003 玩骰子</h2><p>两个人玩骰子游戏，每人投掷三颗骰子比大小。大小比较的规则是：若三颗骰子点数都相同，为三条；若有两颗骰子点数相同，为对子；每颗骰子点数都不同，为散牌；他们的大小顺序位三条&gt;对子&gt;散牌。若两人都是三条，则比较三条的点数大小，大的获胜；若两人都有对子，则比较对子点数大小，大的获胜，若还是相同，则比较剩下骰子的点数大小，大的获胜；若两人都为散牌，则先比较最大点数的骰子，大的获胜，若相同，则继续比较第二大、第三大的骰子点数。每人有且仅有一次机会选择是否要重掷骰子，重掷骰子时只能选择三个中的一个骰子进行重掷，其余两颗骰子不变，也可以放弃重掷的机会。已知两位玩家当前骰子的状态，并且第二位玩家已经不能再重掷骰子，问第一位玩家有多少的概率能获胜。  </p>
<p>解题思路：这个问题首先需要解决的是如何判断两人当前骰子状态的胜负情况，我这里将每个人骰子的状态转换成一个权值，通过对比这个权值的大小，来判断胜负。骰子状态与权值的转换关系是：判断如果是三条，则 val = 三条骰子点数*10000；判断如果是对子，则 val = 对子骰子点数*1000+剩下骰子的点数；判断如果为散牌，则val = 最大点数*100+第二大点数*10+最小点数。  </p>
<p>举几个例子：  </p>
<p>5 5 5  对应的 val=5*1000=50000  </p>
<p>4 4 3 对应的 val=4*1000+3  </p>
<p>2 4 5 对应的 val=5*100+4*10+2=52  </p>
<p>通过这样的转换就只需要判断该状态对应的val值的大小，就能知道胜负情况。  </p>
<p>在计算获胜概率的时候，需要注意的是，题目默认第一人会选择最优的方法进行重掷骰子，也就是需要分别计算选择第一个骰子、第二个骰子、第三个骰子进行重掷后可能获胜的概率为p1、p2、p3，然后题目所求的答案是max(p1,p2,p3)。  </p>
<p>AC代码：  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">val</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">3</span>])</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(arr[<span class="number">0</span>]==arr[<span class="number">1</span>]&amp;&amp;arr[<span class="number">1</span>]==arr[<span class="number">2</span>])&#123;</div><div class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>]*<span class="number">10000</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(arr[<span class="number">0</span>]!=arr[<span class="number">1</span>]&amp;&amp;arr[<span class="number">1</span>]!=arr[<span class="number">2</span>])&#123;</div><div class="line">        <span class="keyword">return</span> arr[<span class="number">2</span>]*<span class="number">100</span>+arr[<span class="number">1</span>]*<span class="number">10</span>+arr[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span>(arr[<span class="number">0</span>]==arr[<span class="number">1</span>])&#123;</div><div class="line">            <span class="keyword">return</span> arr[<span class="number">1</span>]*<span class="number">1000</span>+arr[<span class="number">2</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> arr[<span class="number">1</span>]*<span class="number">1000</span>+arr[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="keyword">int</span> arr1[<span class="number">3</span>],arr2[<span class="number">3</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>,&amp;arr1[<span class="number">0</span>],&amp;arr1[<span class="number">1</span>],&amp;arr1[<span class="number">2</span>],&amp;arr2[<span class="number">0</span>],&amp;arr2[<span class="number">1</span>],&amp;arr2[<span class="number">2</span>]);</div><div class="line">        sort(arr1,arr1+<span class="number">3</span>);</div><div class="line">        sort(arr2,arr2+<span class="number">3</span>);</div><div class="line">        <span class="keyword">int</span> val1 = val(arr1);</div><div class="line">        <span class="keyword">int</span> val2 = val(arr2);</div><div class="line">        <span class="keyword">if</span>(val1&gt;val2)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"1.000\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> ans;</div><div class="line">            <span class="keyword">int</span> arr[<span class="number">3</span>];</div><div class="line">            <span class="keyword">double</span> sum=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)&#123;</div><div class="line">                ans=<span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;++j)&#123;</div><div class="line">                    arr[<span class="number">0</span>] = arr1[<span class="number">0</span>];</div><div class="line">                    arr[<span class="number">1</span>] = arr1[<span class="number">1</span>];</div><div class="line">                    arr[<span class="number">2</span>] = arr1[<span class="number">2</span>];</div><div class="line">                    arr[i] = j%<span class="number">6</span>+<span class="number">1</span>;</div><div class="line">                    sort(arr,arr+<span class="number">3</span>);</div><div class="line">                    <span class="keyword">if</span>(val(arr)&gt;val2)&#123;</div><div class="line">                        ans++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                sum = max(sum,ans/<span class="number">6.0</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,sum);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1004-质方数"><a href="#1004-质方数" class="headerlink" title="1004 质方数"></a>1004 质方数</h2><p>输入一个n，输出距离n最接近的质方数。质方数就是质数的平方。  </p>
<p>解题思路：暴力，打表求出所有的质数，循环质数表，找到最接近n的质方数。  </p>
<p>AC代码：  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> N = <span class="number">100007</span>;</div><div class="line"><span class="keyword">long</span> prime[N] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">long</span> num_prime = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> isNotPrime[N] = &#123;<span class="number">1</span>,<span class="number">1</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">primeC</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">2</span>;i&lt;N;++i)&#123;</div><div class="line">        <span class="keyword">if</span>(!isNotPrime[i])&#123;</div><div class="line">            prime[num_prime++]=i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> j=<span class="number">0</span>;j&lt;num_prime&amp;&amp;i*prime[j]&lt;N;++j)&#123;</div><div class="line">            isNotPrime[i*prime[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(!(i%prime[j]))</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">int</span> ans;</div><div class="line">    primeC();</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="keyword">long</span> dis=<span class="number">1e9</span>+<span class="number">7</span>;</div><div class="line">        <span class="keyword">long</span> id;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>;i&lt;num_prime;++i)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(prime[i]*prime[i]-n)&lt;dis)&#123;</div><div class="line">                dis = <span class="built_in">abs</span>(prime[i]*prime[i]-n);</div><div class="line">                id=prime[i]*prime[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,id);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1005-ACM组队安排"><a href="#1005-ACM组队安排" class="headerlink" title="1005 ACM组队安排"></a>1005 ACM组队安排</h2><p>有n个队员组成若干队伍，每队可以有1人、2人或者3人，求有多少种组队情况。  </p>
<p>解题思路：求递推公式。假设已经有n-1个人，第n个人的组队情况有三种：自己组成一队，这样的情况数有f(n-1)；组成一个两人的队伍，则需要从n-1个人中选出1个人与第n个人组队，情况数有C(n-1,1)*f(n-1-1)；组成三个人的队伍，则需要从n-1个人中选出2个人与第n个人组队，情况数有C(n-1,2)*f(n-1-2)。因此f(n) = f(n-1) + C(n-1,1)*f(n-2) + C(n-1,2)*f(n-3)。  </p>
<p>AC代码：  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">25</span>;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> arr[N];</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> func[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    arr[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    arr[<span class="number">2</span>] = <span class="number">2</span>;</div><div class="line">    arr[<span class="number">3</span>] = <span class="number">5</span>;</div><div class="line">    <span class="built_in">memset</span>(func,<span class="number">0</span>,<span class="keyword">sizeof</span>(func));</div><div class="line">    func[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)&#123;</div><div class="line">        func[i][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;++j)&#123;</div><div class="line">            func[i][j] = func[i<span class="number">-1</span>][j]+func[i<span class="number">-1</span>][j<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;N;++i)&#123;</div><div class="line">        arr[i] = func[i<span class="number">-1</span>][<span class="number">2</span>]*arr[i<span class="number">-3</span>]+arr[i<span class="number">-1</span>]+(i<span class="number">-1</span>)*arr[i<span class="number">-2</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    init();</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,arr[n]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1006-逆袭指数"><a href="#1006-逆袭指数" class="headerlink" title="1006 逆袭指数"></a>1006 逆袭指数</h2><p>一个数n，将n分解为若干个因子的乘积，如60可以分解为2*3*10，其中连续因子为2*3，长度为2；也可以分解为3*4*5，连续因子为3*4*5，长度为3。题目给出一个n，要求出n的最长连续因子，如果最长连续因子有多个，选择最小的那个。并且这个题目设定1不是因子，所以不考虑1。  </p>
<p>解题思路：暴力，先求出n的所有约数，并且从小到大排序。循环这个约数数组，分别以每个约数为连续因子的起点，求出以这个约数为起点的连续因子的长度，记录下最长的连续因子长度，即为题目所求。  </p>
<p>AC代码：  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL ;</div><div class="line"></div><div class="line"><span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> arr[<span class="number">10005</span>];</div><div class="line"></div><div class="line">LL d[<span class="number">1000</span>][<span class="number">2</span>];</div><div class="line"><span class="function">LL <span class="title">divprime</span><span class="params">(LL n)</span> </span>&#123;</div><div class="line">    LL i, cnt = <span class="number">0</span>, k = n;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i * i &lt;= k; ++i) &#123;</div><div class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</div><div class="line">            d[cnt][<span class="number">0</span>] = i;</div><div class="line">            d[cnt][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</div><div class="line">                n /= i;</div><div class="line">                d[cnt][<span class="number">1</span>]++;</div><div class="line">            &#125;</div><div class="line">            cnt++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</div><div class="line">        d[cnt][<span class="number">0</span>] = n;</div><div class="line">        d[cnt][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        cnt++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">finddiv</span><span class="params">(LL ceng, LL ji, LL n, LL cnt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ceng == cnt) &#123;</div><div class="line">        arr[cur++] = ji;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    LL i, m;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, m = <span class="number">1</span>; i &lt;= d[ceng][<span class="number">1</span>]; ++i) &#123;</div><div class="line">        finddiv(ceng+<span class="number">1</span>, ji * m, n, cnt);</div><div class="line">        m *= d[ceng][<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;n)!=EOF)&#123;</div><div class="line">        cur = <span class="number">0</span>;</div><div class="line">        finddiv(<span class="number">0</span>, <span class="number">1</span>, n, divprime(n));</div><div class="line">        sort(arr, arr + cur);</div><div class="line">        LL index,len,tmp,x;</div><div class="line">        LL ansLen = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cur; ++i) &#123;</div><div class="line">            tmp = n/arr[i];</div><div class="line">            x = arr[i]+<span class="number">1</span>;</div><div class="line">            len = <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(tmp%x==<span class="number">0</span>)&#123;</div><div class="line">                len++;</div><div class="line">                tmp/=x;</div><div class="line">                x++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(len&gt;ansLen)&#123;</div><div class="line">                ansLen = len;</div><div class="line">                index = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">bool</span> first = <span class="literal">true</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,ansLen);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=index;i&lt;index+ansLen;++i)&#123;</div><div class="line">            <span class="keyword">if</span>(!first) <span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d"</span>,arr[i]);</div><div class="line">            first = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1007-油菜花王国"><a href="#1007-油菜花王国" class="headerlink" title="1007 油菜花王国"></a>1007 油菜花王国</h2><p>有n个精灵，m个关系，有关系的精灵属于同一个家族。每个精灵有一个值，若这个值为斐波那契数，那么这个精灵所在的家族的威望就加1，求威望最大的家族的威望值是多少。  </p>
<p>解题思路：并查集，将所有有关系的精灵进行合并，之后循环每个精灵的值，判断是否为斐波那契数，若是则在精灵所在的集合威望值+1，之后循环找出集合威望值最大的即可。  </p>
<p>AC代码：  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</div><div class="line"><span class="keyword">int</span> father[N];</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> fb[N];</div><div class="line"><span class="keyword">int</span> val[N];</div><div class="line"><span class="keyword">int</span> num;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(father[x]==<span class="number">-1</span>) <span class="keyword">return</span> x;</div><div class="line">    father[x] = find(father[x]);</div><div class="line">    <span class="keyword">return</span> father[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">uni</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> fx = find(x);</div><div class="line">    <span class="keyword">int</span> fy = find(y);</div><div class="line">    <span class="keyword">if</span>(fx!=fy)&#123;</div><div class="line">        father[fx] = fy;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFb</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</div><div class="line">        <span class="keyword">if</span>(fb[i]==x) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(fb[i]&gt;x) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp;</div><div class="line">    <span class="keyword">int</span> f,t;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> arr[N];</div><div class="line">    <span class="built_in">memset</span>(father,<span class="number">-1</span>,<span class="keyword">sizeof</span>(father));</div><div class="line">    <span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="keyword">sizeof</span>(val));</div><div class="line">    num = <span class="number">0</span>;</div><div class="line">    fb[<span class="number">0</span>] = fb[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;++i)&#123;</div><div class="line">        fb[i] = fb[i<span class="number">-1</span>]+fb[i<span class="number">-2</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,arr+i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;f,&amp;t);</div><div class="line">        uni(f,t);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">        <span class="keyword">if</span>(isFb(arr[i]))&#123;</div><div class="line">            val[find(i+<span class="number">1</span>)]++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>;++i)&#123;</div><div class="line">        ans = ans&gt;=val[i]?ans:val[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)&#123;</div><div class="line">        init(n,m);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1008-游乐场"><a href="#1008-游乐场" class="headerlink" title="1008 游乐场"></a>1008 游乐场</h2><p>在游乐场有n个游戏项目，每个项目都需要花费一定的钱才能玩，且每个项目只能玩一次，小明身上的钱数为k，朋友推荐了m个游戏项目让他玩，小明会优先去玩朋友推荐的项目，问小明最多能玩多少个项目。如果小明的钱不够玩完朋友推荐的所有m个项目，则输出-1，否则输出小明最多能玩的项目数。  </p>
<p>解题思路：贪心的思想，将每个项目所需花费的钱数存在数组arr[n]中，首先求出朋友推荐的m个项目所需要花费的总钱数sum，判断是否大于k，如果大于k，则输出-1；若小于k，则将k-=sum，并且将推荐的m个项目对应在arr数组中的值置为0，然后arr从小到大排序。从下标i从m开始循环，判断剩下的钱数是否够完第i个项目，一次类推，知道钱不够了为止，此时玩过的项目数则为小明最多能玩的项目数。  </p>
<p>AC代码：  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t,n,m,tmp,ans;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> k;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum;</div><div class="line">    <span class="keyword">int</span> arr[<span class="number">10005</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        ans = <span class="number">0</span>;</div><div class="line">        sum = <span class="number">0</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;n,&amp;m,&amp;k);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,arr+i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</div><div class="line">            sum += arr[tmp<span class="number">-1</span>];</div><div class="line">            arr[tmp<span class="number">-1</span>]=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(sum&gt;k)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            k-=sum;</div><div class="line">            ans = m;</div><div class="line">            sort(arr,arr+n);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&lt;n;++i)&#123;</div><div class="line">                <span class="keyword">if</span>(k&gt;=arr[i])&#123;</div><div class="line">                    k-=arr[i];</div><div class="line">                    ans++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[H5 canvas绘制出现模糊的问题]]></title>
      <url>http://koala.ink/2015/11/18/h5_canvas_blur/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在之前做移动端小游戏 <a href="/rush/150918/index.html">幸运转盘</a> 、 <a href="/rush/150924/index.html">九宫格转盘</a> ，使用到了<code>canvas</code>，也是第一次在项目中使用<code>canvas</code>来实现。  </p>
<p>近期测试人员反应<code>canvas</code>绘制的内容太模糊，心想着用<code>canvas</code>绘制出来的怎么会模糊，先前也有考虑到适配不同尺寸的移动设备，担心直接使用<code>img</code>或者设置<code>background</code>会使图片拉伸而变得模糊，所以使用<code>canvas</code>来绘制转盘与九宫格，精确的计算每个物体所在的坐标以及尺寸绘制出来的，怎么会模糊。  </p>
<a id="more"></a>
<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>然而将绘制的内容与页面中的其他文字或者图片作对比后，发现使用<code>canvas</code>绘制输出的确实比直接使用标签输出的来的模糊，如下两张截图：  </p>
<p><img src="/posts_assets/h5_canvas_blur/turntable_blur.png" alt="大转盘模糊">  </p>
<p><img src="/posts_assets/h5_canvas_blur/sudoku_blur.png" alt="九宫格模糊">  </p>
<p>可以看出转盘中或者九宫格中的图片跟文字，明显与下面直接使用HTML标签显示的文字来的模糊。  </p>
<h2 id="原因排查"><a href="#原因排查" class="headerlink" title="原因排查"></a>原因排查</h2><p>在网上查了下<code>canvas</code>模糊的问题，确实存在，也有不少的解决方法。  </p>
<p>有一种说法是说因为绘制的坐标不是整数级的坐标，所以会变得模糊，所以在计算坐标的时候可以使用<code>Math.floor</code>将坐标取整，这样绘制就会变得清晰。  </p>
<p>个人觉得这种说法并不实际，因为在实现的时候就是要计算到每个点每条线的具体位置，角度等等的精确值，这样粗糙的取整，会使得绘制出来的整体跟设计图上有比较大的出入，而且本身也无法维护让每次绘制都是在整数级的坐标上，比如绘制一个圆，要如何让每个点都是在整数坐标的像素点上？  </p>
<p>还有一种方法比较简单，容易实现，而且效果在目前看来还是不错的。  </p>
<h2 id="canvas-大小"><a href="#canvas-大小" class="headerlink" title="canvas 大小"></a>canvas 大小</h2><p>先补充说明一个基础知识点，在使用<code>canvas</code>的时候，要设置画布的大小，要使用的是<code>canvas</code>的<code>width</code>与<code>height</code>属性，而不是设置<code>canvas</code>的<code>style</code>或者CSS样式中的<code>width</code>与<code>height</code>。  </p>
<p>因为在绘制的过程中画布内容的实际大小是根据<code>canvas</code>的<code>width</code>与<code>height</code>属性设置的，而<code>style</code>或者CSS设置的<code>width</code>与<code>height</code>只是简单的对画布进行缩放。  </p>
<p>这里可以将<code>canvas</code>比喻为一个<code>img</code>，其中画布的<code>width</code>与<code>height</code>属性，相当于<code>img</code>中图片的原始尺寸；我们使用JS在画布上绘制的内容对应的就是<code>img</code>中的图片；而<code>style</code>或者CSS设置的<code>width</code>与<code>height</code>，就是设置<code>canvas</code>或者<code>img</code>在页面上要显示的大小。  </p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>因此这里要解决模糊的做法，就是将这张“图片”变得高清一点，然后缩小了来显示。具体实现就是将画布的大小设置为实际显示大小的两倍，然后在canvas的css属性设置正常显示的宽高，比如，要显示一个100*200的画布，可以这样写：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 200px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如此就相当于画了一张200*400的图片，然后设置他显示成100*200的大小，这样一来就变得清晰了。需要注意的是，这样将画布放大之后，绘制的过程中对应的那些坐标，长度等等都要相应的放大，比如原本在100*200的画布上绘制<code>ctx.arc(10,10,5,0,Math.PI*2)</code>，现在在200*400的画布上就得改成<code>ctx.arc(20,20,10,0,Math.PI*2)</code>。如此修改后的效果如下两张截图：  </p>
<p><img src="/posts_assets/h5_canvas_blur/turntable_clear.png" alt="大转盘清晰">  </p>
<p><img src="/posts_assets/h5_canvas_blur/sudoku_clear.png" alt="九宫格清洗">  </p>
<p>现在相比之前，明显清晰了许多，画布中的文字和图片与下面HTML标签直接输出的一样清楚，模糊的问题解决了，不会再觉得是撸多了，眼睛花。  </p>
<h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>另外，如果要比较好的解决<code>canvas</code>模糊的问题，可以使用JS类库<code>hidpi-canvas-polyfill</code>来解决，由于我也没试过，就不多说了，想了解的可以查看 <a href="http://segmentfault.com/q/1010000002391424/a-1020000002391631">html5 canvas绘制图片模糊的问题</a>，这里有介绍这个插件的使用方法。  </p>
<hr>
<p>本文链接：<a href="/2015/11/18/h5_canvas_blur/">H5 canvas绘制出现模糊的问题</a>  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]移动web资源整理]]></title>
      <url>http://koala.ink/2015/11/09/mobile_web_assets_resource_arrangement/</url>
      <content type="html"><![CDATA[<p>原文：<a href="http://www.cnblogs.com/PeunZhang/p/3407453.html">http://www.cnblogs.com/PeunZhang/p/3407453.html</a>  </p>
<hr>
<p>2013年初接触移动端，简单做下总结，首先了解下移动web带来的问题  </p>
<ul>
<li>设备更新换代快——低端机遗留下问题、高端机带来新挑战  </li>
<li>浏览器厂商不统一——兼容问题多  </li>
<li>网络更复杂——弱网络，页面打开慢  </li>
<li>低端机性能差——页面操作卡顿  </li>
<li>HTML5新技术多——学习成本不低  </li>
<li>未知问题——坑多  </li>
</ul>
<a id="more"></a>
<p>面对这些问题，一开始我们只能在未知中试错，知道错误的方案才能更容易寻找正确的解决问题思路，2年多来，可看到移动web在业界不断趋向于成熟，各种框架和解决方案不断的涌现让移动端开发不再是个噩梦。  </p>
<p>这几天把想到的一点经验先罗列出来，后续会持续更新，这篇文章可以给刚接触webapp开发的同学带来帮助，任何疑问欢迎留言探讨~  </p>
<h2 id="meta基础知识"><a href="#meta基础知识" class="headerlink" title="meta基础知识"></a>meta基础知识</h2><h3 id="H5页面窗口自动调整到设备宽度，并禁止用户缩放页面"><a href="#H5页面窗口自动调整到设备宽度，并禁止用户缩放页面" class="headerlink" title="H5页面窗口自动调整到设备宽度，并禁止用户缩放页面"></a>H5页面窗口自动调整到设备宽度，并禁止用户缩放页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="忽略将页面中的数字识别为电话号码"><a href="#忽略将页面中的数字识别为电话号码" class="headerlink" title="忽略将页面中的数字识别为电话号码"></a>忽略将页面中的数字识别为电话号码</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="忽略Android平台中对邮箱地址的识别"><a href="#忽略Android平台中对邮箱地址的识别" class="headerlink" title="忽略Android平台中对邮箱地址的识别"></a>忽略Android平台中对邮箱地址的识别</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"email=no"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="当网站添加到主屏幕快速启动方式，可隐藏地址栏，仅针对ios的safari"><a href="#当网站添加到主屏幕快速启动方式，可隐藏地址栏，仅针对ios的safari" class="headerlink" title="当网站添加到主屏幕快速启动方式，可隐藏地址栏，仅针对ios的safari"></a>当网站添加到主屏幕快速启动方式，可隐藏地址栏，仅针对ios的safari</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- ios7.0版本以后，safari上已看不到效果 --&gt;</span></div></pre></td></tr></table></figure>
<p>体验demo，解决在主屏幕打开页面后，点击页面链接不会跳转到系统自带的Safari  </p>
<p><a href="http://peunzhang.github.io/demo/standalone/test1.html">http://peunzhang.github.io/demo/standalone/test1.html</a>  </p>
<h3 id="将网站添加到主屏幕快速启动方式，仅针对ios的safari顶端状态条的样式"><a href="#将网站添加到主屏幕快速启动方式，仅针对ios的safari顶端状态条的样式" class="headerlink" title="将网站添加到主屏幕快速启动方式，仅针对ios的safari顶端状态条的样式"></a>将网站添加到主屏幕快速启动方式，仅针对ios的safari顶端状态条的样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 可选default、black、black-translucent --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="viewport模板"><a href="#viewport模板" class="headerlink" title="viewport模板"></a>viewport模板</h3><p>viewport模板——通用  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"black"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">这里开始内容</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>viewport模板 - target-densitydpi=device-dpi，android 2.3.5以下版本不支持  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=750, user-scalable=no, target-densitydpi=device-dpi"</span>&gt;</span><span class="comment">&lt;!-- width取值与页面定义的宽度一致 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"black"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">这里开始内容</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>参考案例：<a href="http://action.weixin.qq.com/payact/readtemplate?t=mobile/2015/wxzfsht/index_tmpl">http://action.weixin.qq.com/payact/readtemplate?t=mobile/2015/wxzfsht/index_tmpl</a>  </p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="移动端如何定义字体font-family"><a href="#移动端如何定义字体font-family" class="headerlink" title="移动端如何定义字体font-family"></a>移动端如何定义字体font-family</h3><p>中文字体使用系统默认即可，英文用Helvetica  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line">/* 移动端定义字体的代码 */</div><div class="line">body&#123;font-family:Helvetica;&#125;</div></pre></td></tr></table></figure>
<p>参考<a href="http://www.cnblogs.com/PeunZhang/p/3592096.html">《移动端使用字体的思考》</a>  </p>
<h3 id="移动端字体单位font-size选择px还是rem"><a href="#移动端字体单位font-size选择px还是rem" class="headerlink" title="移动端字体单位font-size选择px还是rem"></a>移动端字体单位font-size选择px还是rem</h3><p>对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可  </p>
<p>对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备  </p>
<p>rem配置参考，适合视觉稿宽度为640px的：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">10px</span>&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">321px</span>) and (max-width:<span class="number">375px</span>)&#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">11px</span>&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">376px</span>) and (max-width:<span class="number">414px</span>)&#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">415px</span>) and (max-width:<span class="number">639px</span>)&#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">15px</span>&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">640px</span>) and (max-width:<span class="number">719px</span>)&#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">20px</span>&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">720px</span>) and (max-width:<span class="number">749px</span>)&#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">22.5px</span>&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">750px</span>) and (max-width:<span class="number">799px</span>)&#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">23.5px</span>&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">800px</span>)&#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">25px</span>&#125;&#125;</div></pre></td></tr></table></figure>
<p>体验demo：<a href="http://peunzhang.github.io/demo/rem/index.html">http://peunzhang.github.io/demo/rem/index.html</a>  </p>
<h3 id="移动端touch事件-区分webkit-和-winphone"><a href="#移动端touch事件-区分webkit-和-winphone" class="headerlink" title="移动端touch事件(区分webkit 和 winphone)"></a>移动端touch事件(区分webkit 和 winphone)</h3><p>当用户手指放在移动设备在屏幕上滑动会触发的touch事件  </p>
<p>以下支持webkit</p>
<ul>
<li>touchstart——当手指触碰屏幕时候发生。不管当前有多少只手指  </li>
<li>touchmove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()* 可以阻止默认情况的发生：阻止页面滚动  </li>
<li>touchend——当手指离开屏幕时触发  </li>
<li>touchcancel——系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用  </li>
</ul>
<p>TouchEvent  </p>
<ul>
<li>touches：屏幕上所有手指的信息  </li>
<li>targetTouches：手指在目标区域的手指信息  </li>
<li>changedTouches：最近一次触发该事件的手指信息  </li>
<li>touchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息  </li>
</ul>
<p>参数信息(changedTouches[0])  </p>
<ul>
<li>clientX、clientY在显示区的坐标  </li>
<li>target：当前元素  </li>
</ul>
<p>参考：<a href="https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent">https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent</a>  </p>
<p>以下支持winphone 8</p>
<ul>
<li>MSPointerDown——当手指触碰屏幕时候发生。不管当前有多少只手指  </li>
<li>MSPointerMove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用css的html{-ms-touch-action: none;}可以阻止默认情况的发生：阻止页面滚动  </li>
<li>MSPointerUp——当手指离开屏幕时触发  </li>
</ul>
<h3 id="移动端click屏幕产生200-300-ms的延迟响应"><a href="#移动端click屏幕产生200-300-ms的延迟响应" class="headerlink" title="移动端click屏幕产生200-300 ms的延迟响应"></a>移动端click屏幕产生200-300 ms的延迟响应</h3><p>移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。  </p>
<p>以下是历史原因，来源一个公司内一个同事的分享：  </p>
<p>2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。  </p>
<p>双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。  </p>
<p>原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接<a href="#"></a>，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。  </p>
<p>解决方案：  </p>
<ul>
<li>fastclick可以解决在手机上点击事件的300ms延迟  </li>
<li>zepto的touch模块，tap事件也是为了解决在click的延迟问题  </li>
</ul>
<h3 id="触摸事件的响应顺序"><a href="#触摸事件的响应顺序" class="headerlink" title="触摸事件的响应顺序"></a>触摸事件的响应顺序</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>、ontouchstart</div><div class="line"><span class="number">2</span>、ontouchmove</div><div class="line"><span class="number">3</span>、ontouchend</div><div class="line"><span class="number">4</span>、onclick</div></pre></td></tr></table></figure>
<p>解决300ms延迟的问题，也可以通过绑定ontouchstart事件，加快对事件的响应  </p>
<h3 id="什么是Retina-显示屏，带来了什么问题"><a href="#什么是Retina-显示屏，带来了什么问题" class="headerlink" title="什么是Retina 显示屏，带来了什么问题"></a>什么是Retina 显示屏，带来了什么问题</h3><p>retina：一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个  </p>
<p>在高清显示屏中的位图被放大，图片会变得模糊，因此移动端的视觉稿通常会设计为传统PC的2倍  </p>
<p>那么，前端的应对方案是：  </p>
<p>设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2  </p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">//例如图片宽高为：200px*200px，那么写法如下</div><div class="line">.css&#123;width:100px;height:100px;background-size:100px 100px;&#125;</div></pre></td></tr></table></figure>
<p>其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.css</span>&#123;<span class="attribute">font-size</span>:<span class="number">20px</span>&#125;</div></pre></td></tr></table></figure>
<p>参考<a href="http://www.cnblogs.com/PeunZhang/p/3441110.html">《高清显示屏原理及设计方案》</a>  </p>
<h3 id="ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉"><a href="#ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉" class="headerlink" title="ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉"></a>ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</h3><p>ios用户点击一个链接，会出现一个半透明灰色遮罩, 如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0，也就是属性值的最后一位设置为0就可以去除半透明灰色遮罩  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">a</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>&#123;<span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0;)&#125;</div></pre></td></tr></table></figure>
<h3 id="部分android系统中元素被点击时产生的边框怎么去掉"><a href="#部分android系统中元素被点击时产生的边框怎么去掉" class="headerlink" title="部分android系统中元素被点击时产生的边框怎么去掉"></a>部分android系统中元素被点击时产生的边框怎么去掉</h3><p>android用户点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">a</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>&#123;</div><div class="line"><span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0;)</div><div class="line">-webkit-user-modify:read-write-plaintext-only;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符  </p>
<p>另外，有些机型去除不了，如小米2  </p>
<p>对于按钮类还有个办法，不使用a或者input标签，直接用div标签  </p>
<p>参考<a href="http://www.cnblogs.com/PeunZhang/archive/2013/02/28/2907708.html">《如何去除android上a标签产生的边框》</a>  </p>
<h3 id="winphone系统a、input标签被点击时产生的半透明灰色背景怎么去掉"><a href="#winphone系统a、input标签被点击时产生的半透明灰色背景怎么去掉" class="headerlink" title="winphone系统a、input标签被点击时产生的半透明灰色背景怎么去掉"></a>winphone系统a、input标签被点击时产生的半透明灰色背景怎么去掉</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="webkit表单元素的默认外观怎么重置"><a href="#webkit表单元素的默认外观怎么重置" class="headerlink" title="webkit表单元素的默认外观怎么重置"></a>webkit表单元素的默认外观怎么重置</h3><p>通用  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.css</span>&#123;<span class="attribute">-webkit-appearance</span>:none;&#125;</div></pre></td></tr></table></figure>
<p>伪元素改变number类型input框的默认样式  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=number]</span><span class="selector-pseudo">::-webkit-textfield-decoration-container</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: transparent;    </div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=number]</span><span class="selector-pseudo">::-webkit-inner-spin-button</span> &#123;</div><div class="line">     <span class="attribute">-webkit-appearance</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=number]</span><span class="selector-pseudo">::-webkit-outer-spin-button</span> &#123;</div><div class="line">     <span class="attribute">-webkit-appearance</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="webkit表单输入框placeholder的颜色值能改变么"><a href="#webkit表单输入框placeholder的颜色值能改变么" class="headerlink" title="webkit表单输入框placeholder的颜色值能改变么"></a>webkit表单输入框placeholder的颜色值能改变么</h3><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span>&#123;<span class="attribute">color</span>:<span class="number">#AAAAAA</span>;&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-webkit-input-placeholder</span>&#123;<span class="attribute">color</span>:<span class="number">#EEEEEE</span>;&#125;</div></pre></td></tr></table></figure>
<h3 id="webkit表单输入框placeholder的文字能换行么"><a href="#webkit表单输入框placeholder的文字能换行么" class="headerlink" title="webkit表单输入框placeholder的文字能换行么"></a>webkit表单输入框placeholder的文字能换行么</h3><p>ios可以，android不行~  </p>
<p>在textarea标签下都可以换行~  </p>
<h3 id="IE10（winphone8）表单元素默认外观如何重置"><a href="#IE10（winphone8）表单元素默认外观如何重置" class="headerlink" title="IE10（winphone8）表单元素默认外观如何重置"></a>IE10（winphone8）表单元素默认外观如何重置</h3><p>禁用 select 默认下拉箭头  </p>
<p>::-ms-expand 适用于表单选择控件下拉箭头的修改，有多个属性值，设置它隐藏 (display:none) 并使用背景图片来修饰可得到我们想要的效果。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">select</span><span class="selector-pseudo">::-ms-expand</span> &#123;</div><div class="line"><span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>禁用 radio 和 checkbox 默认样式  </p>
<p>::-ms-check 适用于表单复选框或单选按钮默认图标的修改，同样有多个属性值，设置它隐藏 (display:none) 并使用背景图片来修饰可得到我们想要的效果。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-pseudo">::-ms-check</span>,<span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">::-ms-check</span>&#123;</div><div class="line"><span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>禁用PC端表单输入框默认清除按钮  </p>
<p>当表单文本输入框输入内容后会显示文本清除按钮，::-ms-clear 适用于该清除按钮的修改，同样设置使它隐藏 (display:none) 并使用背景图片来修饰可得到我们想要的效果。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">::-ms-clear</span>,<span class="selector-tag">input</span><span class="selector-attr">[type=tel]</span><span class="selector-pseudo">::-ms-clear</span>,<span class="selector-tag">input</span><span class="selector-attr">[type=number]</span><span class="selector-pseudo">::-ms-clear</span>&#123;</div><div class="line"><span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="禁止ios-长按时不触发系统的菜单，禁止ios-amp-android长按时下载图片"><a href="#禁止ios-长按时不触发系统的菜单，禁止ios-amp-android长按时下载图片" class="headerlink" title="禁止ios 长按时不触发系统的菜单，禁止ios&amp;android长按时下载图片"></a>禁止ios 长按时不触发系统的菜单，禁止ios&amp;android长按时下载图片</h3><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.css</span>&#123;<span class="attribute">-webkit-touch-callout</span>: none&#125;</div></pre></td></tr></table></figure>
<h3 id="禁止ios和android用户选中文字"><a href="#禁止ios和android用户选中文字" class="headerlink" title="禁止ios和android用户选中文字"></a>禁止ios和android用户选中文字</h3><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.css</span>&#123;<span class="attribute">-webkit-user-select</span>:none&#125;</div></pre></td></tr></table></figure>
<p>参考<a href="http://www.cnblogs.com/PeunZhang/p/3522603.html">《如何改变表单元素的外观(for Webkit and IE10)》</a>  </p>
<h3 id="打电话发短信写邮件怎么实现"><a href="#打电话发短信写邮件怎么实现" class="headerlink" title="打电话发短信写邮件怎么实现"></a>打电话发短信写邮件怎么实现</h3><p>打电话  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:0755-10086"</span>&gt;</span>打电话给:0755-10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>发短信，winphone系统无效  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sms:10086"</span>&gt;</span>发短信给: 10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>写邮件，可参考<a href="http://www.cnblogs.com/PeunZhang/p/4952783.html">《移动web页面给用户发送邮件的方法》</a>  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:peun@foxmail.com"</span>&gt;</span>peun@foxmail.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="模拟按钮hover效果"><a href="#模拟按钮hover效果" class="headerlink" title="模拟按钮hover效果"></a>模拟按钮hover效果</h3><p>移动端触摸按钮的效果，可明示用户有些事情正要发生，是一个比较好体验，但是移动设备中并没有鼠标指针，使用css的hover并不能满足我们的需求，还好国外有个激活移动端css的active效果。  </p>
<p>直接在body上添加ontouchstart，同样可激活移动端css的active效果，比较推荐这种方式，代码如下：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"black"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></div><div class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0);&#125;</div><div class="line"><span class="selector-class">.btn-blue</span>&#123;<span class="attribute">display</span>:block;<span class="attribute">height</span>:<span class="number">42px</span>;<span class="attribute">line-height</span>:<span class="number">42px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">border-radius</span>:<span class="number">4px</span>;<span class="attribute">font-size</span>:<span class="number">18px</span>;<span class="attribute">color</span>:<span class="number">#FFFFFF</span>;<span class="attribute">background-color</span>: <span class="number">#4185F3</span>;&#125;</div><div class="line"><span class="selector-class">.btn-blue</span><span class="selector-pseudo">:active</span>&#123;<span class="attribute">background-color</span>: <span class="number">#357AE8</span>;&#125;</div><div class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ontouchstart</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-blue"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>体验demo：<a href="http://peunzhang.github.io/demo/btn/btn.html">http://peunzhang.github.io/demo/btn/btn.html</a>  </p>
<p>或者：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"black"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></div><div class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0);&#125;</div><div class="line"><span class="selector-class">.btn-blue</span>&#123;<span class="attribute">display</span>:block;<span class="attribute">height</span>:<span class="number">42px</span>;<span class="attribute">line-height</span>:<span class="number">42px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">border-radius</span>:<span class="number">4px</span>;<span class="attribute">font-size</span>:<span class="number">18px</span>;<span class="attribute">color</span>:<span class="number">#FFFFFF</span>;<span class="attribute">background-color</span>: <span class="number">#4185F3</span>;&#125;</div><div class="line"><span class="selector-class">.btn-blue</span><span class="selector-pseudo">:active</span>&#123;<span class="attribute">background-color</span>: <span class="number">#357AE8</span>;&#125;</div><div class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-blue"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"touchstart"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, <span class="literal">true</span>)</div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>兼容性ios5+、部分android 4+、winphone 8  </p>
<p>要做到全兼容的办法，可通过绑定ontouchstart和ontouchend来控制按钮的类名  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"black"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></div><div class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0);&#125;</div><div class="line"><span class="selector-class">.btn-blue</span>&#123;<span class="attribute">display</span>:block;<span class="attribute">height</span>:<span class="number">42px</span>;<span class="attribute">line-height</span>:<span class="number">42px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">border-radius</span>:<span class="number">4px</span>;<span class="attribute">font-size</span>:<span class="number">18px</span>;<span class="attribute">color</span>:<span class="number">#FFFFFF</span>;<span class="attribute">background-color</span>: <span class="number">#4185F3</span>;&#125;</div><div class="line"><span class="selector-class">.btn-blue-on</span>&#123;<span class="attribute">background-color</span>: <span class="number">#357AE8</span>;&#125;</div><div class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-blue"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></div><div class="line"><span class="keyword">var</span> btnBlue = <span class="built_in">document</span>.querySelector(<span class="string">".btn-blue"</span>);</div><div class="line">btnBlue.ontouchstart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.className = <span class="string">"btn-blue btn-blue-on"</span></div><div class="line">&#125;</div><div class="line">btnBlue.ontouchend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.className = <span class="string">"btn-blue"</span></div><div class="line">&#125;</div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="屏幕旋转的事件和样式事件"><a href="#屏幕旋转的事件和样式事件" class="headerlink" title="屏幕旋转的事件和样式事件"></a>屏幕旋转的事件和样式事件</h3><p>window.orientation，取值：正负90表示横屏模式、0和180表现为竖屏模式；  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">window</span>.onorientationchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">switch</span>(<span class="built_in">window</span>.orientation)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">-90</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">90</span>:</div><div class="line">        alert(<span class="string">"横屏:"</span> + <span class="built_in">window</span>.orientation);</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">180</span>:</div><div class="line">        alert(<span class="string">"竖屏:"</span> + <span class="built_in">window</span>.orientation);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>样式  </p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">//竖屏时使用的样式</div><div class="line">@media all and (orientation:portrait) &#123;</div><div class="line">.css&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//横屏时使用的样式</div><div class="line">@media all and (orientation:landscape) &#123;</div><div class="line">.css&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="audio元素和video元素在ios和andriod中无法自动播放"><a href="#audio元素和video元素在ios和andriod中无法自动播放" class="headerlink" title="audio元素和video元素在ios和andriod中无法自动播放"></a>audio元素和video元素在ios和andriod中无法自动播放</h3><p>应对方案：触屏即播  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">$(<span class="string">'html'</span>).one(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    audio.play()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>可参考<a href="http://www.cnblogs.com/PeunZhang/archive/2013/02/05/2893093.html">《无法自动播放的audio元素》</a>  </p>
<h3 id="摇一摇功能"><a href="#摇一摇功能" class="headerlink" title="摇一摇功能"></a>摇一摇功能</h3><p>HTML5 deviceMotion：封装了运动传感器数据的事件，可以获取手机运动状态下的运动加速度等数据。  </p>
<h3 id="手机拍照和上传图片"><a href="#手机拍照和上传图片" class="headerlink" title="手机拍照和上传图片"></a>手机拍照和上传图片</h3><p><input type="file">的accept 属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 选择照片 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 选择视频 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">accept</span>=<span class="string">"video/*"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用总结：  </p>
<ul>
<li>ios 有拍照、录像、选取本地图片功能  </li>
<li>部分android只有选取本地图片功能  </li>
<li>winphone不支持  </li>
<li>input控件默认外观丑陋  </li>
</ul>
<h3 id="微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整"><a href="#微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整" class="headerlink" title="微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整"></a>微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整</h3><p>原因  </p>
<ul>
<li>android侧是复写了layoutinflater 对textview做了统一处理  </li>
<li>ios侧是修改了body.style.webkitTextSizeAdjust值  </li>
</ul>
<p>解决方案：  </p>
<ul>
<li>android使用以下代码，该接口只在微信浏览器下有效(感谢jationhuang同学提供)  </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * 页面加入这段代码可使Android机器页面不再受到用户字体缩放强制改变大小</div><div class="line"> * 但是会有一个1秒左右的延迟，期间可以考虑通过loading展示</div><div class="line"> * 仅供参考</div><div class="line"> */</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(WeixinJSBridge) == <span class="string">"undefined"</span>) &#123;</div><div class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                WeixinJSBridge.invoke(<span class="string">'setFontSizeCallback'</span>,&#123;<span class="string">"fontSize"</span>:<span class="number">0</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">                    alert(<span class="built_in">JSON</span>.stringify(res));</div><div class="line">                &#125;);</div><div class="line">            &#125;,<span class="number">0</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            WeixinJSBridge.invoke(<span class="string">'setFontSizeCallback'</span>,&#123;<span class="string">"fontSize"</span>:<span class="number">0</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">                alert(<span class="built_in">JSON</span>.stringify(res));</div><div class="line">            &#125;);</div><div class="line">        &#125;,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<ul>
<li>ios使用-webkit-text-size-adjust禁止调整字体大小  </li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span><span class="meta">!important</span>;&#125;</div></pre></td></tr></table></figure>
<p>最好的解决方案：  </p>
<ul>
<li>整个页面用rem或者百分比布局  </li>
</ul>
<h3 id="消除transition闪屏"><a href="#消除transition闪屏" class="headerlink" title="消除transition闪屏"></a>消除transition闪屏</h3><p>网络都是这么写的，但我并没有测试出来  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.css</span>&#123;</div><div class="line"><span class="comment">/*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/</span></div><div class="line"><span class="attribute">-webkit-transform-style</span>: preserve-<span class="number">3</span>d;</div><div class="line"><span class="comment">/*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/</span></div><div class="line"><span class="attribute">-webkit-backface-visibility</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="开启硬件加速"><a href="#开启硬件加速" class="headerlink" title="开启硬件加速"></a>开启硬件加速</h3><ul>
<li>解决页面闪白  </li>
<li>保证动画流畅  </li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.css</span> &#123;</div><div class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">   <span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">   <span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">   <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考<a href="http://www.cnblogs.com/PeunZhang/p/3510083.html">《用CSS开启硬件加速来提高网站性能》</a>  </p>
<h3 id="取消input在ios下，输入的时候英文首字母的默认大写"><a href="#取消input在ios下，输入的时候英文首字母的默认大写" class="headerlink" title="取消input在ios下，输入的时候英文首字母的默认大写"></a>取消input在ios下，输入的时候英文首字母的默认大写</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">autocapitalize</span>=<span class="string">"off"</span> <span class="attr">autocorrect</span>=<span class="string">"off"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="android-上去掉语音输入按钮"><a href="#android-上去掉语音输入按钮" class="headerlink" title="android 上去掉语音输入按钮"></a>android 上去掉语音输入按钮</h3><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-speech-button</span> &#123;<span class="attribute">display</span>: none&#125;</div></pre></td></tr></table></figure>
<h3 id="android-2-3-bug"><a href="#android-2-3-bug" class="headerlink" title="android 2.3 bug"></a>android 2.3 bug</h3><ul>
<li>@-webkit-keyframes 需要以0%开始100%结束，0%的百分号不能去掉  </li>
<li>after和before伪类无法使用动画animation  </li>
<li>border-radius不支持%单位  </li>
<li>translate百分比的写法和scale在一起会导致失效，例如-webkit-transform: translate(-50%,-50%) scale(-0.5, 1)  </li>
</ul>
<h3 id="android-4-x-bug"><a href="#android-4-x-bug" class="headerlink" title="android 4.x bug"></a>android 4.x bug</h3><ul>
<li>三星 Galaxy S4中自带浏览器不支持border-radius缩写  </li>
<li>同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分  </li>
<li>部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色  </li>
<li>android无法同时播放多音频audio<br>参考<a href="https://github.com/yisibl/blog/issues/2">《border-radius 移动之伤》</a>  </li>
</ul>
<h3 id="设计高性能CSS3动画的几个要素"><a href="#设计高性能CSS3动画的几个要素" class="headerlink" title="设计高性能CSS3动画的几个要素"></a>设计高性能CSS3动画的几个要素</h3><ul>
<li>尽可能地使用合成属性transform和opacity来设计CSS3动画，不使用position的left和top来定位  </li>
<li>利用translate3D开启GPU加速<br>参考<a href="http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/">《High Performance Animations》</a>  </li>
</ul>
<h3 id="fixed-bug"><a href="#fixed-bug" class="headerlink" title="fixed bug"></a>fixed bug</h3><ul>
<li>ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位  </li>
<li>android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位  </li>
<li>ios4下不支持position:fixed  </li>
</ul>
<p>解决方案  </p>
<ul>
<li>可用isroll.js，暂无完美方案  </li>
</ul>
<p>参考  </p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/2">《移动端web页面使用position:fixed问题总结》</a>  </p>
<p><a href="http://www.cnblogs.com/PeunZhang/archive/2013/06/14/3117589.html">《使用iScroll.js解决ios4下不支持position:fixed的问题》</a>  </p>
<h3 id="如何阻止windows-Phone的默认触摸事件"><a href="#如何阻止windows-Phone的默认触摸事件" class="headerlink" title="如何阻止windows Phone的默认触摸事件"></a>如何阻止windows Phone的默认触摸事件</h3><p>winphone下默认触摸事件事件使用e.preventDefault是无效的  </p>
<p>目前解决方法是使用样式来禁用  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">html</span>&#123;<span class="attribute">-ms-touch-action</span>: none;&#125;<span class="comment">/* 禁止winphone默认触摸事件 */</span></div></pre></td></tr></table></figure>
<p>参考  </p>
<p><a href="http://stackoverflow.com/questions/13396297/windows-phone-8-touch-support">《Windows phone 8 touch support》</a>  </p>
<h3 id="播放视频不全屏"><a href="#播放视频不全屏" class="headerlink" title="播放视频不全屏"></a>播放视频不全屏</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</div><div class="line">1.目前只有ios7+、winphone8+支持自动播放</div><div class="line">2.支持Airplay的设备（如：音箱、Apple TV)播放</div><div class="line">x-webkit-airplay="true"</div><div class="line">3.播放视频不全屏，ios7+、winphone8+支持，部分android4+支持（含华为、小米、魅族）</div><div class="line">webkit-playsinline="true"</div><div class="line">--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">x-webkit-airplay</span>=<span class="string">"true"</span> <span class="attr">webkit-playsinline</span>=<span class="string">"true"</span> <span class="attr">preload</span>=<span class="string">"auto"</span> <span class="attr">autoplay</span> <span class="attr">src</span>=<span class="string">"http://"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<p>体验demo：<a href="http://peunzhang.github.io/demo/video/index.html">http://peunzhang.github.io/demo/video/index.html</a>  </p>
<h2 id="常用的移动端框架"><a href="#常用的移动端框架" class="headerlink" title="常用的移动端框架"></a>常用的移动端框架</h2><h3 id="zepto-js"><a href="#zepto-js" class="headerlink" title="zepto.js"></a>zepto.js</h3><p>语法与jquery几乎一样，会jquery基本会zepto~  </p>
<p>最新版本已经更新到1.16  </p>
<p>官网：<a href="http://zeptojs.com/">http://zeptojs.com/</a>  </p>
<p>中文(非官网)：h<a href="ttp://www.css88.com/doc/zeptojs_api/">ttp://www.css88.com/doc/zeptojs_api/</a>  </p>
<p>常使用的扩展模块：  </p>
<p>浏览器检测：<a href="https://github.com/madrobby/zepto/blob/master/src/detect.js">https://github.com/madrobby/zepto/blob/master/src/detect.js</a>  </p>
<p>tap事件：<a href="https://github.com/madrobby/zepto/blob/master/src/touch.js">https://github.com/madrobby/zepto/blob/master/src/touch.js</a>  </p>
<h3 id="iscroll-js"><a href="#iscroll-js" class="headerlink" title="iscroll.js"></a>iscroll.js</h3><p>解决页面不支持弹性滚动，不支持fixed引起的问题~  </p>
<p>实现下拉刷新，滑屏，缩放等功能~  </p>
<p>最新版本已经更新到5.0  </p>
<p>官网：<a href="http://cubiq.org/iscroll-5">http://cubiq.org/iscroll-5</a>  </p>
<h3 id="underscore-js"><a href="#underscore-js" class="headerlink" title="underscore.js"></a>underscore.js</h3><p>笔者没用过，不过听说好用，推荐给大家~  </p>
<p>该库提供了一整套函数式编程的实用功能，但是没有扩展任何JavaScript内置对象。  </p>
<p>最新版本已经更新到1.8.2  </p>
<p>官网：<a href="http://underscorejs.org/">http://underscorejs.org/</a>  </p>
<h3 id="滑屏框架"><a href="#滑屏框架" class="headerlink" title="滑屏框架"></a>滑屏框架</h3><p>适合上下滑屏、左右滑屏等滑屏切换页面的效果  </p>
<p><a href="https://github.com/peunzhang/slip.js">slip.js</a>  </p>
<p><a href="https://github.com/peunzhang/iSlider">iSlider.js</a>  </p>
<p><a href="https://github.com/peunzhang/fullpage">fullpage.js</a>  </p>
<p><a href="http://www.swiper.com.cn/">swiper.js</a>  </p>
<h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><p>flex布局目前可使用在移动中，并非所有的语法都全兼容，但以下写法笔者实践过，效果良好~  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* ============================================================</div><div class="line">   flex：定义布局为盒模型</div><div class="line">   flex-v：盒模型垂直布局</div><div class="line">   flex-1：子元素占据剩余的空间</div><div class="line">   flex-align-center：子元素垂直居中</div><div class="line">   flex-pack-center：子元素水平居中</div><div class="line">   flex-pack-justify：子元素两端对齐</div><div class="line">   兼容性：ios 4+、android 2.3+、winphone8+</div><div class="line">   ============================================================ */</span></div><div class="line"><span class="selector-class">.flex</span>&#123;<span class="attribute">display</span>:-webkit-box;<span class="attribute">display</span>:-webkit-flex;<span class="attribute">display</span>:-ms-flexbox;<span class="attribute">display</span>:flex;&#125;</div><div class="line"><span class="selector-class">.flex-v</span>&#123;<span class="attribute">-webkit-box-orient</span>:vertical;<span class="attribute">-webkit-flex-direction</span>:column;<span class="attribute">-ms-flex-direction</span>:column;<span class="attribute">flex-direction</span>:column;&#125;</div><div class="line"><span class="selector-class">.flex-1</span>&#123;<span class="attribute">-webkit-box-flex</span>:<span class="number">1</span>;<span class="attribute">-webkit-flex</span>:<span class="number">1</span>;<span class="attribute">-ms-flex</span>:<span class="number">1</span>;<span class="attribute">flex</span>:<span class="number">1</span>;&#125;</div><div class="line"><span class="selector-class">.flex-align-center</span>&#123;<span class="attribute">-webkit-box-align</span>:center;<span class="attribute">-webkit-align-items</span>:center;<span class="attribute">-ms-flex-align</span>:center;<span class="attribute">align-items</span>:center;&#125;</div><div class="line"><span class="selector-class">.flex-pack-center</span>&#123;<span class="attribute">-webkit-box-pack</span>:center;<span class="attribute">-webkit-justify-content</span>:center;<span class="attribute">-ms-flex-pack</span>:center;<span class="attribute">justify-content</span>:center;&#125;</div><div class="line"><span class="selector-class">.flex-pack-justify</span>&#123;<span class="attribute">-webkit-box-pack</span>:justify;<span class="attribute">-webkit-justify-content</span>:space-between;<span class="attribute">-ms-flex-pack</span>:justify;<span class="attribute">justify-content</span>:space-between;&#125;</div></pre></td></tr></table></figure>
<p>示例：两端对齐  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"black"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></div><div class="line"><span class="comment">/* ============================================================</div><div class="line">   flex：定义布局为盒模型</div><div class="line">   flex-v：盒模型垂直布局</div><div class="line">   flex-1：子元素占据剩余的空间</div><div class="line">   flex-align-center：子元素垂直居中</div><div class="line">   flex-pack-center：子元素水平居中</div><div class="line">   flex-pack-justify：子元素两端对齐</div><div class="line">   兼容性：ios 4+、android 2.3+、winphone8+</div><div class="line">   ============================================================ */</span></div><div class="line"><span class="selector-class">.flex</span>&#123;<span class="attribute">display</span>:-webkit-box;<span class="attribute">display</span>:-webkit-flex;<span class="attribute">display</span>:-ms-flexbox;<span class="attribute">display</span>:flex;&#125;</div><div class="line"><span class="selector-class">.flex-v</span>&#123;<span class="attribute">-webkit-box-orient</span>:vertical;<span class="attribute">-webkit-flex-direction</span>:column;<span class="attribute">-ms-flex-direction</span>:column;<span class="attribute">flex-direction</span>:column;&#125;</div><div class="line"><span class="selector-class">.flex-1</span>&#123;<span class="attribute">-webkit-box-flex</span>:<span class="number">1</span>;<span class="attribute">-webkit-flex</span>:<span class="number">1</span>;<span class="attribute">-ms-flex</span>:<span class="number">1</span>;<span class="attribute">flex</span>:<span class="number">1</span>;&#125;</div><div class="line"><span class="selector-class">.flex-align-center</span>&#123;<span class="attribute">-webkit-box-align</span>:center;<span class="attribute">-webkit-align-items</span>:center;<span class="attribute">-ms-flex-align</span>:center;<span class="attribute">align-items</span>:center;&#125;</div><div class="line"><span class="selector-class">.flex-pack-center</span>&#123;<span class="attribute">-webkit-box-pack</span>:center;<span class="attribute">-webkit-justify-content</span>:center;<span class="attribute">-ms-flex-pack</span>:center;<span class="attribute">justify-content</span>:center;&#125;</div><div class="line"><span class="selector-class">.flex-pack-justify</span>&#123;<span class="attribute">-webkit-box-pack</span>:justify;<span class="attribute">-webkit-justify-content</span>:space-between;<span class="attribute">-ms-flex-pack</span>:justify;<span class="attribute">justify-content</span>:space-between;&#125;</div><div class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex flex-pack-justify"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>模块一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>模块二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>模块三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>模块四<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用注意：  </p>
<ul>
<li>flex下的子元素必须为块级元素，非块级元素在android2.3机器下flex失效  </li>
<li>flex下的子元素宽度和高度不能超过父元素，否则会导致子元素定位错误，例如水平垂直居中  </li>
</ul>
<p>参考：  </p>
<p><a href="http://the-echoplex.net/flexyboxes/">flexyboxes</a>  </p>
<p><a href="http://www.w3cplus.com/css3/old-flexbox-and-new-flexbox.html">“老”的Flexbox和“新”的Flexbox</a>  </p>
<p><a href="http://www.w3cplus.com/css3/advanced-cross-browser-flexbox.html">跨浏览器的Flexbox</a>  </p>
<h3 id="FastClick"><a href="#FastClick" class="headerlink" title="FastClick"></a>FastClick</h3><p>消除在移动浏览器上触发click事件与一个物理Tap(敲击)之间的300延迟  </p>
<p>参考<a href="https://github.com/ftlabs/fastclick">《FastClick》</a>  </p>
<h3 id="Sea-js"><a href="#Sea-js" class="headerlink" title="Sea.js"></a>Sea.js</h3><p>提供简单、极致的模块化开发体验  </p>
<ul>
<li>简单友好的模块定义规范：Sea.js 遵循 CMD 规范，可以像 Node.js 一般书写模块代码。  </li>
<li>自然直观的代码组织方式：依赖的自动加载、配置的简洁清晰，可以让我们更多地享受编码的乐趣。<br>地址：<a href="http://seajs.org/docs/">http://seajs.org/docs/</a>  </li>
</ul>
<hr>
<p>本文链接：<a href="/2015/11/09/mobile_web_assets_resource_arrangement/">[转]移动web资源整理</a>  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Javascript实用黑科技45条]]></title>
      <url>http://koala.ink/2015/11/09/javascript_45_black_tech/</url>
      <content type="html"><![CDATA[<p>译文链接：<a href="http://blog.gejiawen.com/2015/09/22/45-useful-javascript-tips-tricks-and-best-practices/?utm_source=tuicool&amp;utm_medium=referral">Javascript实用黑科技45条</a></p>
<p>本文是一篇翻译文章。原文： <a href="http://modernweb.com/2013/12/23/45-useful-javascript-tips-tricks-and-best-practices/">45 Useful JavaScript Tips, Tricks and Best Practices</a>  </p>
<hr>
<p>译文开始。  </p>
<a id="more"></a>
<p>众所周知，Javascript是全球最流行的语言之一，它涉足Web开发，移动端开发（ <a href="http://phonegap.com/">PhoneGap</a> 、 <a href="http://www.appcelerator.com/">Appcelerator</a> ），服务端开发（ <a href="http://nodejs.org/">Nodejs</a> 、 <a href="https://wakanda.github.io/">Wakanda</a> ），还有多种第三方实现（CoffeeScript这种）。此外Javascript还是许多开发者进入编程世界所接触的第一门语言。它既可以在浏览器中简单的弹出一个alert窗口，也能达到控制机器人这种复杂的程度（比如 <a href="http://nodebots.io/">nodebot</a> 、nodruino）。现在那些能够熟练编写结构清晰、性能卓越的Javascript开发者们，已经成为招聘市场上炙手可热的应聘者了。  </p>
<p>在这篇文章中，我将向你展示一系列Javascript相关的小技巧和一些最佳实践。除了少数几个示例，大部分示例都可以在浏览器环境或者服务端环境适用。  </p>
<p>注意，文章中所有的代码片段都已经在Google Chrome V30(V8 3.20.17.15)测试通过。  </p>
<h2 id="使用-var-关键字进行变量赋值"><a href="#使用-var-关键字进行变量赋值" class="headerlink" title="使用 var 关键字进行变量赋值"></a>使用 <code>var</code> 关键字进行变量赋值</h2><p>在Javascript中，如果一个变量没有经过声明就直接进行赋值操作，那么这个变量就会自动转变成全局变量。我们要尽量避免这种情况（全局变量）。  </p>
<h2 id="使用-来代替-进行判等"><a href="#使用-来代替-进行判等" class="headerlink" title="使用 === 来代替 == 进行判等"></a>使用 <code>===</code> 来代替 <code>==</code> 进行判等</h2><p><code>==</code> 和 <code>!=</code> 操作符会在某些情况下自动进行类型转化。但是 <code>===</code> 和 <code>!==</code>不会做自动转化，它们在做比较时，会同时比较数据类型和值，这也使得 <code>===</code> 和 <code>!==</code> 要比 <code>==</code> 和 <code>!=</code> 的速度要快。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">[<span class="number">10</span>] === <span class="number">10</span>    <span class="comment">// is false</span></div><div class="line">[<span class="number">10</span>]  == <span class="number">10</span>    <span class="comment">// is true</span></div><div class="line"><span class="string">'10'</span> == <span class="number">10</span>     <span class="comment">// is true</span></div><div class="line"><span class="string">'10'</span> === <span class="number">10</span>    <span class="comment">// is false</span></div><div class="line">[] == <span class="number">0</span>        <span class="comment">// is true</span></div><div class="line">[] ===  <span class="number">0</span>      <span class="comment">// is false</span></div><div class="line"><span class="string">''</span> == <span class="literal">false</span>    <span class="comment">// is true but true == "a" is false</span></div><div class="line"><span class="string">''</span> ===   <span class="literal">false</span> <span class="comment">// is false</span></div></pre></td></tr></table></figure>
<h2 id="undefined-，-null-，0，-false-，-NaN-，-39-39-（空字符串）都为逻辑假值"><a href="#undefined-，-null-，0，-false-，-NaN-，-39-39-（空字符串）都为逻辑假值" class="headerlink" title="undefined ， null ，0， false ， NaN ， &#39;&#39; （空字符串）都为逻辑假值"></a><code>undefined</code> ， <code>null</code> ，<code>0</code>， <code>false</code> ， <code>NaN</code> ， <code>&#39;&#39;</code> （空字符串）都为逻辑假值</h2><h2 id="使用分号-来结束一行代码"><a href="#使用分号-来结束一行代码" class="headerlink" title="使用分号 ; 来结束一行代码"></a>使用分号 <code>;</code> 来结束一行代码</h2><p>使用分号来结束代码行是一个被Javascript社区推荐的最佳实践。如果你忘了也没有关系，因为现在的Javascript引擎将会自动给你加上分号。至于我们为什么应该使用分号，可以参阅这篇文章 <a href="http://davidwalsh.name/javascript-semicolons">http://davidwalsh.name/javascript-semicolons</a> 。  </p>
<h2 id="使用对象构造器"><a href="#使用对象构造器" class="headerlink" title="使用对象构造器"></a>使用对象构造器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.firstName =  firstName;</div><div class="line">    <span class="keyword">this</span>.lastName = lastName;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Saad = <span class="keyword">new</span> Person(<span class="string">"Saad"</span>, <span class="string">"Mousliki"</span>);</div></pre></td></tr></table></figure>
<h2 id="使用-typeof-、-instanceof-、-constructor-时要谨慎小心"><a href="#使用-typeof-、-instanceof-、-constructor-时要谨慎小心" class="headerlink" title="使用 typeof 、 instanceof 、 constructor 时要谨慎小心"></a>使用 <code>typeof</code> 、 <code>instanceof</code> 、 <code>constructor</code> 时要谨慎小心</h2><ul>
<li><code>typeof</code> ：JavaScript的一元操作符，用于以字符串的形式返回变量的原始类型，注意， <code>typeof null</code> 也会返回 <code>object</code> ，大多数的对象类型（数组 <code>Array</code> 、时间 <code>Date</code> 等）也会返回 <code>object</code>  </li>
<li><code>constructor</code> ：对象（函数）的内部原型属性，它是可写的（可以被重写）  </li>
<li><code>instanceof</code> ：JavaScript操作符，会在原型链中的构造器中搜索，找到则返回 <code>true</code> ，否则返回 <code>false</code> （常用于判断某一个对象是否是某个构造器或者其父类构造器的实例）  </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line"><span class="keyword">typeof</span> arr;   <span class="comment">// return "object"</span></div><div class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// true</span></div><div class="line">arr.constructor();  <span class="comment">// []</span></div></pre></td></tr></table></figure>
<h2 id="学会使用自调用函数"><a href="#学会使用自调用函数" class="headerlink" title="学会使用自调用函数"></a>学会使用自调用函数</h2><p>函数在创建之后直接自动执行，通常称之为自调用匿名函数（Self-Invoked Anonymous Function）或直接调用函数表达式（Immediately Invoked Function Expression ）。比如，  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// some private code that will be executed automatically</span></div><div class="line">&#125;)();</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> result = a+b;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;)(<span class="number">10</span>,<span class="number">20</span>);</div></pre></td></tr></table></figure>
<h2 id="随机从数组中取出一个元素"><a href="#随机从数组中取出一个元素" class="headerlink" title="随机从数组中取出一个元素"></a>随机从数组中取出一个元素</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> items = [<span class="number">12</span>, <span class="number">548</span> , <span class="string">'a'</span> , <span class="number">2</span> , <span class="number">5478</span> , <span class="string">'foo'</span> , <span class="number">8852</span>, , <span class="string">'Doe'</span> , <span class="number">2145</span> , <span class="number">119</span>];</div><div class="line"><span class="keyword">var</span> randomItem = items[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * items.length)];</div></pre></td></tr></table></figure>
<h2 id="从一个指定的范围中取出一个随机数"><a href="#从一个指定的范围中取出一个随机数" class="headerlink" title="从一个指定的范围中取出一个随机数"></a>从一个指定的范围中取出一个随机数</h2><p>这个功能在生成测试用的假数据时特别有用。比如取一个指定范围内的工资数。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</div></pre></td></tr></table></figure>
<h2 id="生成一个从0开始到指定数字的序列"><a href="#生成一个从0开始到指定数字的序列" class="headerlink" title="生成一个从0开始到指定数字的序列"></a>生成一个从0开始到指定数字的序列</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> numbersArray = [] , max = <span class="number">100</span>;</div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">1</span>; numbersArray.push(i++) &lt; max;);  <span class="comment">// numbers = [1,2,3 ... 100]</span></div></pre></td></tr></table></figure>
<h2 id="生成一个随机的字母数字序列"><a href="#生成一个随机的字母数字序列" class="headerlink" title="生成一个随机的字母数字序列"></a>生成一个随机的字母数字序列</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRandomAlphaNum</span>(<span class="params">len</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> rdmString = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span>( ;rdmString.length &lt; len; rdmString  += <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>));</div><div class="line">        <span class="keyword">return</span>  rdmString.substr(<span class="number">0</span>, len);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>译者注</p>
<p><code>toString()</code> 方法可以接受一个参数表示数字进制。而36进制刚好可以使用a-z和0-9这些字符。所以此方法可以用于生成简单的随机串。</p>
<h2 id="打乱一个数字数组的顺序"><a href="#打乱一个数字数组的顺序" class="headerlink" title="打乱一个数字数组的顺序"></a>打乱一个数字数组的顺序</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , <span class="number">-215</span> , <span class="number">228</span> , <span class="number">400</span> , <span class="number">122205</span>, <span class="number">-85411</span>];</div><div class="line">numbers = numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>&#125;);</div><div class="line"><span class="comment">/* the array numbers will be equal for example to [120, 5, 228, -215, 400, 458, -85411, 122205]  */</span></div></pre></td></tr></table></figure>
<p>这里采用了原生的排序函数 <code>sort()</code> ，此外我们还可以使用专门的工具库来得到这一目的。  </p>
<h2 id="字符串去空格"><a href="#字符串去空格" class="headerlink" title="字符串去空格"></a>字符串去空格</h2><p>像Java、C#、PHP这些语言都内置了 <code>trim()</code> 功能函数用于字符串去空格。但是Javascript没有这个内置方法。可以通过下面的方法来得到此目的，  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">""</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>不过，在新的Javascript引擎中，已经内置支持了这个功能。  </p>
<h2 id="将一个数组追加到另一个数组中"><a href="#将一个数组追加到另一个数组中" class="headerlink" title="将一个数组追加到另一个数组中"></a>将一个数组追加到另一个数组中</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> array1 = [<span class="number">12</span> , <span class="string">"foo"</span> , &#123;name <span class="string">"Joe"</span>&#125; , <span class="number">-2458</span>];</div><div class="line"><span class="keyword">var</span> array2 = [<span class="string">"Doe"</span> , <span class="number">555</span> , <span class="number">100</span>];</div><div class="line"><span class="built_in">Array</span>.prototype.push.apply(array1, array2);</div><div class="line"><span class="comment">/* array1 值为  [12 , "foo" , &#123;name "Joe"&#125; , -2458 , "Doe" , 555 , 100] */</span></div></pre></td></tr></table></figure>
<h2 id="将-argruments-转换成数组"><a href="#将-argruments-转换成数组" class="headerlink" title="将 argruments 转换成数组"></a>将 <code>argruments</code> 转换成数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> argArray = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div></pre></td></tr></table></figure>
<h2 id="检验一个参数是否为数字"><a href="#检验一个参数是否为数字" class="headerlink" title="检验一个参数是否为数字"></a>检验一个参数是否为数字</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> !<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(n)) &amp;&amp; <span class="built_in">isFinite</span>(n);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="检验一个参数是否为数组"><a href="#检验一个参数是否为数组" class="headerlink" title="检验一个参数是否为数组"></a>检验一个参数是否为数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果 <code>toString()</code> 被重写过的话，上面的方法就不行了。此时我们可以使用下面的方法，  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">Array</span>.isArray(obj); <span class="comment">// its a new Array method</span></div></pre></td></tr></table></figure>
<p>如果在浏览器中没有使用iframe，还可以用 <code>instanceof</code> ，但如果上下文太复杂，也有可能出错。比如，  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> myFrame = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line"><span class="built_in">document</span>.body.appendChild(myFrame);</div><div class="line"></div><div class="line"><span class="keyword">var</span> myArray = <span class="built_in">window</span>.frames[<span class="built_in">window</span>.frames.length<span class="number">-1</span>].Array;</div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> myArray(a,b,<span class="number">10</span>); <span class="comment">// [a,b,10]</span></div><div class="line"></div><div class="line"><span class="comment">// myArray 的构造器已经丢失，instanceof 的结果将不正常</span></div><div class="line"><span class="comment">// 不同iframe中的构造器是不能共享的</span></div><div class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h2 id="取出一个数组中的最大值和最小值"><a href="#取出一个数组中的最大值和最小值" class="headerlink" title="取出一个数组中的最大值和最小值"></a>取出一个数组中的最大值和最小值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , <span class="number">-215</span> , <span class="number">228</span> , <span class="number">400</span> , <span class="number">122205</span>, <span class="number">-85411</span>];</div><div class="line"><span class="keyword">var</span> maxInNumbers = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, numbers);</div><div class="line"><span class="keyword">var</span> minInNumbers = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, numbers);</div></pre></td></tr></table></figure>
<h2 id="清空一个数组"><a href="#清空一个数组" class="headerlink" title="清空一个数组"></a>清空一个数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [<span class="number">12</span> , <span class="number">222</span> , <span class="number">1000</span> ];  </div><div class="line">myArray.length = <span class="number">0</span>; <span class="comment">// myArray will be equal to [].</span></div></pre></td></tr></table></figure>
<h2 id="不用使用-delete-关键字来移除一个数组元素"><a href="#不用使用-delete-关键字来移除一个数组元素" class="headerlink" title="不用使用 delete 关键字来移除一个数组元素"></a>不用使用 delete 关键字来移除一个数组元素</h2><p>应该使用 <code>splice</code> 方法而不是 <code>delete</code> 来移除一个数组元素。对一个数组元素使用 <code>delete</code> 会让这个数组元素的值变为 <code>undefined</code> ，并没有将这个数组元素给删除掉。  </p>
<p>错误的用法，  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> items = [<span class="number">12</span>, <span class="number">548</span> ,<span class="string">'a'</span> , <span class="number">2</span> , <span class="number">5478</span> , <span class="string">'foo'</span> , <span class="number">8852</span>, , <span class="string">'Doe'</span> ,<span class="number">2154</span> , <span class="number">119</span> ];</div><div class="line">items.length; <span class="comment">// return 11</span></div><div class="line"><span class="keyword">delete</span> items[<span class="number">3</span>]; <span class="comment">// return true</span></div><div class="line">items.length; <span class="comment">// return 11</span></div><div class="line"><span class="comment">/* items will be equal to [12, 548, "a", undefined × 1, 5478, "foo", 8852, undefined × 1, "Doe", 2154,       119]   */</span></div></pre></td></tr></table></figure>
<p>正确的用法，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> items = [<span class="number">12</span>, <span class="number">548</span> ,<span class="string">'a'</span> , <span class="number">2</span> , <span class="number">5478</span> , <span class="string">'foo'</span> , <span class="number">8852</span>, , <span class="string">'Doe'</span> ,<span class="number">2154</span> , <span class="number">119</span> ];</div><div class="line">items.length; <span class="comment">// return 11</span></div><div class="line">items.splice(<span class="number">3</span>,<span class="number">1</span>) ;</div><div class="line">items.length; <span class="comment">// return 10</span></div><div class="line"><span class="comment">/* items 结果为 [12, 548, "a", 5478, "foo", 8852, undefined × 1, "Doe", 2154, 119] */</span></div></pre></td></tr></table></figure>
<p>注意，要想移除一个对象的属性，应该采用 <code>delete</code> 方法。  </p>
<h2 id="可以通过操作数组长度-length-来截断一个数组"><a href="#可以通过操作数组长度-length-来截断一个数组" class="headerlink" title="可以通过操作数组长度 length 来截断一个数组"></a>可以通过操作数组长度 length 来截断一个数组</h2><p>与前面那个使用 <code>length</code> 清空数组的示例类似，我们可以使用 <code>length</code> 来截断一个数组。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [<span class="number">12</span> , <span class="number">222</span> , <span class="number">1000</span> , <span class="number">124</span> , <span class="number">98</span> , <span class="number">10</span> ];  </div><div class="line">myArray.length = <span class="number">4</span>; <span class="comment">// myArray will be equal to [12 , 222 , 1000 , 124].</span></div></pre></td></tr></table></figure>
<p>除此之外，如果我们使用一个更大的值去重写 <code>length</code> ，那么数组的长度将会改变，同时会用 <code>undefined</code> 填充新增的数组元素。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">myArray.length = <span class="number">10</span>; <span class="comment">// the new array length is 10</span></div><div class="line">myArray[myArray.length - <span class="number">1</span>] ; <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<h2 id="在条件中使用-amp-amp-及-进行短语判断"><a href="#在条件中使用-amp-amp-及-进行短语判断" class="headerlink" title="在条件中使用 &amp;&amp; 及 || 进行短语判断"></a>在条件中使用 <code>&amp;&amp;</code> 及 <code>||</code> 进行短语判断</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="number">10</span>;  </div><div class="line">foo == <span class="number">10</span> &amp;&amp; doSomething(); <span class="comment">// is the same thing as if (foo == 10) doSomething();</span></div><div class="line">foo == <span class="number">5</span> || doSomething(); <span class="comment">// is the same thing as if (foo != 5) doSomething();</span></div></pre></td></tr></table></figure>
<p><code>||</code> 还用于给函数参数设置默认值，比如  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1</span>)</span>&#123;</div><div class="line">    arg1 = arg1 || <span class="number">10</span>; <span class="comment">// arg1 will have 10 as a default value if it’s not already set</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用-map-对数组进行遍历操作"><a href="#使用-map-对数组进行遍历操作" class="headerlink" title="使用 map() 对数组进行遍历操作"></a>使用 <code>map()</code> 对数组进行遍历操作</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> squares = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;  </div><div class="line">    <span class="keyword">return</span> val * val;  </div><div class="line">&#125;);</div><div class="line"><span class="comment">// squares will be equal to [1, 4, 9, 16]</span></div></pre></td></tr></table></figure>
<h2 id="保留指定位数的小数点"><a href="#保留指定位数的小数点" class="headerlink" title="保留指定位数的小数点"></a>保留指定位数的小数点</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">2.443242342</span>;</div><div class="line">num = num.toFixed(<span class="number">4</span>);  <span class="comment">// num will be equal to 2.4432</span></div></pre></td></tr></table></figure>
<p>注意， <code>toFixed()</code> 方法返回的是字符串而不是一个数字。  </p>
<h2 id="浮点数计算问题"><a href="#浮点数计算问题" class="headerlink" title="浮点数计算问题"></a>浮点数计算问题</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// is false</span></div><div class="line"><span class="number">9007199254740992</span> + <span class="number">1</span> <span class="comment">// is equal to 9007199254740992  </span></div><div class="line"><span class="number">9007199254740992</span> + <span class="number">2</span> <span class="comment">// is equal to 9007199254740994</span></div></pre></td></tr></table></figure>
<p>为什么呢？因为0.1+0.2等于0.30000000000000004。JavaScript的数字都遵循IEEE 754标准构建，在内部都是64位浮点小数表示，具体可以参阅 <a href="http://www.2ality.com/2012/04/number-encoding.html">这篇文章</a> 。  </p>
<p>另外，你也可以使用 <code>toFixed()</code> 或者 <code>toPrecision()</code> 来解决这个问题。  </p>
<p>译者注  </p>
<p>关于这个问题，博主也有一篇相关的文章， <a href="http://blog.gejiawen.com/2015/08/11/javascript-float-count-precision/">Javascript中浮点数的计算精度问题</a> 。  </p>
<h2 id="使用-for-in-来遍历对象的属性"><a href="#使用-for-in-来遍历对象的属性" class="headerlink" title="使用 for...in 来遍历对象的属性"></a>使用 <code>for...in</code> 来遍历对象的属性</h2><p>下面的代码片段使用 <code>for...in</code> 来遍历对象属性，可以防止遍历到对象原型链上的属性。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> object) &#123;  </div><div class="line">    <span class="keyword">if</span> (object.hasOwnProperty(name)) &#123;</div><div class="line">        <span class="comment">// do something with name                    </span></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> b = ( a++, <span class="number">99</span> );</div><div class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// a will be equal to 1</span></div><div class="line"><span class="built_in">console</span>.log(b);  <span class="comment">// b is equal to 99</span></div></pre></td></tr></table></figure>
<h2 id="缓存临时变量用于避免再次计算或者查询"><a href="#缓存临时变量用于避免再次计算或者查询" class="headerlink" title="缓存临时变量用于避免再次计算或者查询"></a>缓存临时变量用于避免再次计算或者查询</h2><p>在使用jquery时，我们可以临时缓存整个jq对象，比如  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> navright = <span class="built_in">document</span>.querySelector(<span class="string">'#right'</span>);</div><div class="line"><span class="keyword">var</span> navleft = <span class="built_in">document</span>.querySelector(<span class="string">'#left'</span>);</div><div class="line"><span class="keyword">var</span> navup = <span class="built_in">document</span>.querySelector(<span class="string">'#up'</span>);</div><div class="line"><span class="keyword">var</span> navdown = <span class="built_in">document</span>.querySelector(<span class="string">'#down'</span>);</div></pre></td></tr></table></figure>
<h2 id="提前检查传入-isFinite-的参数"><a href="#提前检查传入-isFinite-的参数" class="headerlink" title="提前检查传入 isFinite() 的参数"></a>提前检查传入 <code>isFinite()</code> 的参数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">isFinite</span>(<span class="number">0</span>/<span class="number">0</span>) ; <span class="comment">// false</span></div><div class="line"><span class="built_in">isFinite</span>(<span class="string">"foo"</span>); <span class="comment">// false</span></div><div class="line"><span class="built_in">isFinite</span>(<span class="string">"10"</span>); <span class="comment">// true</span></div><div class="line"><span class="built_in">isFinite</span>(<span class="number">10</span>);   <span class="comment">// true</span></div><div class="line"><span class="built_in">isFinite</span>(<span class="literal">undefined</span>);  <span class="comment">// false</span></div><div class="line"><span class="built_in">isFinite</span>();   <span class="comment">// false</span></div><div class="line"><span class="built_in">isFinite</span>(<span class="literal">null</span>);  <span class="comment">// true  注意这里！！！</span></div></pre></td></tr></table></figure>
<h2 id="避免对数组进行负值索引"><a href="#避免对数组进行负值索引" class="headerlink" title="避免对数组进行负值索引"></a>避免对数组进行负值索引</h2><figure class="highlight"><table><tr><td class="code"><pre><div class="line">var numbersArray = [1,2,3,4,5];</div><div class="line">var from = numbersArray.indexOf("foo") ;  // from is equal to -1</div><div class="line">numbersArray.splice(from,2);    // will return [5]</div><div class="line">``</div><div class="line">注意传给 `splice` 的索引参数不要是负数，当是负数时，会从数组结尾处删除元素。  </div><div class="line"></div><div class="line">## 使用 JSON 来进行序列化和反序列化  </div><div class="line"></div><div class="line">```javascript</div><div class="line">var person = &#123;name :'Saad', age : 26, department : &#123;ID : 15, name : "R&amp;D"&#125; &#125;;</div><div class="line">var stringFromPerson = JSON.stringify(person);</div><div class="line">/* stringFromPerson is equal to "&#123;"name":"Saad","age":26,"department":&#123;"ID":15,"name":"R&amp;D"&#125;&#125;"   */</div><div class="line">var personFromString = JSON.parse(stringFromPerson);  </div><div class="line">/* personFromString is equal to person object  */</div></pre></td></tr></table></figure>
<h2 id="避免使用-eval-和函数构造器"><a href="#避免使用-eval-和函数构造器" class="headerlink" title="避免使用 eval() 和函数构造器"></a>避免使用 eval() 和函数构造器</h2><p><code>eval()</code> 和函数构造器（ <code>Function consturctor</code>）的开销都比较大，每次调用JavaScript引擎都要将源代码转换为可执行的代码。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> func1 = <span class="keyword">new</span> <span class="built_in">Function</span>(functionCode);</div><div class="line"><span class="keyword">var</span> func2 = <span class="built_in">eval</span>(functionCode);</div></pre></td></tr></table></figure>
<h2 id="避免使用-with"><a href="#避免使用-with" class="headerlink" title="避免使用 with()"></a>避免使用 <code>with()</code></h2><p>使用 <code>with()</code> 语法会将变量注入到全局变量中。因此，如果有重名的变量，就会发生覆盖或者重写的问题。  </p>
<h2 id="避免使用-for-in-遍历数组"><a href="#避免使用-for-in-遍历数组" class="headerlink" title="避免使用 for...in 遍历数组"></a>避免使用 <code>for...in</code> 遍历数组</h2><p>错误的用法，  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;  </div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arrayNumbers) &#123;  </div><div class="line">    sum += arrayNumbers[i];  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更好的做法，  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;  </div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arrayNumbers.length; i &lt; len; i++) &#123;  </div><div class="line">    sum += arrayNumbers[i];  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除此之外， <code>i</code> 和 <code>len</code> 是在 <code>for</code> 循环的第一个声明中，二者只会初始化一次，这要比下面这种写法快：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrayNumbers.length; i++)</div></pre></td></tr></table></figure>
<p>为什么呢？因为数组 <code>arrayNumbers</code> 的长度在每次遍历的时候都会计算一次，这就造成了不必要的消耗。  </p>
<p>注意，这个问题其实在最新的Javascript引擎中已经被修复了。  </p>
<h2 id="给-setTimeout-及-setInterval-传递函数而不是字符串更好"><a href="#给-setTimeout-及-setInterval-传递函数而不是字符串更好" class="headerlink" title="给 setTimeout() 及 setInterval() 传递函数而不是字符串更好"></a>给 <code>setTimeout()</code> 及 <code>setInterval()</code> 传递函数而不是字符串更好</h2><p>如果你给 <code>setTimeout()</code> 或者 <code>setInterval()</code> 传递字符串的话，那么它内部的执行机制其实是和 <code>eval()</code> 是一样的，这样会比较慢。  </p>
<p>错误的用法，  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">setInterval(<span class="string">'doSomethingPeriodically()'</span>, <span class="number">1000</span>);  </div><div class="line">setTimeout(<span class="string">'doSomethingAfterFiveSeconds()'</span>, <span class="number">5000</span>);</div></pre></td></tr></table></figure>
<p>正确的用法，  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">setInterval(doSomethingPeriodically, <span class="number">1000</span>);  </div><div class="line">setTimeout(doSomethingAfterFiveSeconds, <span class="number">5000</span>);</div></pre></td></tr></table></figure>
<h2 id="使用-switch-case-来代替一坨-if-else"><a href="#使用-switch-case-来代替一坨-if-else" class="headerlink" title="使用 switch/case 来代替一坨 if/else"></a>使用 <code>switch/case</code> 来代替一坨 <code>if/else</code></h2><p>当判断有超过两个分支的时候使用 <code>switch/case</code> 要更快一些，而且也更优雅，更利于代码的组织，当然，如果有超过10个分支，就不要使用 <code>switch/case</code> 了。  </p>
<h2 id="在-switch-case-中使用数字范围进行分界"><a href="#在-switch-case-中使用数字范围进行分界" class="headerlink" title="在 switch/case 中使用数字范围进行分界"></a>在 <code>switch/case</code> 中使用数字范围进行分界</h2><p>其实 <code>switch/case</code> 中的 <code>case</code> 条件，还可以这样写：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCategory</span>(<span class="params">age</span>) </span>&#123;  </div><div class="line">    <span class="keyword">var</span> category = <span class="string">""</span>;  </div><div class="line">    <span class="keyword">switch</span> (<span class="literal">true</span>) &#123;  </div><div class="line">        <span class="keyword">case</span> <span class="built_in">isNaN</span>(age):  </div><div class="line">            category = <span class="string">"not an age"</span>;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> (age &gt;= <span class="number">50</span>):  </div><div class="line">            category = <span class="string">"Old"</span>;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> (age &lt;= <span class="number">20</span>):  </div><div class="line">            category = <span class="string">"Baby"</span>;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">default</span>:  </div><div class="line">            category = <span class="string">"Young"</span>;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">    &#125;;  </div><div class="line">    <span class="keyword">return</span> category;  </div><div class="line">&#125;  </div><div class="line">getCategory(<span class="number">5</span>);  <span class="comment">// will return "Baby"</span></div></pre></td></tr></table></figure>
<h2 id="为创建的对象指定原型"><a href="#为创建的对象指定原型" class="headerlink" title="为创建的对象指定原型"></a>为创建的对象指定原型</h2><p>下面的示例演示了可以给定对象作为参数，来创建以此为原型的新对象：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">object</span>) </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">OneShotConstructor</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    OneShotConstructor.prototype = object;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OneShotConstructor();</div><div class="line">&#125;</div><div class="line">clone(<span class="built_in">Array</span>).prototype ;  <span class="comment">// []</span></div></pre></td></tr></table></figure>
<h2 id="html转义函数"><a href="#html转义函数" class="headerlink" title="html转义函数"></a>html转义函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeHTML</span>(<span class="params">text</span>) </span>&#123;  </div><div class="line">    <span class="keyword">var</span> replacements= &#123;<span class="string">'&lt;'</span>: <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>: <span class="string">'&gt;'</span>, <span class="string">'&amp;'</span>: <span class="string">'&amp;'</span>, <span class="string">'"'</span>: <span class="string">'"'</span>&#125;;                      </div><div class="line">    <span class="keyword">return</span> text.replace(<span class="regexp">/[&lt;&gt;&amp;"]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">character</span>) </span>&#123;  </div><div class="line">        <span class="keyword">return</span> replacements[character];  </div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="不要在循环中使用-try-catch-finally"><a href="#不要在循环中使用-try-catch-finally" class="headerlink" title="不要在循环中使用 try...catch...finally"></a>不要在循环中使用 <code>try...catch...finally</code></h2><p><code>try...catch...finally</code> 在捕获一个异常时，会创建一个运行时环境的子作用域。而异常变量的生命周期仅限在这个运行时的子作用域。  </p>
<p>译者注  </p>
<p>这里我们可以使用闭包来保存这个运行时的异常变量。  </p>
<p>错误的用法  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> object = [<span class="string">'foo'</span>, <span class="string">'bar'</span>], i;  </div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = object.length; i &lt;len; i++) &#123;  </div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">        <span class="comment">// do something that throws an exception</span></div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;   </div><div class="line">        <span class="comment">// handle exception  </span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正确的用法  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> object = [<span class="string">'foo'</span>, <span class="string">'bar'</span>], i;  </div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, len = object.length; i &lt;len; i++) &#123;  </div><div class="line">        <span class="comment">// do something that throws an exception</span></div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;   </div><div class="line">    <span class="comment">// handle exception  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用-XMLHttpRequests-时注意设置超时参数"><a href="#使用-XMLHttpRequests-时注意设置超时参数" class="headerlink" title="使用 XMLHttpRequests 时注意设置超时参数"></a>使用 <code>XMLHttpRequests</code> 时注意设置超时参数</h2><p>如果一个ajax请求长时间没有响应，我们应该中止请求。否则浏览器将会一直等待。我们可以使用 <code>setTimeout()</code> 来做一个定时器，  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest ();</div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.readyState == <span class="number">4</span>) &#123;  </div><div class="line">        clearTimeout(timeout);  </div><div class="line">        <span class="comment">// do something with response data</span></div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">var</span> timeout = setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">    xhr.abort(); <span class="comment">// call error callback  </span></div><div class="line">&#125;, <span class="number">60</span>*<span class="number">1000</span> <span class="comment">/* timeout after a minute */</span> );</div><div class="line">xhr.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);  </div><div class="line">xhr.send();</div></pre></td></tr></table></figure>
<p>除此之外，我们应该避免同时发送多个 同步的 ajax请求。  </p>
<h2 id="处理websocket超时"><a href="#处理websocket超时" class="headerlink" title="处理websocket超时"></a>处理websocket超时</h2><p>一般地，WebSocket连接创建后，如果30秒内没有任何活动服务器端会对连接进行超时处理，防火墙也可以对单位周期内没有活动的连接进行超时处理。  </p>
<p>为了防止超时中断，你需要每隔一段时间发送一个心跳数据（空字符串）以保持websocket连接。下面的两个方法一个用于周期的发送心跳数据保持连接，一个是取消心跳数据包。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> timerID = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">keepAlive</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> timeout = <span class="number">15000</span>;</div><div class="line">    <span class="keyword">if</span> (webSocket.readyState == webSocket.OPEN) &#123;</div><div class="line">        webSocket.send(<span class="string">''</span>);</div><div class="line">    &#125;</div><div class="line">    timerId = setTimeout(keepAlive, timeout);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelKeepAlive</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (timerId) &#123;</div><div class="line">        cancelTimeout(timerId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>keepAlive()</code> 方法应该被添加在 <code>webSOcket</code> 连接的 <code>onOpen()</code> 方法的最后，而 <code>cancelKeepAlive()</code> 添加在 <code>onClose()</code> 方法的最后。  </p>
<h2 id="记住：原生操作肯定比函数调用要效率高"><a href="#记住：原生操作肯定比函数调用要效率高" class="headerlink" title="记住：原生操作肯定比函数调用要效率高"></a>记住：原生操作肯定比函数调用要效率高</h2><p>比如，  </p>
<p>错误的用法，  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min(a,b);</div><div class="line">A.push(v);</div></pre></td></tr></table></figure>
<p>正确的用法，  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> min = a &lt; b ? a : b;</div><div class="line">A[A.length] = v;</div></pre></td></tr></table></figure>
<h2 id="编码时注意保持代码的优雅格式，上生产环境前做一些压缩工作。"><a href="#编码时注意保持代码的优雅格式，上生产环境前做一些压缩工作。" class="headerlink" title="编码时注意保持代码的优雅格式，上生产环境前做一些压缩工作。"></a>编码时注意保持代码的优雅格式，上生产环境前做一些压缩工作。</h2><h2 id="Javascript是一门很吊的语言，这里还有很多资源，"><a href="#Javascript是一门很吊的语言，这里还有很多资源，" class="headerlink" title="Javascript是一门很吊的语言，这里还有很多资源，"></a>Javascript是一门很吊的语言，这里还有很多资源，</h2><ul>
<li>Code Academy JavaScript tracks: <a href="http://www.codecademy.com/tracks/javascript">http://www.codecademy.com/tracks/javascript</a>  </li>
<li>Eloquent JavaScript by Marjin Haverbeke: <a href="http://eloquentjavascript.net/">http://eloquentjavascript.net/</a>  </li>
<li>Advanced JavaScript by John Resig: <a href="http://ejohn.org/apps/learn/">http://ejohn.org/apps/learn/</a>  </li>
</ul>
<hr>
<p>本文链接：<a href="/2015/11/09/javascript_45_black_tech/">[转]Javascript实用黑科技45条</a>  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BFC的概念及应用与原理]]></title>
      <url>http://koala.ink/2015/11/03/html_bfc/</url>
      <content type="html"><![CDATA[<p>BFC这个概念应该都不陌生，网上也有很多的文章介绍BFC概念以及用法。看了一些关于BFC的文章，下面就对BFC的概念以及用法做个总结。  </p>
<h2 id="Formatting-context"><a href="#Formatting-context" class="headerlink" title="Formatting context"></a>Formatting context</h2><p>在理解BFC之前，先理解什么是Formatting context<br>Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。<br><a id="more"></a></p>
<h2 id="Block-fomatting-context"><a href="#Block-fomatting-context" class="headerlink" title="Block fomatting context"></a>Block fomatting context</h2><p>首先先介绍一下BFC概念的定义，以下是摘抄自<a href="http://www.w3.org/TR/CSS2/visuren.html#block-formatting">W3C对BFC的定义</a>：  </p>
<blockquote>
<p>Floats, absolutely positioned elements, block containers (such as inline-blocks , table-cells , and table-captions ) that are not block boxes, and block boxes with ‘overflow ‘ other than ‘visible ‘ (except when that value has been propagated to the viewport) establish new block formatting contexts for their contents.</p>
<p>In a block formatting context, boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the ‘margin ‘ properties. Vertical margins between adjacent block-level boxes in a block formatting context collapse.</p>
<p>In a block formatting context, each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box’s line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).</p>
</blockquote>
<p>翻译一下上面的描述：  </p>
<blockquote>
<p>浮动元素、绝对定位元素，非块元素的块级容器（如inline-blocks ,table-cells ,和table-captions ），以及overflow 属性值不为visible 的块元素（除非这个值已经传播到视窗上），这些元素建立新的块格式化上下文的内容（BFC）。  </p>
<p>在一个块格式化上下文中，盒子从包含块的顶部开始，垂直往下依次排布，兄弟盒子间的垂直距离由他们的margin决定。垂直方向相邻的两个块元素的margin 会重叠。  </p>
<p>在一个块格式化上下文中，每个盒子的左外边缘与包含块的左边缘接触（对于从右往左的格式，则是右外边缘与包含块的右边缘接触），即使是浮动元素也是如此（尽管一个盒子会由于浮动而缩小），除非这个盒子建立了新的块格式化上下文（在这种情况下盒子本身可能会因为浮动而变窄）。  </p>
</blockquote>
<hr>
<p>到这里介绍完W3C对BFC的定义，概念的描述比较不好理解，做几点概括  </p>
<h3 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h3><p>BFC全称是Block Formatting Context，直译就是块格式化上下文，它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。  </p>
<h3 id="BFC的布局规则"><a href="#BFC的布局规则" class="headerlink" title="BFC的布局规则"></a>BFC的布局规则</h3><ol>
<li>内部的Box会在垂直方向，一个接一个地放置。</li>
<li>Box垂直方向的距离由margin 决定。属于同一个BFC的两个相邻Box的margin 会发生重叠</li>
<li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此，除非这个盒子建立了新的块格式化上下文。</li>
<li>BFC的区域不会与float box重叠。</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>
<li>计算BFC的高度时，浮动元素也参与计算</li>
</ol>
<h3 id="会建立BFC的元素"><a href="#会建立BFC的元素" class="headerlink" title="会建立BFC的元素"></a>会建立BFC的元素</h3><ol>
<li>根元素</li>
<li>float 属性不为none</li>
<li>position 属性为absolute 或fixed</li>
<li>display 属性为inline-block ,table-cell ,table-caption ,flex ,inline-flex</li>
<li>overflow 属性不为visible</li>
</ol>
<p>有些文章中说display: table; 也能触发BFC，需要注意的是，display:table; 本身并不会创建BFC，但是它会产生<a href="http://www.w3.org/TR/CSS21/tables.html#anonymous-boxes">匿名框(anonymous boxes)</a>，而匿名框中的display:table-cell; 可以创建新的BFC，换句话说，触发块级格式化上下文的是匿名框，而不是display:table; 。所以通过display:table;和display:table-cell; 创建的BFC效果是不一样的。  </p>
<h3 id="BFC的应用"><a href="#BFC的应用" class="headerlink" title="BFC的应用"></a>BFC的应用</h3><h4 id="解决margin重叠问题"><a href="#解决margin重叠问题" class="headerlink" title="解决margin重叠问题"></a>解决margin重叠问题</h4><p>在实践中，总会遇到相邻块元素的margin 会发生重叠的现象，这个从BFC布局的规则中的第二点可以找到原因。比如两个相邻的<code>&lt;p&gt;</code>标签，他们都有<code>margin: 50px auto;</code>，那么他们垂直方向上的间距只有50px ，因为第一个<code>&lt;p&gt;</code>的margin-bottom 与第二个<code>&lt;p&gt;</code>的margin-top 发生了重叠，因而只留下了50px 的间距。  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin: 50px auto;background-color: red;"</span>&gt;</span>first<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin: 50px auto;background-color: green;"</span>&gt;</span>second<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/posts_assets/html_bfc/DL1I5ZP2W646G0OWGZXLF.png" alt="截图">  </p>
<p>要解决这种问题，只需要让其中让一个<code>&lt;p&gt;</code>外部包裹一个<code>&lt;div&gt;</code>，并且触发这个<code>&lt;div&gt;</code>建立一个BFC，这样两个<code>&lt;p&gt;</code>不属于同一个BFC,他们的margin就不会重叠。<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin: 50px auto;background-color: red;"</span>&gt;</span>first<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"overflow: auto;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin: 50px auto;background-color: green;"</span>&gt;</span>second<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="/posts_assets/html_bfc/P-NDUYT657KS53FV3_XO.png" alt="截图">  </p>
<h4 id="实现两栏布局"><a href="#实现两栏布局" class="headerlink" title="实现两栏布局"></a>实现两栏布局</h4><p>对于常见的两栏布局问题，要求要让一栏定宽，另一栏自适应宽度，也可以利用BFC的特性来实现。<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></div><div class="line">    <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>&#123;</div><div class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.container</span> &#123;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.left</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">        <span class="attribute">float</span>: left;</div><div class="line">        <span class="attribute">background-color</span>: red;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.right</span> &#123;</div><div class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line">        <span class="attribute">background-color</span>: green;</div><div class="line">    &#125;</div><div class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>red is left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>green is right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="/posts_assets/html_bfc/I516QBYDU6-C38VMX0JIMW.png" alt="截图">  </p>
<p>可以发现，此时我们设置左栏浮动，右栏的内容依然从包含块(div.container )的左边缘开始，所以绿色部分也占据了左边栏底下部分，根据BFC布局规则第三、四条，我们可以触发右边<code>&lt;div&gt;</code>建立新的BFC，这样右边<code>&lt;div&gt;</code>就不会与左边栏重叠，形成两栏布局。代码只需要在<code>.right</code>中添加一句<code>overflow: auto;</code>即可出现如下图中的效果。<br><img src="/posts_assets/html_bfc/3Q90B6R86Y7AJ9XIGC.png" alt="截图">  </p>
<h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p>常见的浮动造成的问题，如高度坍塌现象，就是因为浮动元素脱离了文档流，包含块计算高度时没有计算浮动元素的高度，导致包含块的高度比实际内容的高度要小。<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></div><div class="line">    <span class="selector-class">.wrapper</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">450px</span>;</div><div class="line">        <span class="attribute">border</span>: <span class="number">2px</span> solid red;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.box</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">        <span class="attribute">border</span>: <span class="number">2px</span> solid green;</div><div class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</div><div class="line">    &#125;</div><div class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"float: left;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"float: left;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>代码的运行效果如图：<br><img src="/posts_assets/html_bfc/NAU4K6CQ7I5NH1YN4B.png" alt="截图">  </p>
<p>图中可以明显看见，包含块div.wrapper 的高度为零（红色边框，由于高度为零所以边框重叠了显示成一条直线），这种效果明显不是我们想要的。要解决这种现象，就可以利用BFC布局规则的第六条：计算BFC的高度时，浮动元素也参与计算。所以我们只需要触发包含块div.wrapper 生成BFC即可。<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></div><div class="line">    <span class="selector-class">.wrapper</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">450px</span>;</div><div class="line">        <span class="attribute">border</span>: <span class="number">2px</span> solid red;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.box</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">        <span class="attribute">border</span>: <span class="number">2px</span> solid green;</div><div class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</div><div class="line">    &#125;</div><div class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span> <span class="attr">style</span>=<span class="string">"overflow: auto;*zoom: 1;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"float: left;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"float: left;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>代码中的*zoom: 1; 是为了在IE 下触发hasLayout ，这时的运行效果如下图：<br><img src="/posts_assets/html_bfc/IDRHGA_OMJVGEVOAC29T.png" alt="截图">  </p>
<p>这时的效果明显就跟我们预期想要的效果是一样的了，浮动被清楚了。更多关于清除浮动的方法，移步 <a href="/2015/11/03/css_clean_float/">清除浮动的常见方法与原理解析</a>。  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通俗地来说：创建了 BFC的元素就是一个独立的盒子，里面的子元素不会在布局上影响外面的元素，反之亦然，同时BFC任然属于文档中的普通流。至此你可能会联想到以前在实际应用中，可能经常会遇到一些布局上的问题，出现各种BUG，有时候只要加个<code>overflow: auto | hidden;</code>问题就解决了，屡试不爽，其中很有可能就是因为生成BFC对布局产生了影响。当然，也不是出现布局上的BUG一定是因为这个原因，但是也不妨一试，万一BUG就解决了呢。  </p>
<hr>
<p>参考文章：<a href="http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html">http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[清除浮动的常见方法与原理解析]]></title>
      <url>http://koala.ink/2015/11/03/css_clean_float/</url>
      <content type="html"><![CDATA[<p>在页面布局中，使用浮动(float )往往是不可避免的，尽管使用浮动后总可能会带来一系列的问题（如常见的“<strong>高度坍塌</strong>”），但是通过浮动能够方便我们的布局，因此，设置了浮动，我们总需要并也有必要去清除浮动。清除浮动的形式有很多种，但是总的概括起来就是两种类别：  </p>
<ol>
<li>在浮动元素之后添加空元素，并设置<code>style=&quot;clear:both;&quot;</code>  </li>
<li>在浮动元素的父元素设置overflow 或者display 属性为某些特定值  </li>
</ol>
<a id="more"></a>
<h2 id="清除浮动的方式"><a href="#清除浮动的方式" class="headerlink" title="清除浮动的方式"></a>清除浮动的方式</h2><p>以下将介绍一些常见的用来清除浮动的方式。</p>
<h3 id="额外空标签"><a href="#额外空标签" class="headerlink" title="额外空标签"></a>额外空标签</h3><p>这种方式是最简单易懂的，即在浮动元素的后面额外添加一个标签，并且设置样式的clear属性，代码如：<code>&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;</code> ，这里不一定要使用<code>&lt;div&gt;</code>标签，也可以使用其他任意的标签，也能起到清除浮动的效果。<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: left;"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: right;"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear: both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>优点</strong>：通俗易懂，易于掌握<br><strong>缺点</strong>：添加了额外无意义的标签，破坏了文档的结构，不易于后期的维护  </p>
<h3 id="br-标签"><a href="#br-标签" class="headerlink" title="br 标签"></a>br 标签</h3><p>这种方法与上面的第一种方法类似，也是添加额外标签，这里的标签是使用<code>&lt;br&gt;</code> ，<code>&lt;br&gt;</code>标签有一个clear属性，具有三种值，为：<code>left | right | all</code> ，不清楚这个属性的可以参考<a href="http://www.w3school.com.cn/tags/tag_br_prop_clear.asp"> w3school <br>标签的 clear属性</a>。清除浮动的代码如：<code>&lt;br clear=&quot;all&quot;&gt;</code><br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: left;"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: right;"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span> <span class="attr">clear</span>=<span class="string">"all"</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>优点</strong>：比第一种方法中使用空标签的语义性好<br><strong>缺点</strong>：同样破坏了文档的结构，不易于后期的维护  </p>
<h3 id="after伪元素"><a href="#after伪元素" class="headerlink" title="after伪元素"></a>after伪元素</h3><p>使用CSS 的伪元素after，这种方法的原理与上面介绍的类似。在浮动元素的父级元素定义after 伪元素，这个伪元素会生成在父元素内的最末尾处，通过这个伪元素来清除浮动，关键的CSS 代码还是<code>clear: both;</code> 。  </p>
<p>CSS代码如下：<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">.clearfix::after &#123;</div><div class="line">    content: " ";</div><div class="line">    display: block;</div><div class="line">    height: 0;</div><div class="line">    visibility: hidden;</div><div class="line">    clear: both;</div><div class="line">&#125;</div><div class="line">.clearfix &#123;</div><div class="line">    *zoom: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用如下：<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper clearfix"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: left;"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: right;"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中定义after为块元素并且设置<code>height: 0;</code> 避免其对文档正常布局造成影响，将其隐藏，然后就是设置清除浮动。zoom属性是因为IE6/7 不支持after ，故使用<code>zoom: 1;</code>来触发hasLayout 。<br><strong>优点</strong>:文档结构与语义化未被破坏，使用方便<br><strong>缺点</strong>:代码较多，定义了一个隐藏块元素来清除浮动  </p>
<h3 id="父元素浮动"><a href="#父元素浮动" class="headerlink" title="父元素浮动"></a>父元素浮动</h3><p>在浮动元素的父元素也设置浮动，这样能解决局部的浮动问题，但在实际使用中并不推荐用这种方法来清除浮动，因为这种通过设置浮动来清除浮动的方法，会将一些隐藏的浮动问题转移给父元素，可能导致你需要继续去解决父元素的浮动问题，直到<code>&lt;body&gt;</code>处才停止。<br><strong>优点</strong>:未添加任何元素来清除浮动，设置简单，代码量少<br><strong>缺点</strong>:问题转移，父元素浮动后可能导致父元素级别布局出现问题，需要一直往上解决问题  </p>
<h3 id="父元素display"><a href="#父元素display" class="headerlink" title="父元素display"></a>父元素display</h3><p>设置浮动元素的父元素display 属性为table。<br><strong>优点</strong>:不会引起结构与语义上的问题，代码简单<br><strong>缺点</strong>:元素的盒子模型改变，可能会导致其他的问题出现  </p>
<h3 id="父元素overflow"><a href="#父元素overflow" class="headerlink" title="父元素overflow"></a>父元素overflow</h3><p>设置浮动元素的父元素overflow属性值为hidden | auto 。在IE 下需要设置zoom: 1; 来触发 hasLayout 。<br><strong>优点</strong>:不会引起结构与语义上的问题，代码简单<br><strong>缺点</strong>:多个嵌套后，firefox 某些情况会造成内容全选；IE 中 mouseover  造成宽度改变时会出现最外层模块有滚动条等，firefox 早期版本会无故产生focus 等  </p>
<h2 id="清除浮动的原理"><a href="#清除浮动的原理" class="headerlink" title="清除浮动的原理"></a>清除浮动的原理</h2><p>以上列举的六种方法，主要分为两种类型：  </p>
<ol>
<li>在浮动元素之后添加空元素，并设置<code>style=&quot;clear:both;&quot;</code>  </li>
<li>在浮动元素的父元素设置overflow 或者display 属性为某些特定值  </li>
</ol>
<p>其中第一种类型容易理解，起作用的关键就是在于<code>clear: both;</code> 这句代码，将它放在浮动元素的后面清除浮动。<br>那第二种类型的原理是设置overflow 或display 属性的值为某些特定值时，触发父元素生成BFC(Block formatting context) ，而BFC 规定了其内部的Block-level Box 的布局规则，使得浮动被清除了。关于BFC 的概念如果不太清楚，可以看一下<a href="/2015/11/03/html_bfc/">BFC的概念及应用与原理</a>，这篇文章会有介绍BFC的概念以及一些用法。  </p>
<hr>
<p>参考文章：<a href="http://www.w3cfuns.com/article-1287-1.html">http://www.w3cfuns.com/article-1287-1.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]全是干货！移动HTML 5前端性能优化指南]]></title>
      <url>http://koala.ink/2015/10/25/h5_web_performance_optimization/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://isux.tencent.com/h5-performance.html">腾讯ISUX</a>  </p>
<hr>
<p><img src="/posts_assets/h5_web_performance_optimization/summary.png" alt="总揽">  </p>
<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol>
<li>PC优化手段在Mobile侧同样适用  </li>
<li>在Mobile侧我们提出三秒种渲染完成首屏指标  </li>
<li>基于第二点，首屏加载3秒完成或使用Loading  </li>
<li>基于联通3G网络平均338KB/s(2.71Mb/s），所以首屏资源不应超过1014KB  </li>
<li>Mobile侧因手机配置原因，除加载外渲染速度也是优化重点  </li>
<li>基于第五点，要合理处理代码减少渲染损耗  </li>
<li>基于第二、第五点，所有影响首屏加载和渲染的代码应在处理逻辑中后置  </li>
<li>加载完成后用户交互使用时也需注意性能  </li>
</ol>
<h2 id="加载优化"><a href="#加载优化" class="headerlink" title="加载优化"></a>加载优化</h2><p>加载过程是最为耗时的过程，可能会占到总耗时的80%时间，因此是优化的重点  </p>
<h3 id="减少HTTP请求"><a href="#减少HTTP请求" class="headerlink" title="减少HTTP请求"></a>减少HTTP请求</h3><p>因为手机浏览器同时响应请求为4个请求（Android支持4个，iOS 5后可支持6个），所以要尽量减少页面的请求数，首次加载同时请求数不能超过4个。  </p>
<ul>
<li>合并CSS、JavaScript  </li>
<li>合并小图片，使用雪碧图  </li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>使用缓存可以减少向服务器的请求数，节省加载时间，所以所有静态资源都要在服务器端设置缓存，并且尽量使用长Cache（长Cache资源的更新可使用时间戳）  </p>
<ul>
<li>缓存一切可缓存的资源  </li>
<li>使用长Cache（使用时间戳更新Cache）  </li>
<li>使用外联式引用CSS、JavaScript  </li>
</ul>
<h3 id="压缩HTML、CSS、JavaScript"><a href="#压缩HTML、CSS、JavaScript" class="headerlink" title="压缩HTML、CSS、JavaScript"></a>压缩HTML、CSS、JavaScript</h3><p>减少资源大小可以加快网页显示速度，所以要对HTML、CSS、JavaScript等进行代码压缩，并在服务器端设置GZip。  </p>
<ul>
<li>压缩（例如，多余的空格、换行符和缩进）  </li>
<li>启用GZip  </li>
</ul>
<h3 id="无阻塞"><a href="#无阻塞" class="headerlink" title="无阻塞"></a>无阻塞</h3><p>写在HTML头部的JavaScript（无异步），和写在HTML标签中的Style会阻塞页面的渲染，因此CSS放在页面头部并使用Link方式引入，避免在HTML标签中写Style，JavaScript放在页面尾部或使用异步方式加载。  </p>
<h3 id="使用首屏加载"><a href="#使用首屏加载" class="headerlink" title="使用首屏加载"></a>使用首屏加载</h3><p>首屏的快速显示，可以大大提升用户对页面速度的感知，因此应尽量针对首屏的快速显示做优化。  </p>
<h3 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h3><p>将不影响首屏的资源和当前屏幕资源不用的资源放到用户需要时才加载，可以大大提升重要资源的显示速度和降低总体流量。  </p>
<p><strong>PS：按需加载会导致大量重绘，影响渲染性能</strong>  </p>
<ul>
<li>LazyLoad  </li>
<li>滚屏加载  </li>
<li>通过Media Query加载  </li>
</ul>
<h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><p>大型重资源页面（如游戏）可使用增加Loading的方法，资源加载完成后再显示页面。但Loading时间过长，会造成用户流失。  </p>
<p>对用户行为分析，可以在当前页加载下一页资源，提升速度。  </p>
<ul>
<li>可感知Loading(如进入空间游戏的Loading）  </li>
<li>不可感知的Loading（如提前加载下一页）  </li>
</ul>
<h3 id="压缩图片"><a href="#压缩图片" class="headerlink" title="压缩图片"></a>压缩图片</h3><p>图片是最占流量的资源，因此尽量避免使用他，使用时选择最合适的格式（实现需求的前提下，以大小判断），合适的大小，然后使用智图压缩，同时在代码中用Srcset来按需显示。  </p>
<p><strong>PS：过度压缩图片大小影响图片显示效果</strong>  </p>
<ul>
<li>使用智图（ <a href="http://zhitu.tencent.com/">http://zhitu.tencent.com/</a> ）  </li>
<li>使用其它方式代替图片(1. 使用CSS3 2. 使用SVG 3. 使用IconFont）  </li>
<li>使用Srcset  </li>
<li>选择合适的图片(1. webP优于JPG 2. PNG8优于GIF）  </li>
<li>选择合适的大小（1. 首次加载不大于1014KB 2. 不宽于640（基于手机屏幕一般宽度））  </li>
</ul>
<p>延伸阅读：<a href="http://www.uisdc.com/image-format-webp-introduction">《浓缩的精华！从零开始带你认识最新的图片格式WebP》</a>  </p>
<h3 id="减少Cookie"><a href="#减少Cookie" class="headerlink" title="减少Cookie"></a>减少Cookie</h3><p>Cookie会影响加载速度，所以静态资源域名不使用Cookie。  </p>
<h3 id="避免重定向"><a href="#避免重定向" class="headerlink" title="避免重定向"></a>避免重定向</h3><p>重定向会影响加载速度，所以在服务器正确设置避免重定向。  </p>
<h3 id="异步加载第三方资源"><a href="#异步加载第三方资源" class="headerlink" title="异步加载第三方资源"></a>异步加载第三方资源</h3><p>第三方资源不可控会影响页面的加载和显示，因此要异步加载第三方资源。  </p>
<h2 id="脚本执行优化"><a href="#脚本执行优化" class="headerlink" title="脚本执行优化"></a>脚本执行优化</h2><p>脚本处理不当会阻塞页面加载、渲染，因此在使用时需当注意：  </p>
<ul>
<li><p>CSS写在头部，JavaScript写在尾部或异步。  </p>
</li>
<li><p>避免图片和iFrame等的空Src<br>  空Src会重新加载当前页面，影响速度和效率。  </p>
</li>
<li><p>尽量避免重设图片大小。  </p>
<p>  重设图片大小是指在页面、CSS、JavaScript等中多次重置图片大小，多次重设图片大小会引发图片的多次重绘，影响性能。  </p>
</li>
<li><p>图片尽量避免使用DataURL<br>  DataURL图片没有使用图片的压缩算法文件会变大，并且要解码后再渲染，加载慢耗时长  </p>
</li>
</ul>
<h2 id="CSS优化"><a href="#CSS优化" class="headerlink" title="CSS优化"></a>CSS优化</h2><p>尽量避免写在HTML标签中写Style属性  </p>
<h3 id="避免CSS表达式"><a href="#避免CSS表达式" class="headerlink" title="避免CSS表达式"></a>避免CSS表达式</h3><p>CSS表达式的执行需跳出CSS树的渲染，因此请避免CSS表达式。  </p>
<p>移除空的CSS规则  </p>
<p>空的CSS规则增加了CSS文件的大小，且影响CSS树的执行，所以需移除空的CSS规则。  </p>
<h3 id="正确使用Display的属性"><a href="#正确使用Display的属性" class="headerlink" title="正确使用Display的属性"></a>正确使用Display的属性</h3><p>display属性会影响页面的渲染，因此请合理使用。  </p>
<ul>
<li>display:inline后不应该再使用width、height、margin、padding以及float  </li>
<li>display:inline-block后不应该再使用float  </li>
<li>display:block后不应该再使用vertical-align  </li>
<li>display:table-*后不应该再使用margin或者float  </li>
</ul>
<h3 id="不滥用Float"><a href="#不滥用Float" class="headerlink" title="不滥用Float"></a>不滥用Float</h3><p>float在渲染时计算量比较大，尽量减少使用。  </p>
<h3 id="不滥用Web字体"><a href="#不滥用Web字体" class="headerlink" title="不滥用Web字体"></a>不滥用Web字体</h3><p>web字体需要下载，解析，重绘当前页面，尽量减少使用。  </p>
<h3 id="不声明过多的font-size"><a href="#不声明过多的font-size" class="headerlink" title="不声明过多的font-size"></a>不声明过多的font-size</h3><p>过多的font-size引发CSS树的效率。  </p>
<h3 id="值为0时不需要任何单位"><a href="#值为0时不需要任何单位" class="headerlink" title="值为0时不需要任何单位"></a>值为0时不需要任何单位</h3><p>为了浏览器的兼容性和性能，值为0时不要带单位。  </p>
<h3 id="标准化各种浏览器前缀"><a href="#标准化各种浏览器前缀" class="headerlink" title="标准化各种浏览器前缀"></a>标准化各种浏览器前缀</h3><ul>
<li>无前缀应放在最后  </li>
<li>CSS动画只用 （-webkit- 无前缀）两种即可  </li>
<li>其它前缀为 <code>-webkit-</code> <code>-moz-</code> <code>-ms-</code> 无前缀 四种，（<code>-o-</code>Opera浏览器改用blink内核，所以淘汰）  </li>
</ul>
<h3 id="避免让选择符看起来像正则表达式"><a href="#避免让选择符看起来像正则表达式" class="headerlink" title="避免让选择符看起来像正则表达式"></a>避免让选择符看起来像正则表达式</h3><p>高级选择器执行耗时长且不易读懂，避免使用。  </p>
<h2 id="JavaScript执行优化"><a href="#JavaScript执行优化" class="headerlink" title="JavaScript执行优化"></a>JavaScript执行优化</h2><h3 id="减少重绘和回流"><a href="#减少重绘和回流" class="headerlink" title="减少重绘和回流"></a>减少重绘和回流</h3><ul>
<li>避免不必要的Dom操作  </li>
<li>尽量改变class而不是style，使用classList代替className  </li>
<li>避免使用document.write  </li>
<li>减少drawImage  </li>
</ul>
<h3 id="缓存dom选择与计算"><a href="#缓存dom选择与计算" class="headerlink" title="缓存dom选择与计算"></a>缓存dom选择与计算</h3><p>每次dom选择都要计算，缓存他。  </p>
<h3 id="缓存列表-length"><a href="#缓存列表-length" class="headerlink" title="缓存列表.length"></a>缓存列表.length</h3><p>每次<code>.length</code>都要计算，用一个变量保存这个值  </p>
<h3 id="尽量使用事件代理，避免批量绑定事件"><a href="#尽量使用事件代理，避免批量绑定事件" class="headerlink" title="尽量使用事件代理，避免批量绑定事件"></a>尽量使用事件代理，避免批量绑定事件</h3><p>尽量使用ID选择器，ID选择器是最快的。  </p>
<h3 id="TOUCH事件优化"><a href="#TOUCH事件优化" class="headerlink" title="TOUCH事件优化"></a>TOUCH事件优化</h3><p>使用<code>touchstart</code>、<code>touchend</code>代替<code>click</code>，因快影响速度快。但应注意Touch响应过快，易引发误操作  </p>
<h2 id="渲染优化"><a href="#渲染优化" class="headerlink" title="渲染优化"></a>渲染优化</h2><h3 id="HTML使用Viewport"><a href="#HTML使用Viewport" class="headerlink" title="HTML使用Viewport"></a>HTML使用Viewport</h3><p>Viewport可以加速页面的渲染，请使用以下代码：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”width</span>=<span class="string">device-width,</span> <span class="attr">initial-scale</span>=<span class="string">1″</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="减少dom节点"><a href="#减少dom节点" class="headerlink" title="减少dom节点"></a>减少dom节点</h3><p>dom节点太多影响页面的渲染，应尽量减少Dom节点  </p>
<h3 id="动画优化"><a href="#动画优化" class="headerlink" title="动画优化"></a>动画优化</h3><ul>
<li>尽量使用CSS3动画  </li>
<li>合理使用requestAnimationFrame动画代替setTimeout  </li>
<li>适当使用Canvas动画 5个元素以内使用css动画，5个以上使用Canvas动画（iOS8可使用webGL）   </li>
</ul>
<h3 id="高频事件优化"><a href="#高频事件优化" class="headerlink" title="高频事件优化"></a>高频事件优化</h3><p>Touchmove、Scroll 事件可导致多次渲染  </p>
<ul>
<li>使用requestAnimationFrame监听帧变化，使得在正确的时间进行渲染  </li>
<li>增加响应变化的时间间隔，减少重绘次数  </li>
</ul>
<h3 id="GPU加速"><a href="#GPU加速" class="headerlink" title="GPU加速"></a>GPU加速</h3><p>CSS中以下属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）来触发GPU渲染，请合理使用。  </p>
<p><strong>PS：过渡使用会引发手机过耗电增加。</strong>  </p>
<hr>
<p>本文链接：<a href="/2015/10/25/h5_web_performance_optimization/">[转]全是干货！移动HTML 5前端性能优化指南
</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[H5 CANVAS 拼图游戏]]></title>
      <url>http://koala.ink/2015/10/13/h5_canvas_puzzle/</url>
      <content type="html"><![CDATA[<p>移动端拼图小游戏  </p>
<p>可设置拼图面板块数row *col  </p>
<p>设置单次拼图游戏时间  </p>
<p>DEMO运行效果：<a href="/rush/151013/">点击查看</a>  </p>
<a id="more"></a>
<h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timer"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"first"</span>&gt;</span>剩余时间<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">id</span>=<span class="string">"progressBar"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"remainTime"</span>&gt;</span>20.00秒<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"puzzle"</span> <span class="attr">id</span>=<span class="string">"puzzle"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"start-btn"</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span>开始游戏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h2><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.timer</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">22.9%</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">3.165%</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#691c14</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.timer</span> <span class="selector-tag">span</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">1.94%</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">1.25rem</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.7rem</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.timer</span> <span class="selector-class">.first</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">11.94%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.timer</span> <span class="selector-class">.progress-bar</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">42.4%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">38.2%</span>;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">1.3%</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#38110d</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.progress-bar</span> <span class="selector-tag">i</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../img/progressbarbg.jpg) repeat-x;</div><div class="line">    <span class="attribute">background-size</span>: <span class="number">1px</span> <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.puzzle</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">27.04%</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">10.65%</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">78.89%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">49.02%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.puzzle</span> <span class="selector-class">.img-block</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">cursor</span>: move;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../img/img.jpg) no-repeat;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.start-btn</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">86%</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">32%</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">38.8%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">7.54%</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../img/startbg.png) no-repeat transparent;</div><div class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line"></div><div class="line">    <span class="attribute">font-size</span>: <span class="number">1.6rem</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">3.81rem</span>;</div><div class="line">    <span class="attribute">font-weight</span>: bold;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/puzzle.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="keyword">var</span> puzzle = $(<span class="string">"#puzzle"</span>).puzzle(&#123;</div><div class="line">    <span class="attr">row</span> : <span class="number">4</span>,</div><div class="line">    <span class="attr">col</span> : <span class="number">4</span>,</div><div class="line">    <span class="attr">time</span> : <span class="number">20</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="built_in">window</span>).on(<span class="string">"resize"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    puzzle.puzzle(<span class="string">"resize"</span>);</div><div class="line">&#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="拼图JS插件源码"><a href="#拼图JS插件源码" class="headerlink" title="拼图JS插件源码"></a>拼图JS插件源码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> Puzzle, privateMethod;</div><div class="line"></div><div class="line">    Puzzle = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Puzzle</span>(<span class="params">element, options</span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">            that.el = $(element);</div><div class="line"></div><div class="line">            that.btn = $(<span class="string">"#start"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.progressBar = $(<span class="string">"#progressBar"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.remainTime = $(<span class="string">"#remainTime"</span>);</div><div class="line"></div><div class="line">            that.options = $.extend(&#123;&#125;, $.fn.puzzle.defaults, options);</div><div class="line"></div><div class="line">            that.init();</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* 交换数组下标 i 与 j 的值 */</span></div><div class="line">        <span class="built_in">Array</span>.prototype.swap = <span class="function"><span class="keyword">function</span>(<span class="params">i,j</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> tmp = <span class="keyword">this</span>[i];</div><div class="line">            <span class="keyword">this</span>[i] = <span class="keyword">this</span>[j];</div><div class="line">            <span class="keyword">this</span>[j] = tmp;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="built_in">Array</span>.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> i,l=<span class="keyword">this</span>.length;</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;l;++i) <span class="keyword">if</span>(<span class="keyword">this</span>[i] === val) <span class="keyword">return</span> i;</div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Puzzle.prototype = &#123;</div><div class="line">            <span class="attr">init</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> that = <span class="keyword">this</span>,</div><div class="line">                    side = that.el.width(),</div><div class="line">                    i,j,curIndex,pos;</div><div class="line"></div><div class="line">                that.offset = that.el.offset();</div><div class="line"></div><div class="line">                <span class="comment">/* 图块边距 */</span></div><div class="line">                that.blockMargin = side*<span class="number">.01</span>;</div><div class="line"></div><div class="line">                <span class="comment">/* 图块宽高 */</span></div><div class="line">                that.blockWidth = (side-that.blockMargin*(that.options.col<span class="number">-1</span>))/that.options.col;</div><div class="line">                that.blockHeight = (side-that.blockMargin*(that.options.row<span class="number">-1</span>))/that.options.row;</div><div class="line"></div><div class="line">                that.pos = [];      <span class="comment">//  图块坐标</span></div><div class="line">                that.order = [];    <span class="comment">//  图块顺序</span></div><div class="line">                that.block = [];    <span class="comment">//  图块</span></div><div class="line"></div><div class="line">                <span class="comment">/* 图块总数 */</span></div><div class="line">                that.num = that.options.row * that.options.col;</div><div class="line"></div><div class="line">                <span class="comment">/* 初始化图块信息 */</span></div><div class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;that.options.row;++i)&#123;</div><div class="line">                    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;that.options.col;++j)&#123;</div><div class="line">                        curIndex = i*that.options.col+j;</div><div class="line"></div><div class="line">                        that.pos[curIndex] = &#123;</div><div class="line">                            <span class="attr">x</span> : j*(that.blockWidth+that.blockMargin),</div><div class="line">                            <span class="attr">y</span> : i*(that.blockHeight+that.blockMargin)</div><div class="line">                        &#125;;</div><div class="line"></div><div class="line">                        that.block.push($(<span class="string">"&lt;div&gt;"</span>));</div><div class="line">                        that.block[curIndex].css(&#123;<span class="attr">width</span>: that.blockWidth, <span class="attr">height</span>: that.blockHeight, <span class="string">"background-size"</span>: side+<span class="string">"px,"</span>+side+<span class="string">"px"</span>, <span class="string">"background-position-x"</span>: -that.pos[curIndex].x, <span class="string">"background-position-y"</span>: -that.pos[curIndex].y&#125;).addClass(<span class="string">"img-block"</span>);</div><div class="line">                        that.el.append(that.block[curIndex]);</div><div class="line"></div><div class="line">                        that.order[curIndex] = curIndex;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">/* 定位图块 */</span></div><div class="line">                that.locate();</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.playtime = <span class="number">0</span>;</div><div class="line">                that.refreshTime();</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.playing = <span class="literal">false</span>;</div><div class="line"></div><div class="line">                that.btn.on(<span class="string">"click tap"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    that.start();</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/* 窗体大小变化 */</span></div><div class="line">            resize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> that = <span class="keyword">this</span>,</div><div class="line">                    side = that.el.width(),</div><div class="line">                    i,j,curIndex,pos;</div><div class="line"></div><div class="line">                that.offset = that.el.offset();</div><div class="line"></div><div class="line">                <span class="comment">/* 图块边距 */</span></div><div class="line">                that.blockMargin = side*<span class="number">.01</span>;</div><div class="line"></div><div class="line">                <span class="comment">/* 图块宽高 */</span></div><div class="line">                that.blockWidth = (side-that.blockMargin*(that.options.col<span class="number">-1</span>))/that.options.col;</div><div class="line">                that.blockHeight = (side-that.blockMargin*(that.options.row<span class="number">-1</span>))/that.options.row;</div><div class="line"></div><div class="line">                that.pos = [];      <span class="comment">//  图块坐标</span></div><div class="line"></div><div class="line">                <span class="comment">/* 初始化图块信息 */</span></div><div class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;that.options.row;++i)&#123;</div><div class="line">                    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;that.options.col;++j)&#123;</div><div class="line">                        curIndex = i*that.options.col+j;</div><div class="line"></div><div class="line">                        that.pos[curIndex] = &#123;</div><div class="line">                            <span class="attr">x</span> : j*(that.blockWidth+that.blockMargin),</div><div class="line">                            <span class="attr">y</span> : i*(that.blockHeight+that.blockMargin)</div><div class="line">                        &#125;;</div><div class="line"></div><div class="line">                        that.block[curIndex].css(&#123;<span class="attr">width</span>: that.blockWidth, <span class="attr">height</span>: that.blockHeight, <span class="string">"background-size"</span>: side+<span class="string">"px,"</span>+side+<span class="string">"px"</span>, <span class="string">"background-position-x"</span>: -that.pos[curIndex].x, <span class="string">"background-position-y"</span>: -that.pos[curIndex].y&#125;).addClass(<span class="string">"img-block"</span>);</div><div class="line">                        that.el.append(that.block[curIndex]);</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">/* 定位图块 */</span></div><div class="line">                that.locate();</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/* 根据 that.order 数组中的序列对各图块进行定位 */</span></div><div class="line">            locate : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> that = <span class="keyword">this</span>,</div><div class="line">                    i,j,curIndex;</div><div class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;that.options.row;++i) <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;that.options.col;++j)&#123;</div><div class="line">                        curIndex = i*that.options.col+j;</div><div class="line">                        that.block[that.order[curIndex]].css(&#123;<span class="attr">top</span>: that.pos[curIndex].y, <span class="attr">left</span>: that.pos[curIndex].x&#125;);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/* 开始游戏 */</span></div><div class="line">            start : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.playing) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.playing = <span class="literal">true</span>;</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.playtime = <span class="number">0</span>;</div><div class="line"></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.num;++i)&#123;</div><div class="line">                    <span class="keyword">this</span>.dragBlock(<span class="keyword">this</span>.block[i]);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.order.sort(privateMethod.randomSort);</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.locate();</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.play();</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">refreshTime</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.progressBar.css(<span class="string">"width"</span>,(<span class="keyword">this</span>.playtime/<span class="keyword">this</span>.options.playtime)*<span class="number">100</span>+<span class="string">"%"</span>);</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.remainTime.text((<span class="keyword">this</span>.options.playtime-<span class="keyword">this</span>.playtime).toFixed(<span class="number">2</span>)+<span class="string">"秒"</span>);</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">play</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(that.playtime &gt;= that.options.playtime)&#123;</div><div class="line"></div><div class="line">                    that.playtime = that.options.playtime;</div><div class="line"></div><div class="line">                    clearTimeout(that.timer);</div><div class="line"></div><div class="line">                    that.playing = <span class="literal">false</span>;</div><div class="line"></div><div class="line">                    that.refreshTime();</div><div class="line"></div><div class="line">                    that.alertInfo(<span class="string">"Time out!"</span>);</div><div class="line"></div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                that.refreshTime();</div><div class="line"></div><div class="line">                that.playtime += <span class="number">.01</span>;</div><div class="line"></div><div class="line">                that.timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                    that.play();</div><div class="line"></div><div class="line">                &#125;,<span class="number">10</span>);</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">dragBlock</span> : <span class="function"><span class="keyword">function</span>(<span class="params">block</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> that = <span class="keyword">this</span>,</div><div class="line">                    offset = block.offset();</div><div class="line"></div><div class="line">                block.on(<span class="string">"touchstart"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line"></div><div class="line">                    event.preventDefault();</div><div class="line"></div><div class="line">                    <span class="keyword">var</span> touch = event.touches[<span class="number">0</span>],</div><div class="line">                        disX = touch.pageX - block.offset().left,</div><div class="line">                        disY = touch.pageY - block.offset().top;</div><div class="line">                    block.css(<span class="string">"z-index"</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line">                    block.on(<span class="string">"touchmove"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line"></div><div class="line">                        <span class="keyword">var</span> touch = event.touches[<span class="number">0</span>],</div><div class="line">                            l = touch.pageX-that.offset.left-disX,</div><div class="line">                            t = touch.pageY-that.offset.top-disY;</div><div class="line"></div><div class="line">                        block.css(&#123;<span class="attr">top</span>: t, <span class="attr">left</span>: l&#125;);</div><div class="line"></div><div class="line">                    &#125;);</div><div class="line"></div><div class="line">                    block.on(<span class="string">"touchend"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line"></div><div class="line">                        that.updateOrder(block.index());</div><div class="line"></div><div class="line">                        block.off(<span class="string">"touchmove"</span>);</div><div class="line">                        block.off(<span class="string">"touchend"</span>);</div><div class="line"></div><div class="line">                    &#125;);</div><div class="line"></div><div class="line">                &#125;);</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">unDragBlock</span> : <span class="function"><span class="keyword">function</span>(<span class="params">block</span>)</span>&#123;</div><div class="line">                block.off(<span class="string">"touchstart"</span>);</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">updateOrder</span> : <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> that = <span class="keyword">this</span>,</div><div class="line">                    ox = that.block[index].offset().left+that.blockWidth/<span class="number">2</span>,</div><div class="line">                    oy = that.block[index].offset().top+that.blockHeight/<span class="number">2</span>,</div><div class="line">                    ex,ey,i,</div><div class="line">                    to = <span class="number">-1</span>;</div><div class="line"></div><div class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;that.num;++i)&#123;</div><div class="line">                    <span class="keyword">if</span>(i === index) <span class="keyword">continue</span>;</div><div class="line">                    ex = that.block[i].offset().left;</div><div class="line">                    ey = that.block[i].offset().top;</div><div class="line">                    <span class="keyword">if</span>(ox&gt;ex&amp;&amp;ox&lt;ex+that.blockWidth&amp;&amp;oy&gt;ey&amp;&amp;oy&lt;ey+that.blockHeight)&#123;</div><div class="line">                        to = i;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(to === <span class="number">-1</span>)&#123;</div><div class="line">                    that.move(that.block[index],that.order.indexOf(index));</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    ox = that.order.indexOf(index);</div><div class="line">                    ex = that.order.indexOf(to);</div><div class="line">                    that.block[to].css(<span class="string">"z-index"</span>,<span class="number">1</span>);</div><div class="line">                    that.move(that.block[index],ex);</div><div class="line">                    that.move(that.block[to],ox);</div><div class="line">                    that.order.swap(ox,ex);</div><div class="line"></div><div class="line">                    that.block[index].css(<span class="string">"z-index"</span>,<span class="number">0</span>);</div><div class="line">                    that.block[to].css(<span class="string">"z-index"</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>(that.isSuccess())&#123;</div><div class="line"></div><div class="line">                        clearTimeout(that.timer);</div><div class="line"></div><div class="line">                        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;that.num;++i)&#123;</div><div class="line">                            that.unDragBlock(that.block[i]);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                            that.playing = <span class="literal">false</span>;</div><div class="line"></div><div class="line">                            that.alertInfo(<span class="string">"Done!"</span>);</div><div class="line"></div><div class="line">                        &#125;,<span class="number">100</span>);</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">move</span> : <span class="function"><span class="keyword">function</span>(<span class="params">obj, index</span>)</span>&#123;</div><div class="line">                obj.css(&#123;<span class="attr">top</span>: <span class="keyword">this</span>.pos[index].y, <span class="attr">left</span>: <span class="keyword">this</span>.pos[index].x&#125;);</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">isSuccess</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> i;</div><div class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.num;++i)&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.order[i] !== i)</div><div class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">alertInfo</span> : <span class="function"><span class="keyword">function</span>(<span class="params">info</span>)</span>&#123;</div><div class="line">                alert(info);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Puzzle;</div><div class="line"></div><div class="line">    &#125;)();</div><div class="line"></div><div class="line">    privateMethod = &#123;</div><div class="line">        <span class="comment">/* 在数组arr中查找第一个值为val的下标，未找到返回-1 */</span></div><div class="line">        indexOf : <span class="function"><span class="keyword">function</span>(<span class="params">arr, val</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> l = arr.length,i;</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;l;++i) <span class="keyword">if</span>(arr[i]===val) <span class="keyword">return</span> i;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">/* 数组随机排序 */</span></div><div class="line">        randomSort : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0.5</span> - <span class="built_in">Math</span>.random();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $.fn.puzzle = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> that = $(<span class="keyword">this</span>),</div><div class="line">                instance = $.fn.puzzle.lookup[that.data(<span class="string">"puzzle"</span>)];</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(!instance)&#123;</div><div class="line"></div><div class="line">                instance = <span class="keyword">new</span> Puzzle(that, options);</div><div class="line"></div><div class="line">                $.fn.puzzle.lookup[++$.fn.puzzle.lookup.i] = instance;</div><div class="line"></div><div class="line">                that.data(<span class="string">"puzzle"</span>, $.fn.puzzle.lookup.i)</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> options === <span class="string">"string"</span>)&#123;</div><div class="line">                instance[options]();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $.fn.puzzle.lookup = &#123;</div><div class="line">        <span class="attr">i</span> : <span class="number">0</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $.fn.puzzle.defaults = &#123;</div><div class="line">        <span class="attr">row</span> : <span class="number">3</span>,        <span class="comment">// 行数</span></div><div class="line">        col : <span class="number">3</span>,        <span class="comment">// 列数</span></div><div class="line">        playtime : <span class="number">20</span>   <span class="comment">// 单轮拼图时间 单位 s</span></div><div class="line">    &#125;;</div><div class="line">&#125;)(Zepto);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[H5 CANVAS 九宫格转盘]]></title>
      <url>http://koala.ink/2015/09/24/h5_canvas_sudoku/</url>
      <content type="html"><![CDATA[<p>使用 H5  的 canvas  绘制的一个九宫格转盘  </p>
<p>能够配置每个格子内显示的图片以及文本内容  </p>
<p>点击 开始  旋转光圈，停止后显示选中格的内容  </p>
<p>DEMO运行效果：<a href="/rush/150924/">点击查看</a>  </p>
<a id="more"></a>
<h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sudoku"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"face"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"rotation"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"controlBtn"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/gift.png"</span> <span class="attr">id</span>=<span class="string">"gift"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/smile.png"</span> <span class="attr">id</span>=<span class="string">"smile"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h2><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.sudoku</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">512px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">433px</span>;</div><div class="line">    <span class="attribute">margin-left</span>: -<span class="number">256px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.sudoku</span> <span class="selector-tag">canvas</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.sudoku</span> <span class="selector-class">.controlBtn</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line"></div><div class="line">    <span class="attribute">-webkit-tap-highlight-color </span>: <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line">    <span class="attribute">-moz-tap-highlight-color </span>: <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line">    <span class="attribute">-ms-tap-highlight-color </span>: <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line">    <span class="attribute">-o-tap-highlight-color </span>: <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line">    <span class="attribute">tap-highlight-color </span>: <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="attribute">-webkit-tap-highlight-color </span>:transparent;</div><div class="line">    <span class="attribute">-moz-tap-highlight-color </span>:transparent;</div><div class="line">    <span class="attribute">-ms-tap-highlight-color </span>:transparent;</div><div class="line">    <span class="attribute">-o-tap-highlight-color </span>:transparent;</div><div class="line">    <span class="attribute">tap-highlight-color </span>:transparent;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.sudoku</span> <span class="selector-tag">img</span> &#123;</div><div class="line">    <span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/zepto.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/sudoku.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> items = [</div><div class="line">        &#123;<span class="attr">text</span>:<span class="string">"100M"</span>&#125;,</div><div class="line">        &#123;<span class="attr">text</span>:<span class="string">"谢谢参与"</span>&#125;,</div><div class="line">        &#123;<span class="attr">text</span>:<span class="string">"300M"</span>&#125;,</div><div class="line">        &#123;<span class="attr">text</span>:<span class="string">"谢谢参与"</span>&#125;,</div><div class="line">        &#123;<span class="attr">text</span>:<span class="string">""</span>&#125;,</div><div class="line">        &#123;<span class="attr">text</span>:<span class="string">"谢谢参与"</span>&#125;,</div><div class="line">        &#123;<span class="attr">text</span>:<span class="string">"500M"</span>&#125;,</div><div class="line">        &#123;<span class="attr">text</span>:<span class="string">"谢谢参与"</span>&#125;,</div><div class="line">        &#123;<span class="attr">text</span>:<span class="string">"200M"</span>&#125;</div><div class="line">    ],sudoku;</div><div class="line"></div><div class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        sudoku = $(<span class="string">".sudoku"</span>).sudoku(&#123;</div><div class="line">            <span class="attr">items</span> : items</div><div class="line">        &#125;).data(<span class="string">"sudoku"</span>);</div><div class="line">        sudoku = $.fn.sudoku.lookup[sudoku];</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $(<span class="built_in">window</span>).on(<span class="string">"resize"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        sudoku.init();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="九宫格转盘JS插件源码"><a href="#九宫格转盘JS插件源码" class="headerlink" title="九宫格转盘JS插件源码"></a>九宫格转盘JS插件源码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> Sudoku, privateMethod;</div><div class="line"></div><div class="line">    Sudoku = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Sudoku</span>(<span class="params">element, options</span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">            $<span class="keyword">this</span>.el = element;</div><div class="line"></div><div class="line">            $<span class="keyword">this</span>.options = $.extend(&#123;&#125;, $.fn.sudoku.defaults, options);</div><div class="line"></div><div class="line">            $<span class="keyword">this</span>.init();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Sudoku.prototype = &#123;</div><div class="line">            <span class="attr">init</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> cxt = $<span class="keyword">this</span>.initElement();</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.render(cxt.face);</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.ready(cxt.rotation);</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">initElement</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.width = $<span class="keyword">this</span>.el.width();</div><div class="line">                $<span class="keyword">this</span>.height = $<span class="keyword">this</span>.el.height();</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.boxWidth = $<span class="keyword">this</span>.width*<span class="number">290</span>/<span class="number">1024</span>;</div><div class="line">                $<span class="keyword">this</span>.boxHeight = $<span class="keyword">this</span>.height*<span class="number">243</span>/<span class="number">865</span>;</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.boxBorderTop = $<span class="keyword">this</span>.height*<span class="number">7</span>/<span class="number">865</span>;</div><div class="line">                $<span class="keyword">this</span>.boxBorderLeft = $<span class="keyword">this</span>.width*<span class="number">9</span>/<span class="number">1024</span>;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> ml = $<span class="keyword">this</span>.width*<span class="number">61</span>/<span class="number">1024</span>,</div><div class="line">                    mt = $<span class="keyword">this</span>.height*<span class="number">50</span>/<span class="number">865</span>,</div><div class="line">                    bm = $<span class="keyword">this</span>.width/<span class="number">64</span>, i,j;</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.boxs = [];</div><div class="line"></div><div class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)&#123;</div><div class="line">                    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;++j)&#123;</div><div class="line">                        $<span class="keyword">this</span>.boxs.push(&#123;<span class="attr">x</span>: ml+j*($<span class="keyword">this</span>.boxWidth+bm), <span class="attr">y</span>: mt+i*($<span class="keyword">this</span>.boxHeight+bm)&#125;);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.controlBtn = $<span class="keyword">this</span>.el.children(<span class="string">".controlBtn"</span>).css(&#123;<span class="attr">top</span>: $<span class="keyword">this</span>.boxs[<span class="number">4</span>].y, <span class="attr">left</span>: $<span class="keyword">this</span>.boxs[<span class="number">4</span>].x, <span class="attr">width</span>: $<span class="keyword">this</span>.boxWidth, <span class="attr">height</span>: $<span class="keyword">this</span>.boxHeight&#125;);</div><div class="line"></div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    <span class="attr">face</span> : $<span class="keyword">this</span>.el.children(<span class="string">".face"</span>).attr(&#123;<span class="attr">width</span>: $<span class="keyword">this</span>.width, <span class="attr">height</span>: $<span class="keyword">this</span>.height&#125;)[<span class="number">0</span>].getContext(<span class="string">"2d"</span>),</div><div class="line">                    <span class="attr">rotation</span> : $<span class="keyword">this</span>.el.children(<span class="string">".rotation"</span>).attr(&#123;<span class="attr">width</span>: $<span class="keyword">this</span>.width, <span class="attr">height</span>: $<span class="keyword">this</span>.height&#125;)[<span class="number">0</span>].getContext(<span class="string">"2d"</span>)</div><div class="line">                &#125;;</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">render</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cxt</span>)</span>&#123;</div><div class="line"></div><div class="line">                cxt.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</div><div class="line"></div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>,</div><div class="line">                    x, y, sw,</div><div class="line">                    i, j, len;</div><div class="line">                sw = $<span class="keyword">this</span>.width*<span class="number">3</span>/<span class="number">512</span>;</div><div class="line">                x = $<span class="keyword">this</span>.width*<span class="number">39</span>/<span class="number">1024</span> + sw;</div><div class="line">                y = $<span class="keyword">this</span>.height*<span class="number">33</span>/<span class="number">865</span> + sw;</div><div class="line"></div><div class="line">                cxt.save();</div><div class="line">                cxt.beginPath();</div><div class="line">                privateMethod.rect(cxt,sw,sw,$<span class="keyword">this</span>.width<span class="number">-2</span>*sw,$<span class="keyword">this</span>.height<span class="number">-2</span>*sw,<span class="literal">false</span>);</div><div class="line">                privateMethod.rect(cxt,x,y,$<span class="keyword">this</span>.width<span class="number">-2</span>*x,$<span class="keyword">this</span>.height<span class="number">-2</span>*y,<span class="literal">true</span>);</div><div class="line"></div><div class="line">                cxt.fillStyle = <span class="string">"#691c14"</span>;</div><div class="line">                cxt.shadowBlur = $<span class="keyword">this</span>.width*<span class="number">3</span>/<span class="number">256</span>;</div><div class="line">                cxt.shadowColor = <span class="string">"#691c14"</span>;</div><div class="line">                cxt.fill();</div><div class="line">                cxt.restore();</div><div class="line"></div><div class="line">                cxt.save();</div><div class="line">                cxt.beginPath();</div><div class="line">                privateMethod.rect(cxt,x,y,$<span class="keyword">this</span>.width<span class="number">-2</span>*x,$<span class="keyword">this</span>.height<span class="number">-2</span>*y,<span class="literal">true</span>);</div><div class="line"></div><div class="line">                cxt.fillStyle = <span class="string">"#340808"</span>;</div><div class="line">                cxt.fill();</div><div class="line"></div><div class="line">                cxt.restore();</div><div class="line"></div><div class="line">                x = $<span class="keyword">this</span>.width*<span class="number">21</span>/<span class="number">1024</span> + sw;</div><div class="line">                y = $<span class="keyword">this</span>.height*<span class="number">18</span>/<span class="number">865</span> + sw;</div><div class="line">                sw = $<span class="keyword">this</span>.width*<span class="number">7</span>/<span class="number">1024</span>;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> lights = [</div><div class="line">                    &#123;<span class="attr">x</span>: x, <span class="attr">y</span>: y, <span class="attr">ax</span>: ($<span class="keyword">this</span>.width<span class="number">-2</span>*x)/<span class="number">12</span>, <span class="attr">ay</span>: <span class="number">0</span>, <span class="attr">num</span>: <span class="number">12</span>&#125;,</div><div class="line">                    &#123;<span class="attr">x</span>: $<span class="keyword">this</span>.width-x, <span class="attr">y</span>: y, <span class="attr">ax</span>: <span class="number">0</span>, <span class="attr">ay</span>:($<span class="keyword">this</span>.height<span class="number">-2</span>*y)/<span class="number">11</span>, <span class="attr">num</span>: <span class="number">11</span>&#125;,</div><div class="line">                    &#123;<span class="attr">x</span>: $<span class="keyword">this</span>.width-x, <span class="attr">y</span>: $<span class="keyword">this</span>.height-y, <span class="attr">ax</span>: -($<span class="keyword">this</span>.width<span class="number">-2</span>*x)/<span class="number">12</span>, <span class="attr">ay</span>: <span class="number">0</span>, <span class="attr">num</span>: <span class="number">12</span>&#125;,</div><div class="line">                    &#123;<span class="attr">x</span>: x, <span class="attr">y</span>: $<span class="keyword">this</span>.height-y, <span class="attr">ax</span>: <span class="number">0</span>, <span class="attr">ay</span>: -($<span class="keyword">this</span>.height<span class="number">-2</span>*y)/<span class="number">11</span>, <span class="attr">num</span>: <span class="number">11</span>&#125;</div><div class="line">                ];</div><div class="line"></div><div class="line">                cxt.shadowBlur = sw;</div><div class="line">                cxt.shadowColor = <span class="string">"#fecb02"</span>;</div><div class="line">                cxt.fillStyle = <span class="string">"#fecb02"</span>;</div><div class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;lights.length;++i)&#123;</div><div class="line">                    x = lights[i].x;</div><div class="line">                    y = lights[i].y;</div><div class="line">                    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;lights[i].num;++j)&#123;</div><div class="line"></div><div class="line">                        cxt.save();</div><div class="line"></div><div class="line">                        cxt.translate(x,y);</div><div class="line"></div><div class="line">                        cxt.beginPath();</div><div class="line">                        cxt.arc(<span class="number">0</span>,<span class="number">0</span>,sw,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>);</div><div class="line">                        cxt.closePath();</div><div class="line"></div><div class="line">                        cxt.fill();</div><div class="line"></div><div class="line">                        cxt.restore();</div><div class="line"></div><div class="line">                        x += lights[i].ax;</div><div class="line">                        y += lights[i].ay;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> linear1 = cxt.createLinearGradient(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,$<span class="keyword">this</span>.boxHeight),</div><div class="line">                    linear2 = cxt.createLinearGradient(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,$<span class="keyword">this</span>.boxHeight),</div><div class="line">                    linear3 = cxt.createLinearGradient(<span class="number">0</span>,<span class="number">0</span>,$<span class="keyword">this</span>.boxWidth,$<span class="keyword">this</span>.boxHeight);</div><div class="line"></div><div class="line">                linear1.addColorStop(<span class="number">0</span>,<span class="string">"#ffe484"</span>);</div><div class="line">                linear1.addColorStop(<span class="number">1</span>,<span class="string">"#ffeba1"</span>);</div><div class="line"></div><div class="line">                linear2.addColorStop(<span class="number">0</span>,<span class="string">"#fdd135"</span>);</div><div class="line">                linear2.addColorStop(<span class="number">1</span>,<span class="string">"#ffbf12"</span>);</div><div class="line"></div><div class="line">                linear3.addColorStop(<span class="number">0</span>,<span class="string">"#e92121"</span>);</div><div class="line">                linear3.addColorStop(<span class="number">.076</span>,<span class="string">"#e92121"</span>);</div><div class="line"></div><div class="line">                linear3.addColorStop(<span class="number">.076</span>,<span class="string">"#f03e3e"</span>);</div><div class="line">                linear3.addColorStop(<span class="number">.152</span>,<span class="string">"#f03e3e"</span>);</div><div class="line"></div><div class="line">                linear3.addColorStop(<span class="number">.152</span>,<span class="string">"#e92121"</span>);</div><div class="line">                linear3.addColorStop(<span class="number">.228</span>,<span class="string">"#e92121"</span>);</div><div class="line"></div><div class="line">                linear3.addColorStop(<span class="number">.228</span>,<span class="string">"#f03e3e"</span>);</div><div class="line">                linear3.addColorStop(<span class="number">.304</span>,<span class="string">"#f03e3e"</span>);</div><div class="line"></div><div class="line">                linear3.addColorStop(<span class="number">.304</span>,<span class="string">"#e92121"</span>);</div><div class="line">                linear3.addColorStop(<span class="number">.38</span>,<span class="string">"#e92121"</span>);</div><div class="line"></div><div class="line">                linear3.addColorStop(<span class="number">.38</span>,<span class="string">"#f03e3e"</span>);</div><div class="line">                linear3.addColorStop(<span class="number">.456</span>,<span class="string">"#f03e3e"</span>);</div><div class="line"></div><div class="line">                linear3.addColorStop(<span class="number">.456</span>,<span class="string">"#e92121"</span>);</div><div class="line">                linear3.addColorStop(<span class="number">.532</span>,<span class="string">"#e92121"</span>);</div><div class="line"></div><div class="line">                linear3.addColorStop(<span class="number">.532</span>,<span class="string">"#f03e3e"</span>);</div><div class="line">                linear3.addColorStop(<span class="number">.608</span>,<span class="string">"#f03e3e"</span>);</div><div class="line"></div><div class="line">                linear3.addColorStop(<span class="number">.608</span>,<span class="string">"#e92121"</span>);</div><div class="line">                linear3.addColorStop(<span class="number">.684</span>,<span class="string">"#e92121"</span>);</div><div class="line"></div><div class="line">                linear3.addColorStop(<span class="number">.684</span>,<span class="string">"#f03e3e"</span>);</div><div class="line">                linear3.addColorStop(<span class="number">.76</span>,<span class="string">"#f03e3e"</span>);</div><div class="line"></div><div class="line">                linear3.addColorStop(<span class="number">.76</span>,<span class="string">"#e92121"</span>);</div><div class="line">                linear3.addColorStop(<span class="number">.836</span>,<span class="string">"#e92121"</span>);</div><div class="line"></div><div class="line">                linear3.addColorStop(<span class="number">.836</span>,<span class="string">"#f03e3e"</span>);</div><div class="line">                linear3.addColorStop(<span class="number">.912</span>,<span class="string">"#f03e3e"</span>);</div><div class="line"></div><div class="line">                linear3.addColorStop(<span class="number">.912</span>,<span class="string">"#e92121"</span>);</div><div class="line">                linear3.addColorStop(<span class="number">1</span>,<span class="string">"#e92121"</span>);</div><div class="line"></div><div class="line">                len = $<span class="keyword">this</span>.options.items.length;</div><div class="line"></div><div class="line">                cxt.shadowBlur = <span class="number">0</span>;</div><div class="line"></div><div class="line">                cxt.font = $<span class="keyword">this</span>.boxWidth*<span class="number">36</span>/<span class="number">290</span>+<span class="string">"px Helvetica"</span>;</div><div class="line">                cxt.textBaseline = <span class="string">"top"</span>;</div><div class="line">                cxt.textAlign = <span class="string">"center"</span>;</div><div class="line"></div><div class="line">                x = $<span class="keyword">this</span>.boxWidth/<span class="number">2</span>;</div><div class="line">                y = $<span class="keyword">this</span>.boxHeight*<span class="number">165</span>/<span class="number">243</span>;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> w = $<span class="keyword">this</span>.boxWidth*<span class="number">104</span>/<span class="number">290</span>,</div><div class="line">                    h = $<span class="keyword">this</span>.boxHeight*<span class="number">128</span>/<span class="number">243</span>,</div><div class="line">                    x1 = ($<span class="keyword">this</span>.boxWidth-w)/ <span class="number">2</span>,</div><div class="line">                    y1 = $<span class="keyword">this</span>.boxHeight*<span class="number">30</span>/<span class="number">243</span>,</div><div class="line">                    imgs = &#123;</div><div class="line">                        <span class="attr">gift</span> : <span class="built_in">document</span>.getElementById(<span class="string">"gift"</span>),</div><div class="line">                        <span class="attr">smile</span> : <span class="built_in">document</span>.getElementById(<span class="string">"smile"</span>)</div><div class="line">                    &#125;;</div><div class="line"></div><div class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;++i)&#123;</div><div class="line">                    cxt.save();</div><div class="line">                    cxt.translate($<span class="keyword">this</span>.boxs[i].x,$<span class="keyword">this</span>.boxs[i].y);</div><div class="line"></div><div class="line">                    cxt.beginPath();</div><div class="line">                    privateMethod.rect(cxt,<span class="number">0</span>,<span class="number">0</span>,$<span class="keyword">this</span>.boxWidth,$<span class="keyword">this</span>.boxHeight,<span class="literal">true</span>);</div><div class="line">                    cxt.closePath();</div><div class="line"></div><div class="line">                    i&amp;<span class="number">1</span> &amp;&amp; (cxt.fillStyle = linear1) || i !== <span class="built_in">Math</span>.floor(len/<span class="number">2</span>) &amp;&amp; (cxt.fillStyle = linear2);</div><div class="line"></div><div class="line">                    cxt.fill();</div><div class="line"></div><div class="line">                    cxt.fillStyle = <span class="string">"#691c14"</span>;</div><div class="line"></div><div class="line">                    cxt.fillText($<span class="keyword">this</span>.options.items[i].text,x,y);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</div><div class="line">                        imgs.smile.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                            cxt.drawImage(<span class="keyword">this</span>,x1,y1,w,w);</div><div class="line">                        &#125;;</div><div class="line">                        cxt.drawImage(imgs.smile,x1,y1,w,w);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        imgs.gift.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                            cxt.drawImage(<span class="keyword">this</span>,x1,y1,w,h);</div><div class="line">                        &#125;;</div><div class="line">                        cxt.drawImage(imgs.gift,x1,y1,w,h);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    cxt.restore();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                cxt.save();</div><div class="line">                cxt.translate($<span class="keyword">this</span>.boxs[<span class="number">4</span>].x,$<span class="keyword">this</span>.boxs[<span class="number">4</span>].y);</div><div class="line"></div><div class="line">                cxt.beginPath();</div><div class="line">                privateMethod.rect(cxt,<span class="number">0</span>,<span class="number">0</span>,$<span class="keyword">this</span>.boxWidth,$<span class="keyword">this</span>.boxHeight,<span class="literal">true</span>);</div><div class="line">                cxt.closePath();</div><div class="line"></div><div class="line">                cxt.fillStyle = linear3;</div><div class="line">                cxt.fill();</div><div class="line"></div><div class="line">                cxt.fillStyle = <span class="string">"#fd5354"</span>;</div><div class="line">                privateMethod.rectBorder(cxt,<span class="number">0</span>,<span class="number">0</span>,$<span class="keyword">this</span>.boxBorderTop,$<span class="keyword">this</span>.boxBorderLeft,$<span class="keyword">this</span>.boxWidth,$<span class="keyword">this</span>.boxHeight);</div><div class="line">                cxt.fill();</div><div class="line"></div><div class="line">                cxt.fillStyle  =<span class="string">"#fdf402"</span>;</div><div class="line">                cxt.font = $<span class="keyword">this</span>.boxWidth*<span class="number">8</span>/<span class="number">29</span>+<span class="string">"px Microsoft YaHei"</span>;</div><div class="line">                cxt.textBaseline = <span class="string">"bottom"</span>;</div><div class="line">                cxt.textAlign = <span class="string">"center"</span>;</div><div class="line">                cxt.fillText(<span class="string">"开始"</span>,$<span class="keyword">this</span>.boxWidth/<span class="number">2</span>,$<span class="keyword">this</span>.boxHeight/<span class="number">2</span>);</div><div class="line">                cxt.textBaseline = <span class="string">"top"</span>;</div><div class="line">                cxt.fillText(<span class="string">"抽奖"</span>,$<span class="keyword">this</span>.boxWidth/<span class="number">2</span>,$<span class="keyword">this</span>.boxHeight/<span class="number">2</span>);</div><div class="line">                cxt.restore();</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">ready</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cxt</span>)</span>&#123;</div><div class="line"></div><div class="line">                cxt.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</div><div class="line"></div><div class="line">                cxt.fillStyle = <span class="string">"#e92121"</span>;</div><div class="line">                privateMethod.rectBorder(cxt,<span class="keyword">this</span>.boxs[<span class="number">0</span>].x,<span class="keyword">this</span>.boxs[<span class="number">0</span>].y,<span class="keyword">this</span>.boxBorderTop,<span class="keyword">this</span>.boxBorderLeft,<span class="keyword">this</span>.boxWidth,<span class="keyword">this</span>.boxHeight);</div><div class="line">                cxt.fill();</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.next = <span class="number">1</span>;</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.dir = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">3</span>];</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.isRotating = <span class="literal">false</span>;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.controlBtn.on(<span class="string">"click tap"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>($<span class="keyword">this</span>.isRotating) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">                    $<span class="keyword">this</span>.isRotating = <span class="literal">true</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*$<span class="keyword">this</span>.options.items.length);</div><div class="line"></div><div class="line">                    num = privateMethod.indexOf($<span class="keyword">this</span>.dir,num);</div><div class="line"></div><div class="line">                    num === <span class="number">-1</span> &amp;&amp; (num = <span class="number">0</span>);</div><div class="line"></div><div class="line">                    $<span class="keyword">this</span>.rotate(cxt, <span class="number">200</span>, $<span class="keyword">this</span>.next, num);</div><div class="line"></div><div class="line">                &#125;);</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">rotate</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cxt, speed, index, num</span>)</span>&#123;</div><div class="line"></div><div class="line">                cxt.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</div><div class="line"></div><div class="line">                <span class="keyword">var</span> len = <span class="keyword">this</span>.dir.length,</div><div class="line">                    $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">                privateMethod.rectBorder(cxt,<span class="keyword">this</span>.boxs[<span class="keyword">this</span>.dir[index%len]].x,<span class="keyword">this</span>.boxs[<span class="keyword">this</span>.dir[index%len]].y,<span class="keyword">this</span>.boxBorderTop,<span class="keyword">this</span>.boxBorderLeft,<span class="keyword">this</span>.boxWidth,<span class="keyword">this</span>.boxHeight);</div><div class="line">                cxt.fill();</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(index &gt;= (privateMethod.baseRounds+<span class="number">2</span>)*len &amp;&amp; index%len === num)&#123;</div><div class="line">                    clearTimeout(<span class="keyword">this</span>.timer);</div><div class="line"></div><div class="line">                    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                        alert(<span class="string">"text: "</span>+$<span class="keyword">this</span>.options.items[$<span class="keyword">this</span>.dir[num]].text);</div><div class="line"></div><div class="line">                        $<span class="keyword">this</span>.next = (num+<span class="number">1</span>)%len;</div><div class="line">                        $<span class="keyword">this</span>.isRotating = <span class="literal">false</span>;</div><div class="line">                    &#125;,<span class="number">1000</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(index &lt; privateMethod.baseRounds*len)&#123;</div><div class="line">                        speed -= <span class="number">20</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        speed += <span class="number">30</span>;</div><div class="line">                    &#125;</div><div class="line">                    speed = speed&lt;<span class="number">80</span> ? <span class="number">80</span> : speed;</div><div class="line"></div><div class="line">                    <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        $<span class="keyword">this</span>.rotate(cxt,speed,++index,num)</div><div class="line">                    &#125;,speed);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Sudoku;</div><div class="line"></div><div class="line">    &#125;)();</div><div class="line"></div><div class="line">    privateMethod = &#123;</div><div class="line">        <span class="attr">baseRounds</span> : <span class="number">3</span>,</div><div class="line">        <span class="attr">drawImage</span> : <span class="function"><span class="keyword">function</span>(<span class="params">img,callback</span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>( img.complete )&#123;</div><div class="line">                callback.call(img);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                callback.call(img);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">rect</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cxt, x, y, width, height, c</span>)</span>&#123;</div><div class="line"></div><div class="line">            cxt.moveTo(x,y);</div><div class="line">            <span class="keyword">if</span>(c)&#123;</div><div class="line">                cxt.lineTo(x, y+height);</div><div class="line">                cxt.lineTo(x+width, y+height);</div><div class="line">                cxt.lineTo(x+width, y);</div><div class="line">                cxt.lineTo(x, y);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                cxt.lineTo(x+width, y);</div><div class="line">                cxt.lineTo(x+width, y+height);</div><div class="line">                cxt.lineTo(x, y+height);</div><div class="line">                cxt.lineTo(x, y);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">rectBorder</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cxt, x, y, borderTop, borderLeft, width, height</span>)</span>&#123;</div><div class="line"></div><div class="line">            cxt.beginPath();</div><div class="line"></div><div class="line">            privateMethod.rect(cxt,x,y,width,height,<span class="literal">true</span>);</div><div class="line"></div><div class="line">            privateMethod.rect(cxt,x+borderLeft,y+borderTop,width<span class="number">-2</span>*borderLeft,height<span class="number">-2</span>*borderTop,<span class="literal">false</span>);</div><div class="line"></div><div class="line">            cxt.closePath();</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">arc</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cxt, x, y, radius, c</span>)</span>&#123;</div><div class="line"></div><div class="line">            cxt.beginPath();</div><div class="line"></div><div class="line">            cxt.arc(x,y,radius,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,c);</div><div class="line"></div><div class="line">            cxt.closePath();</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">indexOf</span> : <span class="function"><span class="keyword">function</span>(<span class="params">arr, val</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> l = arr.length,i;</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;l;++i) <span class="keyword">if</span>(arr[i]===val) <span class="keyword">return</span> i;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $.fn.sudoku = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</div><div class="line">                instance = $.fn.sudoku.lookup[$<span class="keyword">this</span>.data(<span class="string">"sudoku"</span>)];</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(!instance)&#123;</div><div class="line"></div><div class="line">                instance = <span class="keyword">new</span> Sudoku($<span class="keyword">this</span>, options);</div><div class="line"></div><div class="line">                $.fn.sudoku.lookup[++$.fn.sudoku.lookup.i] = instance;</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.data(<span class="string">"sudoku"</span>, $.fn.sudoku.lookup.i)</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> options === <span class="string">"string"</span>)&#123;</div><div class="line">                instance[options]();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $.fn.sudoku.lookup = &#123;</div><div class="line">        <span class="attr">i</span> : <span class="number">0</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $.fn.sudoku.defaults = &#123;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line">&#125;)(Zepto);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[H5 CANVAS 幸运转盘]]></title>
      <url>http://koala.ink/2015/09/18/h5_canvas_turntable/</url>
      <content type="html"><![CDATA[<p>使用H5 的canvas 绘制的一个转盘  </p>
<p>能够配置转盘的格数，每格的图片以及文本内容  </p>
<p>点击开始 旋转转盘，结束后弹出结果  </p>
<p>DEMO运行效果：<a href="/rush/150918/">点击查看</a>  </p>
<a id="more"></a>
<h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"turntable"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"turntable-content"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"turntable-face"</span> <span class="attr">class</span>=<span class="string">"turntable-face"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"turntable-pointer"</span> <span class="attr">class</span>=<span class="string">"turntable-pointer"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"turntable-btn"</span> <span class="attr">class</span>=<span class="string">"turntable-btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/gift.png"</span> <span class="attr">id</span>=<span class="string">"turntableGift"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/smile.png"</span> <span class="attr">id</span>=<span class="string">"turntableSmile"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/pointer.png"</span> <span class="attr">id</span>=<span class="string">"turntablePointer"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h2><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.turntable</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">80px</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">30px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.turntable</span> <span class="selector-class">.turntable-content</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.turntable-content</span> <span class="selector-tag">canvas</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.turntable-content</span> <span class="selector-class">.turntable-face</span> &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.turntable-content</span> <span class="selector-class">.turntable-pointer</span> &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">33.435%</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">38.82%</span>;</div><div class="line"></div><div class="line">    <span class="comment">/*width: 22.358%;</div><div class="line">    height: 27.744%;*/</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.turntable-content</span> <span class="selector-class">.turntable-btn</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">38.82%</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">38.82%</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">22.358%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">22.358%</span>;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.turntable-btn</span> &#123;</div><div class="line"></div><div class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line">    <span class="attribute">-moz-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line">    <span class="attribute">-ms-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line">    <span class="attribute">-o-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line">    <span class="attribute">tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="attribute">-webkit-tap-highlight-color</span>:transparent;</div><div class="line">    <span class="attribute">-moz-tap-highlight-color</span>:transparent;</div><div class="line">    <span class="attribute">-ms-tap-highlight-color</span>:transparent;</div><div class="line">    <span class="attribute">-o-tap-highlight-color</span>:transparent;</div><div class="line">    <span class="attribute">tap-highlight-color</span>:transparent;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.turntable-face</span><span class="selector-class">.rotating</span>  &#123;</div><div class="line">    <span class="attribute">-webkit-animation</span>: rotating .<span class="number">8s</span> ease-in infinite;</div><div class="line">    <span class="attribute">-moz-animation</span>: rotating .<span class="number">8s</span> ease-in infinite;</div><div class="line">    <span class="attribute">-ms-animation</span>: rotating .<span class="number">8s</span> ease-in infinite;</div><div class="line">    <span class="attribute">-o-animation</span>: rotating .<span class="number">8s</span> ease-in infinite;</div><div class="line">    <span class="attribute">animation</span>: rotating .<span class="number">8s</span> ease-in infinite;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> rotating &#123;</div><div class="line">    0% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(0deg); &#125;</div><div class="line">    100% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(360deg); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> rotating &#123;</div><div class="line">    0% &#123; <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(0deg); &#125;</div><div class="line">    100% &#123; <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(360deg); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">ms</span>-<span class="keyword">keyframes</span> rotating &#123;</div><div class="line">    0% &#123; <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(0deg); &#125;</div><div class="line">    100% &#123; <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(360deg); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">o</span>-<span class="keyword">keyframes</span> rotating &#123;</div><div class="line">    0% &#123; <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(0deg); &#125;</div><div class="line">    100% &#123; <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(360deg); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> rotating &#123;</div><div class="line">    0% &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg); &#125;</div><div class="line">    100% &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.turntable-face</span><span class="selector-class">.rotateTo</span> &#123;</div><div class="line">    <span class="attribute">-webkit-animation</span>: rotateto <span class="number">5s</span> ease-out backwards;</div><div class="line">    <span class="attribute">-moz-animation</span>: rotateto <span class="number">5s</span> ease-out backwards;</div><div class="line">    <span class="attribute">-ms-animation</span>: rotateto <span class="number">5s</span> ease-out backwards;</div><div class="line">    <span class="attribute">-o-animation</span>: rotateto <span class="number">5s</span> ease-out backwards;</div><div class="line">    <span class="attribute">animation</span>: rotateto <span class="number">5s</span> ease-out backwards;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> rotateto &#123;</div><div class="line">    0% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(0deg); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> rotateto &#123;</div><div class="line">    0% &#123; <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(0deg); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">ms</span>-<span class="keyword">keyframes</span> rotateto &#123;</div><div class="line">    0% &#123; <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(0deg); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">o</span>-<span class="keyword">keyframes</span> rotateto &#123;</div><div class="line">    0% &#123; <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(0deg); &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> rotateto &#123;</div><div class="line">    0% &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/zepto.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/turntable-1.2.0.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> items = [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">text</span> : <span class="string">"谢谢参与"</span>,</div><div class="line">            <span class="attr">img</span> : <span class="string">"smile"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">text</span> : <span class="string">"100M"</span>,</div><div class="line">            <span class="attr">img</span> : <span class="string">"gift"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">text</span> : <span class="string">"谢谢参与"</span>,</div><div class="line">            <span class="attr">img</span> : <span class="string">"smile"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">text</span> : <span class="string">"200M"</span>,</div><div class="line">            <span class="attr">img</span> : <span class="string">"gift"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">text</span> : <span class="string">"谢谢参与"</span>,</div><div class="line">            <span class="attr">img</span> : <span class="string">"smile"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">text</span> : <span class="string">"50M"</span>,</div><div class="line">            <span class="attr">img</span> : <span class="string">"gift"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">text</span> : <span class="string">"谢谢参与"</span>,</div><div class="line">            <span class="attr">img</span> : <span class="string">"smile"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">text</span> : <span class="string">"100M"</span>,</div><div class="line">            <span class="attr">img</span> : <span class="string">"gift"</span></div><div class="line">        &#125;</div><div class="line">    ],turntable;</div><div class="line"></div><div class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        turntable = $(<span class="string">".turntable-content"</span>).turntable(&#123;</div><div class="line">            <span class="attr">items</span> : items</div><div class="line">        &#125;).data(<span class="string">"turntable"</span>);</div><div class="line">        turntable = $.fn.turntable.lookup[turntable];</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $(<span class="built_in">window</span>).on(<span class="string">"resize"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        turntable.init();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="转盘JS插件源码"><a href="#转盘JS插件源码" class="headerlink" title="转盘JS插件源码"></a>转盘JS插件源码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> Turntable, privateMethod;</div><div class="line"></div><div class="line">    Turntable = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Turntable</span>(<span class="params">element, options</span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="comment">/* extend options */</span></div><div class="line">            <span class="keyword">this</span>.settings = $.extend(&#123;&#125;, $.fn.turntable.defaults, options);</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.el = $(element);</div><div class="line"></div><div class="line">            <span class="comment">//console.log((new Date()).getTime());</span></div><div class="line"></div><div class="line">            <span class="keyword">this</span>.init();</div><div class="line"></div><div class="line">            <span class="comment">//console.log((new Date()).getTime());</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Turntable.prototype = &#123;</div><div class="line">            <span class="attr">PI</span> : <span class="built_in">Math</span>.PI,</div><div class="line">            <span class="attr">init</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> cxt = <span class="keyword">this</span>.initElement();</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.renderCanvas(cxt.face,cxt.pointer);</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.startTurntable();</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">initElement</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> width = <span class="keyword">this</span>.el.width();</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.el.height(width);</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.faceCanvas = <span class="keyword">this</span>.el.children(<span class="string">".turntable-face"</span>);</div><div class="line"></div><div class="line">                <span class="keyword">var</span> cxt = &#123;</div><div class="line">                    <span class="attr">face</span> : <span class="keyword">this</span>.faceCanvas.attr(&#123;<span class="attr">width</span>: width, <span class="attr">height</span>: width&#125;)[<span class="number">0</span>].getContext(<span class="string">"2d"</span>),</div><div class="line">                    <span class="attr">pointer</span> : <span class="keyword">this</span>.el.children(<span class="string">".turntable-pointer"</span>).attr(&#123;<span class="attr">width</span>: width*<span class="number">.2236</span>, <span class="attr">height</span>: width*<span class="number">.2774</span>&#125;)[<span class="number">0</span>].getContext(<span class="string">"2d"</span>)</div><div class="line">                &#125;;</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.images = &#123;</div><div class="line">                    <span class="attr">gift</span> : <span class="built_in">document</span>.getElementById(<span class="string">"turntableGift"</span>),</div><div class="line">                    <span class="attr">smile</span> :<span class="built_in">document</span>.getElementById(<span class="string">"turntableSmile"</span>),</div><div class="line">                    <span class="attr">pointer</span> :<span class="built_in">document</span>.getElementById(<span class="string">"turntablePointer"</span>)</div><div class="line">                &#125;;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> cxt;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">renderCanvas</span> : <span class="function"><span class="keyword">function</span>(<span class="params">face,pointer</span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> radius = <span class="keyword">this</span>.el.width()/ <span class="number">2</span>,</div><div class="line">                    r1 = radius*<span class="number">.91</span>,r2,</div><div class="line">                    w1 = radius*<span class="number">.06</span>,</div><div class="line">                    baseAngle = <span class="keyword">this</span>.PI/<span class="number">18</span>,</div><div class="line">                    i, j,linear,</div><div class="line">                    len = <span class="keyword">this</span>.settings.items.length,</div><div class="line">                    imgWidth = radius*<span class="number">.154</span>,</div><div class="line">                    imgHeight = radius*<span class="number">.189</span>;</div><div class="line"></div><div class="line">                face.clearRect(<span class="number">0</span>,<span class="number">0</span>,radius*<span class="number">2</span>,radius*<span class="number">2</span>);</div><div class="line">                <span class="comment">/* 外圈 */</span></div><div class="line">                face.translate(radius,radius);</div><div class="line"></div><div class="line">                face.save();</div><div class="line"></div><div class="line">                face.arc(<span class="number">0</span>,<span class="number">0</span>,r1,<span class="number">0</span>,<span class="keyword">this</span>.PI*<span class="number">2</span>);</div><div class="line"></div><div class="line">                face.lineWidth = w1;</div><div class="line">                face.shadowBlur = w1;</div><div class="line">                face.shadowColor = <span class="string">"#691c14"</span>;</div><div class="line">                face.strokeStyle = <span class="string">"#691c14"</span>;</div><div class="line">                face.stroke();</div><div class="line"></div><div class="line">                <span class="comment">/* 边框小灯 */</span></div><div class="line">                w1 = radius*<span class="number">.015</span>;</div><div class="line">                face.shadowBlur = w1;</div><div class="line">                face.shadowColor = <span class="string">"#fecb02"</span>;</div><div class="line">                face.fillStyle = <span class="string">"#fecb02"</span>;</div><div class="line"></div><div class="line">                <span class="keyword">for</span>(i=j=<span class="number">0</span>;i&lt;<span class="number">36</span>;++i,j+=baseAngle)&#123;</div><div class="line">                    face.beginPath();</div><div class="line">                    face.arc(r1*<span class="built_in">Math</span>.sin(j),-r1*<span class="built_in">Math</span>.cos(j),w1,<span class="number">0</span>,<span class="keyword">this</span>.PI*<span class="number">2</span>);</div><div class="line">                    face.fill();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">/* 内圈 */</span></div><div class="line">                r1 = radius*<span class="number">.87</span>;</div><div class="line">                w1 = radius*<span class="number">.02</span>;</div><div class="line">                face.beginPath();</div><div class="line">                face.arc(<span class="number">0</span>,<span class="number">0</span>,r1,<span class="number">0</span>,<span class="keyword">this</span>.PI*<span class="number">2</span>);</div><div class="line"></div><div class="line">                face.shadowBlur = <span class="number">0</span>;</div><div class="line">                face.lineWidth = w1;</div><div class="line">                face.strokeStyle = <span class="string">"#fc5d01"</span>;</div><div class="line">                face.stroke();</div><div class="line"></div><div class="line">                <span class="comment">/* 内圆 */</span></div><div class="line">                r1 = radius*<span class="number">.86</span>;</div><div class="line">                face.beginPath();</div><div class="line">                face.arc(<span class="number">0</span>,<span class="number">0</span>,r1,<span class="number">0</span>,<span class="keyword">this</span>.PI*<span class="number">2</span>);</div><div class="line"></div><div class="line">                linear = face.createRadialGradient(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,r1);</div><div class="line">                linear.addColorStop(<span class="number">0</span>,<span class="string">"#ffd267"</span>);</div><div class="line">                linear.addColorStop(<span class="number">1</span>,<span class="string">"#fdc236"</span>);</div><div class="line">                face.fillStyle = linear;</div><div class="line">                face.fill();</div><div class="line"></div><div class="line">                <span class="comment">/* 内圈分割 */</span></div><div class="line">                baseAngle = <span class="keyword">this</span>.PI*<span class="number">2</span>/len;</div><div class="line">                linear = face.createRadialGradient(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,r1);</div><div class="line">                linear.addColorStop(<span class="number">0</span>,<span class="string">"#ffd13d"</span>);</div><div class="line">                linear.addColorStop(<span class="number">1</span>,<span class="string">"#ff9c01"</span>);</div><div class="line">                face.fillStyle = linear;</div><div class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>,j=baseAngle;i&lt;len;++i,j+=baseAngle)&#123;</div><div class="line">                    <span class="keyword">if</span>(i&amp;<span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">                    face.beginPath();</div><div class="line">                    face.arc(<span class="number">0</span>,<span class="number">0</span>,r1,j,j+baseAngle);</div><div class="line">                    face.lineTo(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">                    face.closePath();</div><div class="line"></div><div class="line">                    face.fill();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">/* 块分割线 */</span></div><div class="line">                face.lineWidth = radius*<span class="number">.004</span>;</div><div class="line">                face.strokeStyle = <span class="string">"#fc5d01"</span>;</div><div class="line"></div><div class="line">                face.beginPath();</div><div class="line">                <span class="keyword">for</span>(i=j=<span class="number">0</span>;i&lt;len;++i,j+=baseAngle)&#123;</div><div class="line">                    face.moveTo(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">                    face.lineTo(r1*<span class="built_in">Math</span>.sin(j),-r1*<span class="built_in">Math</span>.cos(j));</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                face.stroke();</div><div class="line"></div><div class="line">                <span class="comment">/* 块信息 */</span></div><div class="line">                r1 = radius*<span class="number">.805</span>;</div><div class="line">                r2 = radius*<span class="number">.571</span>;</div><div class="line"></div><div class="line">                face.restore();</div><div class="line">                face.save();</div><div class="line">                face.font = r2*<span class="number">.35</span>*<span class="built_in">Math</span>.tan(baseAngle/<span class="number">2</span>)+<span class="string">"px Helvetica"</span>;</div><div class="line">                face.textBaseline = <span class="string">"top"</span>;</div><div class="line">                face.textAlign = <span class="string">"center"</span>;</div><div class="line">                face.fillStyle = <span class="string">"#691c14"</span>;</div><div class="line">                face.rotate(-baseAngle/<span class="number">2</span>);</div><div class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;++i)&#123;</div><div class="line">                    face.rotate(baseAngle);</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.settings.items[i].img === <span class="string">"gift"</span>)&#123;</div><div class="line">                        <span class="keyword">this</span>.images.gift.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                            face.drawImage(<span class="keyword">this</span>,-imgWidth/<span class="number">2</span>,-r1,imgWidth,imgHeight);</div><div class="line">                        &#125;;</div><div class="line">                        face.drawImage(<span class="keyword">this</span>.images.gift,-imgWidth/<span class="number">2</span>,-r1,imgWidth,imgHeight);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.settings.items[i].img === <span class="string">"smile"</span>) &#123;</div><div class="line">                        <span class="keyword">this</span>.images.smile.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                            face.drawImage(<span class="keyword">this</span>,-imgWidth/<span class="number">2</span>,-r1,imgWidth,imgWidth);</div><div class="line">                        &#125;;</div><div class="line">                        face.drawImage(<span class="keyword">this</span>.images.smile,-imgWidth/<span class="number">2</span>,-r1,imgWidth,imgWidth);</div><div class="line">                    &#125;</div><div class="line">                    face.fillText(<span class="keyword">this</span>.settings.items[i].text,<span class="number">0</span>,-r2);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">/* 指针 */</span></div><div class="line">                r1 = radius * <span class="number">.4472</span>;</div><div class="line">                r2 = radius * <span class="number">.5548</span>;</div><div class="line">                <span class="keyword">this</span>.images.pointer.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    pointer.drawImage(<span class="keyword">this</span>,<span class="number">0</span>,<span class="number">0</span>,r1,r2);</div><div class="line">                &#125;;</div><div class="line">                pointer.drawImage(<span class="keyword">this</span>.images.pointer,<span class="number">0</span>,<span class="number">0</span>,r1,r2)</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">startTurntable</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.btn = <span class="keyword">this</span>.el.children(<span class="string">"#turntable-btn"</span>);</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.isRotating = <span class="literal">false</span>;</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.btn.on(<span class="string">"click tap"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>($<span class="keyword">this</span>.isRotating) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">                    $<span class="keyword">this</span>.rotate();</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">rotate</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.isRotating) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.isRotating = <span class="literal">true</span>;</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.faceCanvas.addClass(<span class="string">"rotating"</span>);</div><div class="line"></div><div class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                    $<span class="keyword">this</span>.rotateTo();</div><div class="line"></div><div class="line">                &#125;,<span class="number">800</span>);</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">rotateTo</span> : <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(!$<span class="keyword">this</span>.faceCanvas.hasClass(<span class="string">"rotating"</span>)) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">                <span class="built_in">isNaN</span>(num) &amp;&amp; (num =privateMethod.randRange(<span class="number">0</span>,$<span class="keyword">this</span>.settings.items.length));</div><div class="line"></div><div class="line">                <span class="keyword">var</span> deg = <span class="number">360</span>*(privateMethod.randRange(<span class="number">6</span>,<span class="number">8</span>) - (num+<span class="number">.5</span>)/$<span class="keyword">this</span>.settings.items.length),msg;</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.faceCanvas.removeClass(<span class="string">"rotating"</span>).css(&#123;</div><div class="line">                    <span class="string">"-webkit-transform"</span> : <span class="string">"rotate("</span>+deg+<span class="string">"deg)"</span>,</div><div class="line">                       <span class="string">"-moz-transform"</span> : <span class="string">"rotate("</span>+deg+<span class="string">"deg)"</span>,</div><div class="line">                        <span class="string">"-ms-transform"</span> : <span class="string">"rotate("</span>+deg+<span class="string">"deg)"</span>,</div><div class="line">                         <span class="string">"-o-transform"</span> : <span class="string">"rotate("</span>+deg+<span class="string">"deg)"</span>,</div><div class="line">                            <span class="string">"transform"</span> : <span class="string">"rotate("</span>+deg+<span class="string">"deg)"</span></div><div class="line">                &#125;).addClass(<span class="string">"rotateTo"</span>);</div><div class="line"></div><div class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                    alert(<span class="string">"image: "</span>+$<span class="keyword">this</span>.settings.items[num].img+<span class="string">" text:"</span>+$<span class="keyword">this</span>.settings.items[num].text);</div><div class="line"></div><div class="line">                    $<span class="keyword">this</span>.faceCanvas.removeClass(<span class="string">"rotateTo"</span>);</div><div class="line"></div><div class="line">                    $<span class="keyword">this</span>.isRotating = <span class="literal">false</span>;</div><div class="line"></div><div class="line">                &#125;,<span class="number">5200</span>);</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">pointTo</span> : <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(!$<span class="keyword">this</span>.faceCanvas.hasClass(<span class="string">"rotating"</span>)) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">                <span class="built_in">isNaN</span>(num) &amp;&amp; (num =privateMethod.randRange(<span class="number">0</span>,$<span class="keyword">this</span>.settings.items.length));</div><div class="line"></div><div class="line">                <span class="keyword">var</span> deg = <span class="number">-360</span>*(num+<span class="number">.5</span>)/$<span class="keyword">this</span>.settings.items.length;</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.faceCanvas.css(&#123;</div><div class="line">                    <span class="string">"-webkit-transform"</span> : <span class="string">"rotate("</span>+deg+<span class="string">"deg)"</span>,</div><div class="line">                       <span class="string">"-moz-transform"</span> : <span class="string">"rotate("</span>+deg+<span class="string">"deg)"</span>,</div><div class="line">                        <span class="string">"-ms-transform"</span> : <span class="string">"rotate("</span>+deg+<span class="string">"deg)"</span>,</div><div class="line">                         <span class="string">"-o-transform"</span> : <span class="string">"rotate("</span>+deg+<span class="string">"deg)"</span>,</div><div class="line">                            <span class="string">"transform"</span> : <span class="string">"rotate("</span>+deg+<span class="string">"deg)"</span></div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Turntable;</div><div class="line">    &#125;)();</div><div class="line"></div><div class="line">    privateMethod = &#123;</div><div class="line">        <span class="attr">drawImage</span> : <span class="function"><span class="keyword">function</span>(<span class="params">img,callback</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>( img.complete )&#123;</div><div class="line">                callback.call(img);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                callback.call(img);</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">randRange</span> : <span class="function"><span class="keyword">function</span>(<span class="params">min,max</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.rand()*(max-min)+min);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">rand</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> s = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</div><div class="line">            s = ( s * <span class="number">9301</span> + <span class="number">49297</span> ) % <span class="number">233280</span>;</div><div class="line">            <span class="keyword">return</span> s / ( <span class="number">233280.0</span> );</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $.fn.turntable = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> me = $(<span class="keyword">this</span>),</div><div class="line">                instance = $.fn.turntable.lookup[me.data(<span class="string">"turntable"</span>)];</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(!instance)&#123;</div><div class="line">                $.fn.turntable.lookup[++$.fn.turntable.lookup.i] = <span class="keyword">new</span> Turntable(me,options);</div><div class="line">                me.data(<span class="string">"turntable"</span>, $.fn.turntable.lookup.i);</div><div class="line">                instance = $.fn.turntable.lookup[me.data(<span class="string">'turntable'</span>)];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> options === <span class="string">"string"</span>)&#123;</div><div class="line">                instance[options]();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $.fn.turntable.lookup = &#123;</div><div class="line">        <span class="attr">i</span>: <span class="number">0</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $.fn.turntable.defaults = &#123;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line">&#125;)(Zepto);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JQuery 侧边菜单栏插件]]></title>
      <url>http://koala.ink/2015/09/07/jquery_side_menu/</url>
      <content type="html"><![CDATA[<p>JQuery 插件自动生成侧边菜单栏。  </p>
<p>菜单目录结构使用JSON 数据格式传入。  </p>
<p>DEMO运行效果：<a href="/rush/150907/">点击查看</a>  </p>
<h2 id="menu目录结构"><a href="#menu目录结构" class="headerlink" title="menu目录结构"></a>menu目录结构</h2><p>目录结构输入格式如下：<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> item = [</div><div class="line">    &#123;</div><div class="line">        <span class="attr">title</span> : <span class="string">"title"</span>,</div><div class="line">        <span class="attr">cls</span> : <span class="string">"class"</span>,</div><div class="line">        <span class="attr">id</span> : <span class="string">"id"</span>,</div><div class="line">        <span class="attr">href</span> : <span class="string">"url"</span>,</div><div class="line">        <span class="attr">subItems</span> : [...]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">title</span> : <span class="string">"title"</span>,</div><div class="line">        <span class="attr">cls</span> : <span class="string">"class"</span>,</div><div class="line">        <span class="attr">id</span> : <span class="string">"id"</span>,</div><div class="line">        <span class="attr">href</span> : <span class="string">"url"</span>,</div><div class="line">        <span class="attr">subItems</span> : [...]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">title</span> : <span class="string">"title"</span>,</div><div class="line">        <span class="attr">cls</span> : <span class="string">"class"</span>,</div><div class="line">        <span class="attr">id</span> : <span class="string">"id"</span>,</div><div class="line">        <span class="attr">href</span> : <span class="string">"url"</span>,</div><div class="line">        <span class="attr">subItems</span> : [...]</div><div class="line">    &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<p>窗口滚动时菜单栏可固定(fixed)  </p>
<p>当菜单栏高度大于窗口高度时鼠标放置菜单栏上可滚动菜单栏  </p>
<h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-left sidebar"</span> <span class="attr">id</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 此处将生成侧边栏 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"></div><div class="line">   <span class="comment">/* 设置目录层级 */</span></div><div class="line">   <span class="keyword">var</span> items = [...];</div><div class="line"></div><div class="line">   <span class="comment">/*  */</span></div><div class="line">   $(<span class="string">"#menu"</span>).menu(&#123;</div><div class="line">       <span class="attr">width</span> : <span class="number">280</span>,            <span class="comment">// menu宽度</span></div><div class="line">       title : <span class="string">"目录标题"</span>,     <span class="comment">// menu标题</span></div><div class="line">       items : items,          <span class="comment">// menu内容结构</span></div><div class="line">       fixed : <span class="literal">true</span>,           <span class="comment">// 是否滚动固定</span></div><div class="line">       offset : <span class="string">".container"</span>   <span class="comment">// 滚动范围 若fixed: false 则无需此项</span></div><div class="line">   &#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="侧边栏JS插件源码"><a href="#侧边栏JS插件源码" class="headerlink" title="侧边栏JS插件源码"></a>侧边栏JS插件源码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> Menu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> _ = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        <span class="comment">/* defaults options */</span></div><div class="line">        _.o = &#123;</div><div class="line"></div><div class="line">            <span class="comment">// title : "title",     /* side menu title */</span></div><div class="line"></div><div class="line">            <span class="comment">// items : [],          /* side menu items - type:[json]*/</span></div><div class="line"></div><div class="line">            fixed : <span class="literal">false</span>,          <span class="comment">/* is fixed when window scroll */</span></div><div class="line"></div><div class="line">            width : <span class="number">350</span>,            <span class="comment">/* side menu width */</span></div><div class="line"></div><div class="line">            prefix : <span class="string">"x"</span>            <span class="comment">/* css class prefix */</span></div><div class="line"></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* initialization function */</span></div><div class="line">        _.init = <span class="function"><span class="keyword">function</span>(<span class="params">element,options</span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="comment">/* set options */</span></div><div class="line">            options &amp;&amp; $.extend(_.o,options);</div><div class="line"></div><div class="line">            _.el = element;</div><div class="line"></div><div class="line">            <span class="comment">/* css class */</span></div><div class="line">            _.cls = getClassName(_.o.prefix);</div><div class="line"></div><div class="line">            <span class="comment">/* templates */</span></div><div class="line">            _.tpl = getTemplate();</div><div class="line"></div><div class="line">            <span class="comment">/* render a side menu */</span></div><div class="line">            _.renderMenu();</div><div class="line"></div><div class="line">            <span class="comment">/* play menu (listen for events) */</span></div><div class="line">            _.playMenu();</div><div class="line"></div><div class="line">            _.o.fixed &amp;&amp; _.fixedMenu();</div><div class="line"></div><div class="line">            <span class="keyword">return</span> _;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* get css class name */</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getClassName</span>(<span class="params">prefix</span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="comment">/* defaults class name */</span></div><div class="line">            <span class="keyword">var</span> cls = &#123;</div><div class="line"></div><div class="line">                <span class="attr">sideMenu</span> : <span class="string">"side-menu"</span>,</div><div class="line"></div><div class="line">                <span class="attr">menuTitle</span> : <span class="string">"menu-title"</span>,</div><div class="line">                <span class="attr">menuItems</span> : <span class="string">"menu-items"</span>,</div><div class="line">                <span class="attr">menuItem</span> : <span class="string">"menu-item"</span>,</div><div class="line">                <span class="attr">menuItemTitle</span> : <span class="string">"menu-item-title"</span>,</div><div class="line"></div><div class="line">                <span class="attr">subMenuItems</span> : <span class="string">"sub-menu-items"</span>,</div><div class="line">                <span class="attr">subMenuItem</span> : <span class="string">"sub-menu-item"</span>,</div><div class="line">                <span class="attr">subMenuItemTitle</span> : <span class="string">"sub-menu-item-title"</span>,</div><div class="line">                <span class="attr">subMenuItemLevel</span> : <span class="string">"sub-menu-level"</span>,</div><div class="line"></div><div class="line">                <span class="attr">hasFold</span> : <span class="string">"item-hasFold"</span>,</div><div class="line">                <span class="attr">unfoldItem</span> : <span class="string">"item-unfolded"</span>,</div><div class="line">                <span class="attr">curItem</span> : <span class="string">"item-curr"</span>,</div><div class="line"></div><div class="line">                <span class="attr">scrolling</span> : <span class="string">"on-scrolling"</span></div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="comment">/* add prefix */</span></div><div class="line">            $.each(cls, <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</div><div class="line">                cls[key] = prefix + <span class="string">"-"</span> + value;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> cls;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* get menu templates */</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getTemplate</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> tpl = &#123;</div><div class="line"></div><div class="line">                <span class="attr">sideMenu</span> : <span class="string">"&lt;div class='&#123;cls&#125;'&gt;&#123;title&#125;&#123;items&#125;&lt;/div&gt;"</span>,</div><div class="line"></div><div class="line">                <span class="attr">menuTitle</span> : <span class="string">"&lt;div class='&#123;cls&#125;'&gt;&lt;h3&gt;&#123;title&#125;&lt;/h3&gt;&lt;/div&gt;"</span>,</div><div class="line"></div><div class="line">                <span class="attr">items</span> : <span class="string">"&lt;ul class='&#123;cls&#125;'&gt;&#123;items&#125;&lt;/ul&gt;"</span>,</div><div class="line"></div><div class="line">                <span class="attr">item</span> : <span class="string">"&lt;li class='&#123;cls&#125;' id='&#123;id&#125;'&gt;&#123;title&#125;&#123;subItems&#125;&lt;/li&gt;"</span>,</div><div class="line">                <span class="attr">title</span> : <span class="string">"&lt;div class='&#123;cls&#125;'&gt;&lt;i&gt;&lt;/i&gt;&lt;span&gt;&lt;a href='&#123;href&#125;'&gt;&#123;title&#125;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;"</span></div><div class="line"></div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> tpl;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* create a menu item or a sub menu item (li) */</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">createItem</span>(<span class="params">item,type</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> _item = _.tpl.item,</div><div class="line">                _title = _.tpl.title.replace(<span class="string">"&#123;cls&#125;"</span>, <span class="string">"&#123;cls&#125; "</span>+_.cls.subMenuItemLevel+type);</div><div class="line"></div><div class="line">            <span class="comment">/* type === 1 for level one */</span></div><div class="line">            <span class="keyword">if</span>(type === <span class="number">1</span>)&#123;</div><div class="line">                _item = _item.replace(<span class="string">"&#123;cls&#125;"</span>, _.cls.menuItem + (item.subItems?<span class="string">" "</span> + _.cls.hasFold:<span class="string">""</span>)+ (item.cls?<span class="string">" "</span> + item.cls:<span class="string">""</span>));</div><div class="line">                item.cls = _.cls.menuItemTitle;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                _item = _item.replace(<span class="string">"&#123;cls&#125;"</span>, _.cls.subMenuItem + (item.subItems?<span class="string">" "</span> + _.cls.hasFold:<span class="string">""</span>)+ (item.cls?<span class="string">" "</span> + item.cls:<span class="string">""</span>));</div><div class="line"></div><div class="line">                item.cls = _.cls.subMenuItemTitle;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(!(<span class="string">"href"</span> <span class="keyword">in</span> item))&#123;</div><div class="line">                _title = _title.replace(<span class="string">"href='&#123;href&#125;'"</span>,<span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            $.each(item,<span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</div><div class="line">                _title = _title.replace(<span class="string">"&#123;"</span>+key+<span class="string">"&#125;"</span>,value);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            _item = _item.replace(<span class="string">"&#123;title&#125;"</span>,_title);</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(<span class="string">"id"</span> <span class="keyword">in</span> item)&#123;</div><div class="line">                _item = _item.replace(<span class="string">"&#123;id&#125;"</span>,item.id);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                _item = _item.replace(<span class="string">"id='&#123;id&#125;'"</span>,<span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(<span class="string">"subItems"</span> <span class="keyword">in</span> item)&#123;</div><div class="line">                _item = _item.replace(<span class="string">"&#123;subItems&#125;"</span>,createItems(item.subItems,type+<span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                _item = _item.replace(<span class="string">"&#123;subItems&#125;"</span>,<span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> _item;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* create a menu or a sub menu (ul) */</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">createItems</span>(<span class="params">items,type</span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> _items = <span class="string">""</span>;</div><div class="line"></div><div class="line">            $.each(items,<span class="function"><span class="keyword">function</span>(<span class="params">key,item</span>)</span>&#123;</div><div class="line">                _items += createItem(item,type);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            _items = _.tpl.items.replace(<span class="string">"&#123;items&#125;"</span>,_items);</div><div class="line"></div><div class="line">            <span class="comment">/* type === 1 for level one */</span></div><div class="line">            <span class="keyword">if</span>(type === <span class="number">1</span>)&#123;</div><div class="line">                _items = _items.replace(<span class="string">"&#123;cls&#125;"</span>, _.cls.menuItems);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                _items = _items.replace(<span class="string">"&#123;cls&#125;"</span>, _.cls.subMenuItems);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> _items;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* create a side menu (div.side-menu) */</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> _menu,_title = <span class="string">""</span>;</div><div class="line"></div><div class="line">            _menu = _.tpl.sideMenu.replace(<span class="string">"&#123;cls&#125;"</span>, _.cls.sideMenu);</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(<span class="string">"title"</span> <span class="keyword">in</span> _.o) &#123;</div><div class="line">                _title =  _.tpl.menuTitle.replace(<span class="string">"&#123;cls&#125;"</span>, _.cls.menuTitle + (_.o.cls?<span class="string">" "</span>+_.o.cls:<span class="string">""</span>));</div><div class="line">                _title = _title.replace(<span class="string">"&#123;title&#125;"</span>, _.o.title);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            _menu = _menu.replace(<span class="string">"&#123;title&#125;"</span>,_title);</div><div class="line"></div><div class="line">            _menu = _menu.replace(<span class="string">"&#123;items&#125;"</span>,createItems(_.o.items,<span class="number">1</span>));</div><div class="line"></div><div class="line">            <span class="keyword">return</span> _menu;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* render a side menu / append a side menu to _.el */</span></div><div class="line">        _.renderMenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">            _.menu = $(createMenu());</div><div class="line"></div><div class="line">            _.menu.css(<span class="string">"width"</span>, _.o.width);</div><div class="line"></div><div class="line">            _.el.append(_.menu);</div><div class="line"></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* play side menu / add event listener (li&gt;div) */</span></div><div class="line">        _.playMenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">            _.menu.find(<span class="string">"ul."</span>+ _.cls.menuItems+<span class="string">" ul"</span>).hide();</div><div class="line"></div><div class="line">            _.menu.find(<span class="string">"."</span>+ _.cls.unfoldItem+<span class="string">" &gt; ul"</span>).show();</div><div class="line"></div><div class="line">            _.titles = _.menu.find(<span class="string">"."</span> + _.cls.menuItemTitle + <span class="string">",."</span> + _.cls.subMenuItemTitle);</div><div class="line"></div><div class="line">            _.titles.on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                _.clickTitle($(<span class="keyword">this</span>),_.cls.curItem);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* call this function when menu item slides done */</span></div><div class="line">        _.callback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            _.o.fixed &amp;&amp; $(<span class="built_in">window</span>).trigger(<span class="string">"scroll"</span>);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* fold a item menu (li) */</span></div><div class="line">        _.foldItem = <span class="function"><span class="keyword">function</span>(<span class="params">el,cls</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(!el.hasClass(cls)) <span class="keyword">return</span>;</div><div class="line">            el.find(<span class="string">"ul"</span>).slideUp(<span class="string">"fast"</span>, _.callback);</div><div class="line">            el.find(<span class="string">"."</span>+ cls).removeClass(cls);</div><div class="line">            el.removeClass(cls);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* unfold a menu item and fold siblings (li) */</span></div><div class="line">        _.unfoldItem = <span class="function"><span class="keyword">function</span>(<span class="params">el,cls</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(el.hasClass(cls)) <span class="keyword">return</span>;</div><div class="line">            el.addClass(cls);</div><div class="line">            el.children(<span class="string">"ul"</span>).slideDown(<span class="string">"fast"</span>, _.callback);</div><div class="line">            el.siblings().each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                _.foldItem($(<span class="keyword">this</span>),cls);</div><div class="line">            &#125;);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* toggle fold/unfold a menu item (li) */</span></div><div class="line">        _.foldToggle = <span class="function"><span class="keyword">function</span>(<span class="params">el,cls</span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(el.hasClass(cls))&#123;</div><div class="line">                _.foldItem(el,cls);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                _.unfoldItem(el,cls);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* change current selected item (li&gt;div) */</span></div><div class="line">        _.changeCurItem = <span class="function"><span class="keyword">function</span>(<span class="params">el,cls</span>)</span>&#123;</div><div class="line">            _.curItem &amp;&amp; _.curItem.removeClass(cls);</div><div class="line">            _.curItem = el;</div><div class="line">            _.curItem.addClass(cls);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* a function bind on the title click event */</span></div><div class="line">        _.clickTitle = <span class="function"><span class="keyword">function</span>(<span class="params">el,cls</span>)</span>&#123;</div><div class="line">            _.changeCurItem(el,cls);</div><div class="line">            _.foldToggle(el.closest(<span class="string">"li"</span>), _.cls.unfoldItem);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* menu resize */</span></div><div class="line">        _.resizeMenuHeight = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            _.height = _.menu.height();</div><div class="line"></div><div class="line">            _.el.css(<span class="string">"min-height"</span>, _.height);</div><div class="line"></div><div class="line">            _.maxScrollTop = _.o.offset.offset().top + _.o.offset.height() - _.height;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* fixed menu when window scroll */</span></div><div class="line">        _.fixedMenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">            _.o.offset = $(_.o.offset);</div><div class="line"></div><div class="line">            _.wHeight = $(<span class="built_in">window</span>).height();</div><div class="line"></div><div class="line">            _.resizeMenuHeight();</div><div class="line"></div><div class="line">            $(<span class="built_in">window</span>).on(<span class="string">"scroll"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                _.relocateMenu($(<span class="keyword">this</span>));</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            $(<span class="built_in">window</span>).on(<span class="string">"resize"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                _.wHeight = $(<span class="built_in">window</span>).height();</div><div class="line"></div><div class="line">                _.relocateMenu($(<span class="keyword">this</span>));</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            _.menu.on(<span class="string">"mouseenter"</span>, _.menuMouseEnter);</div><div class="line"></div><div class="line">            _.menu.on(<span class="string">"mouseleave"</span>,_.menuMouseLeave);</div><div class="line"></div><div class="line">            $(<span class="string">"body"</span>).on(<span class="string">"mousewheel"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(_.menu.hasClass(_.cls.scrolling))&#123;</div><div class="line">                    _.menuScroll(e) &amp;&amp; e.preventDefault() , e.stopPropagation();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* menu mouse enter event function */</span></div><div class="line">        _.menuMouseEnter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            _.menu.addClass(_.cls.scrolling);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* menu mouse leave event function */</span></div><div class="line">        _.menuMouseLeave = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            _.menu.removeClass(_.cls.scrolling);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* scroll menu */</span></div><div class="line">        _.menuScroll = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(_.height &lt;= _.wHeight || _.scrollTop &lt;= _.offset.top || _.scrollTop &gt; _.maxScrollTop) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">            _.locateMenu(-e.originalEvent.wheelDelta);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* relocate menu (if is a fixed menu) */</span></div><div class="line">        _.relocateMenu = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line"></div><div class="line">            _.offset = _.el.offset();</div><div class="line">            <span class="keyword">var</span> tmp = e.scrollTop() - _.scrollTop;</div><div class="line">            tmp = tmp &gt;= <span class="number">0</span> ? <span class="number">0</span> : tmp;</div><div class="line">            _.scrollTop = e.scrollTop();</div><div class="line">            _.scrollLeft = e.scrollLeft();</div><div class="line">            _.resizeMenuHeight();</div><div class="line"></div><div class="line">            _.locateMenu(tmp);</div><div class="line"></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/* locate menu (if is a fixed menu) */</span></div><div class="line">        _.locateMenu = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> tmp = -<span class="built_in">parseInt</span>(_.menu.css(<span class="string">"top"</span>));</div><div class="line">            tmp += x;</div><div class="line">            tmp = tmp &lt;= <span class="number">0</span> ? <span class="number">0</span> : tmp;</div><div class="line"></div><div class="line">            tmp = _.height &gt; _.wHeight &amp;&amp; (tmp &gt; _.height - _.wHeight &amp;&amp; _.height - _.wHeight || tmp ) ;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(_.scrollTop &lt;= _.offset.top + tmp)&#123;</div><div class="line">                _.menu.css(&#123;<span class="attr">position</span>: <span class="string">"relative"</span>,<span class="attr">top</span>: <span class="number">0</span>,<span class="attr">left</span>: <span class="number">0</span>&#125;);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(_.scrollTop &lt;= _.maxScrollTop + tmp )&#123;</div><div class="line">                _.menu.css(&#123;<span class="attr">position</span>: <span class="string">"fixed"</span>,<span class="attr">top</span>: -tmp,<span class="attr">left</span>: _.offset.left-_.scrollLeft&#125;);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                _.menu.css(&#123;<span class="attr">position</span>: <span class="string">"fixed"</span>,<span class="attr">top</span>: _.maxScrollTop-_.scrollTop,<span class="attr">left</span>: _.offset.left-_.scrollLeft&#125;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $.fn.menu = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.length;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> _ = $(<span class="keyword">this</span>),</div><div class="line">                key = <span class="string">'menu'</span>+(len&gt;<span class="number">1</span>?<span class="string">'-'</span>+ ++index:<span class="string">''</span>),</div><div class="line">                instance = (<span class="keyword">new</span> Menu()).init(_,o);</div><div class="line">            _.data(key,instance).data(<span class="string">'key'</span>,key);</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 CANVAS 时钟]]></title>
      <url>http://koala.ink/2015/08/26/h5_canvas_clock/</url>
      <content type="html"><![CDATA[<p>第一次使用H5 的canvas ，用canvas 画了个彩色时钟，可以配置时钟主题配色 ，  </p>
<p>操作时钟暂停/继续/设置时间  </p>
<p>DEMO运行效果：<a href="/rush/150826/">点击查看</a>  </p>
<p>使用时引入插件JS代码，HTML/CSS/JS部分代码如下  </p>
<h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clock"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h2><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.clock</span> &#123; <span class="attribute">position</span>: relative;&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/jquery-2.1.4.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/clock-1.1.0.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">var</span> clock = $(<span class="string">".clock"</span>).clock(&#123;</div><div class="line">        <span class="attr">width</span>: <span class="number">300</span>,       <span class="comment">// set width</span></div><div class="line">        height: <span class="number">450</span>,      <span class="comment">// set height</span></div><div class="line">        theme: <span class="string">'t1'</span>,      <span class="comment">// set theme  =&gt; 't1' 't2' 't3'</span></div><div class="line">        date: <span class="keyword">new</span> <span class="built_in">Date</span>()  <span class="comment">// set date =&gt; new Date()</span></div><div class="line">    &#125;),</div><div class="line">    data = clock.data(<span class="string">'clock'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// data.pause();      </span></div><div class="line"></div><div class="line">    <span class="comment">// data.start();    </span></div><div class="line"></div><div class="line">    <span class="comment">// data.setTime(new Date());</span></div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="时钟JS插件源码"><a href="#时钟JS插件源码" class="headerlink" title="时钟JS插件源码"></a>时钟JS插件源码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> Clock = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> _ = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        _.o = &#123;</div><div class="line">            <span class="attr">width</span>: <span class="number">300</span>,</div><div class="line">            <span class="attr">height</span>: <span class="number">450</span>,</div><div class="line">            <span class="attr">theme</span>: <span class="string">'t1'</span>,</div><div class="line">            <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        _.ts = &#123;</div><div class="line">            <span class="string">'t1'</span>: [<span class="string">'#e0e0e0'</span>, <span class="string">'#46a0ff'</span>, <span class="string">'#fc9a13'</span>, <span class="string">'#fff'</span>, <span class="string">'#666'</span>],</div><div class="line">            <span class="string">'t2'</span>: [<span class="string">'#adc3c0'</span>, <span class="string">'#576069'</span>, <span class="string">'#b9e3d9'</span>, <span class="string">'#f3f4f6'</span>, <span class="string">'#f74461'</span>],</div><div class="line">            <span class="string">'t3'</span>: [<span class="string">'#dbd0a7'</span>,<span class="string">'#123555'</span>,<span class="string">'#d1494e'</span>,<span class="string">'#e1eed2'</span>,<span class="string">'#e69b03'</span>]</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        _.init = <span class="function"><span class="keyword">function</span>(<span class="params">el, o</span>)</span>&#123;</div><div class="line"></div><div class="line">            o &amp;&amp; $.extend(_.o,o);</div><div class="line"></div><div class="line">            _.el = el;</div><div class="line"></div><div class="line">            (_.o.theme <span class="keyword">in</span> _.ts)?_.t = _.ts[_.o.theme]: _.t = _.ts[<span class="string">'t1'</span>];</div><div class="line"></div><div class="line">            _.o.height&lt; _.o.width*<span class="number">43</span>/<span class="number">30</span>?_.w=_.o.height*<span class="number">30</span>/<span class="number">43</span>:_.w=_.o.width;</div><div class="line">            _.h = _.w*<span class="number">43</span>/<span class="number">30</span>;</div><div class="line"></div><div class="line">            _.r = _.w/<span class="number">2</span>;</div><div class="line"></div><div class="line">            _.c = &#123;</div><div class="line">                <span class="attr">f</span>: &#123;</div><div class="line">                    <span class="attr">canvas</span>: $(<span class="string">'&lt;canvas&gt;'</span>)</div><div class="line">                &#125;,</div><div class="line">                <span class="attr">p</span>: &#123;</div><div class="line">                    <span class="attr">canvas</span>: $(<span class="string">'&lt;canvas&gt;'</span>)</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">var</span> x = _.c;</div><div class="line">            x.f.context = x.f.canvas[<span class="number">0</span>].getContext(<span class="string">'2d'</span>);</div><div class="line">            x.p.context = x.p.canvas[<span class="number">0</span>].getContext(<span class="string">'2d'</span>);</div><div class="line">            x.f.canvas.attr(&#123;<span class="string">"width"</span>: _.w,<span class="string">"height"</span>: _.w&#125;);</div><div class="line">            x.p.canvas.attr(&#123;<span class="string">"width"</span>: _.w,<span class="string">"height"</span>: _.h&#125;);</div><div class="line">            x.f.canvas.css(<span class="string">"position"</span>,<span class="string">"absolute"</span>);</div><div class="line">            x.p.canvas.css(<span class="string">"position"</span>,<span class="string">"absolute"</span>);</div><div class="line">            _.el.css(&#123;<span class="string">"width"</span>: _.o.width,<span class="string">"height"</span>: _.o.height&#125;);</div><div class="line">            _.el.append(x.f.canvas,x.p.canvas);</div><div class="line"></div><div class="line">            _.d = o &amp;&amp; <span class="string">'date'</span> <span class="keyword">in</span> o &amp;&amp; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()-o.date.getTime() || <span class="number">0</span>;</div><div class="line"></div><div class="line">            _.paintClock();</div><div class="line"></div><div class="line">            _.lt = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">            _.start();</div><div class="line"></div><div class="line">            <span class="keyword">return</span> _;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        _.paintClock = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            _.paintF(_.c.f.context);</div><div class="line">            _.paintPs(_.c.p.context);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// paint clock face</span></div><div class="line">        _.paintF = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> oa = &#123;</div><div class="line">                <span class="attr">context</span>: context,</div><div class="line">                <span class="attr">type</span>: <span class="string">'stroke'</span>,</div><div class="line">                <span class="attr">style</span>: _.t[<span class="number">0</span>],</div><div class="line">                <span class="attr">x</span>: _.r,</div><div class="line">                <span class="attr">y</span>: _.r,</div><div class="line">                <span class="attr">r</span>: _.r<span class="number">-1</span>,</div><div class="line">                <span class="attr">sAngle</span>: <span class="number">0</span>,</div><div class="line">                <span class="attr">eAngle</span>: <span class="built_in">Math</span>.PI*<span class="number">2</span>,</div><div class="line">                <span class="attr">counterclockwise</span>: <span class="literal">true</span></div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            paintArc(oa);</div><div class="line"></div><div class="line">            oa.type = <span class="string">'fill'</span>;</div><div class="line">            oa.style = _.t[<span class="number">3</span>];</div><div class="line">            paintArc(oa);</div><div class="line"></div><div class="line">            oa.r = <span class="number">.9</span>*_.r;</div><div class="line">            oa.style = _.t[<span class="number">0</span>];</div><div class="line">            paintArc(oa);</div><div class="line"></div><div class="line">            oa.r = <span class="number">.5</span>*_.r;</div><div class="line">            oa.style = _.t[<span class="number">3</span>];</div><div class="line">            paintArc(oa);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> ol = &#123;</div><div class="line">                <span class="attr">context</span>: context,</div><div class="line">                <span class="attr">type</span>: <span class="string">'stroke'</span>,</div><div class="line">                <span class="attr">style</span>: _.t[<span class="number">1</span>],</div><div class="line">                <span class="attr">points</span>: []</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> angle = <span class="number">0</span>,tr = <span class="number">.99</span>* _.r, er = <span class="number">.92</span>* _.r;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">60</span>;++i)&#123;</div><div class="line">                ol.points = [&#123;</div><div class="line">                    <span class="attr">x</span>: _.r+tr*<span class="built_in">Math</span>.cos(angle),</div><div class="line">                    <span class="attr">y</span>: _.r+tr*<span class="built_in">Math</span>.sin(angle)</div><div class="line">                &#125;,&#123;</div><div class="line">                    <span class="attr">x</span>: _.r+er*<span class="built_in">Math</span>.cos(angle),</div><div class="line">                    <span class="attr">y</span>: _.r+er*<span class="built_in">Math</span>.sin(angle)</div><div class="line">                &#125;];</div><div class="line">                paintLine(ol);</div><div class="line">                angle += <span class="built_in">Math</span>.PI/<span class="number">30</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            context.lineWidth = <span class="number">2</span>;</div><div class="line">            context.textBaseline = <span class="string">'middle'</span>;</div><div class="line">            context.textAlign = <span class="string">'center'</span>;</div><div class="line">            context.font = <span class="number">.15</span>*_.r+<span class="string">"px Calibri"</span>;</div><div class="line">            angle = <span class="number">0</span>,tr = <span class="number">.99</span>* _.r, er = <span class="number">.88</span>* _.r;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i= <span class="number">0</span>,num=<span class="number">3</span>;i&lt;<span class="number">12</span>;++i,++num&lt;<span class="number">13</span>?<span class="number">0</span>:num=<span class="number">1</span>)&#123;</div><div class="line">                ol.style = _.t[<span class="number">1</span>];</div><div class="line">                ol.points = [&#123;</div><div class="line">                    <span class="attr">x</span>: _.r+tr*<span class="built_in">Math</span>.cos(angle),</div><div class="line">                    <span class="attr">y</span>: _.r+tr*<span class="built_in">Math</span>.sin(angle)</div><div class="line">                &#125;,&#123;</div><div class="line">                    <span class="attr">x</span>: _.r+er*<span class="built_in">Math</span>.cos(angle),</div><div class="line">                    <span class="attr">y</span>: _.r+er*<span class="built_in">Math</span>.sin(angle)</div><div class="line">                &#125;];</div><div class="line">                paintLine(ol);</div><div class="line"></div><div class="line">                ol.style = _.t[<span class="number">3</span>];</div><div class="line">                ol.points[<span class="number">0</span>] = ol.points[<span class="number">1</span>];</div><div class="line">                ol.points[<span class="number">2</span>] = &#123;<span class="attr">x</span>: _.r,<span class="attr">y</span>: _.r&#125;;</div><div class="line">                paintLine(ol);</div><div class="line"></div><div class="line">                context.fillStyle = _.t[<span class="number">1</span>];</div><div class="line">                context.fillText(num,_.r+<span class="number">.81</span>*_.r*<span class="built_in">Math</span>.cos(angle),_.r+<span class="number">.81</span>*_.r*<span class="built_in">Math</span>.sin(angle));</div><div class="line">                angle += <span class="built_in">Math</span>.PI/<span class="number">6</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            oa.r = <span class="number">.2</span>*_.r;</div><div class="line">            oa.style = _.t[<span class="number">1</span>];</div><div class="line">            paintArc(oa);</div><div class="line"></div><div class="line">            oa.r = <span class="number">.04</span>*_.r;</div><div class="line">            oa.style = _.t[<span class="number">4</span>];</div><div class="line">            paintArc(oa);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        _.hc = <span class="number">.55</span>;</div><div class="line">        _.mc = <span class="number">.70</span>;</div><div class="line">        _.sc = <span class="number">.85</span>;</div><div class="line"></div><div class="line">        <span class="comment">// paint clock pointers and date info</span></div><div class="line">        _.paintPs = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</div><div class="line">            context.clearRect(<span class="number">0</span>,<span class="number">0</span>,_.o.width,_.o.height);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> curT = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">            curT.setTime(curT.getTime()-_.d);</div><div class="line">            <span class="keyword">var</span> h = curT.getHours(),</div><div class="line">                m = curT.getMinutes(),</div><div class="line">                s = curT.getSeconds(),sa = s*<span class="built_in">Math</span>.PI/<span class="number">30</span>,</div><div class="line">                ms = m + s/<span class="number">60</span>,ma = ms*<span class="built_in">Math</span>.PI/<span class="number">30</span>,</div><div class="line">                hs = h%<span class="number">12</span> + ms/<span class="number">60</span>,ha = hs*<span class="built_in">Math</span>.PI/<span class="number">6</span>;</div><div class="line"></div><div class="line">            context.textBaseline = <span class="string">'middle'</span>;</div><div class="line">            context.textAlign = <span class="string">'center'</span>;</div><div class="line">            context.font = <span class="number">.1</span>*_.r+<span class="string">"px YaHei"</span>;</div><div class="line">            context.fillStyle = _.t[<span class="number">2</span>];</div><div class="line">            context.fillText(h&gt;=<span class="number">12</span>?<span class="string">'PM'</span>:<span class="string">'AM'</span>,<span class="number">1.35</span>*_.r,_.r);</div><div class="line"></div><div class="line">            paintP(context,sa,_.sc);</div><div class="line">            paintP(context,ma,_.mc);</div><div class="line">            paintP(context,ha,_.hc);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> oa = &#123;</div><div class="line">                <span class="attr">context</span>: context,</div><div class="line">                <span class="attr">type</span>: <span class="string">'fill'</span>,</div><div class="line">                <span class="attr">style</span>: _.t[<span class="number">4</span>],</div><div class="line">                <span class="attr">x</span>: _.r,</div><div class="line">                <span class="attr">y</span>: _.r,</div><div class="line">                <span class="attr">r</span>: <span class="number">.02</span>*_.r,</div><div class="line">                <span class="attr">sAngle</span>: <span class="number">0</span>,</div><div class="line">                <span class="attr">eAngle</span>: <span class="built_in">Math</span>.PI*<span class="number">2</span>,</div><div class="line">                <span class="attr">counterclockwise</span>: <span class="literal">true</span></div><div class="line">            &#125;;</div><div class="line">            paintArc(oa);</div><div class="line"></div><div class="line">            _.iw = _.w/<span class="number">3</span>;</div><div class="line"></div><div class="line">            context.font = <span class="number">.4</span>*_.iw+<span class="string">"px YaHei"</span>;</div><div class="line">            context.fillStyle = <span class="string">'#000'</span>;</div><div class="line">            context.lineWidth = <span class="number">.13</span>*_.iw;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> ty = <span class="number">1.1</span>*_.w+<span class="number">.5</span>*_.iw,</div><div class="line">                tx = <span class="number">.5</span>*_.iw;</div><div class="line"></div><div class="line">            oa.y = ty;</div><div class="line">            oa.r = <span class="number">.3</span>*_.iw;</div><div class="line">            oa.type = <span class="string">'stroke'</span>;</div><div class="line">            oa.eAngle = <span class="number">-.5</span>*<span class="built_in">Math</span>.PI;</div><div class="line"></div><div class="line">            context.fillText(db(h),tx,ty);</div><div class="line">            oa.x = tx;</div><div class="line">            oa.style = _.t[<span class="number">2</span>];</div><div class="line">            oa.sAngle = ha<span class="number">-.5</span>*<span class="built_in">Math</span>.PI;</div><div class="line">            paintArc(oa);</div><div class="line"></div><div class="line">            tx += _.iw;</div><div class="line">            context.fillText(db(m),tx,ty);</div><div class="line">            oa.x = tx;</div><div class="line">            oa.style = _.t[<span class="number">1</span>];</div><div class="line">            oa.sAngle = ma<span class="number">-.5</span>*<span class="built_in">Math</span>.PI;</div><div class="line">            paintArc(oa);</div><div class="line"></div><div class="line">            tx += _.iw;</div><div class="line">            context.fillText(db(s),tx,ty);</div><div class="line">            oa.x = tx;</div><div class="line">            oa.style = _.t[<span class="number">0</span>];</div><div class="line">            oa.sAngle = sa<span class="number">-.5</span>*<span class="built_in">Math</span>.PI;</div><div class="line">            paintArc(oa);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        _.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            _.d += (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()-_.lt.getTime();</div><div class="line">            _.paintPs(_.c.p.context);</div><div class="line">            _.tm = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                _.paintPs(_.c.p.context);</div><div class="line">            &#125;,<span class="number">1000</span>);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        _.pause = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            _.lt = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">            _.tm = clearInterval(_.tm);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        _.setTime = <span class="function"><span class="keyword">function</span>(<span class="params">date</span>)</span>&#123;</div><div class="line">            _.d = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()- date.getTime();</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> db = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> x&lt;<span class="number">10</span>?<span class="string">"0"</span>+x:x;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> paintP = <span class="function"><span class="keyword">function</span>(<span class="params">context,angle,c</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> o = &#123;</div><div class="line">                <span class="attr">context</span>: context,</div><div class="line">                <span class="attr">type</span>: <span class="string">'fill'</span>,</div><div class="line">                <span class="attr">style</span>: _.t[<span class="number">2</span>],</div><div class="line">                <span class="attr">points</span>: [&#123;</div><div class="line">                    <span class="attr">x</span>: _.r*(<span class="number">1</span>+c*<span class="built_in">Math</span>.sin(angle)),</div><div class="line">                    <span class="attr">y</span>: _.r*(<span class="number">1</span>-c*<span class="built_in">Math</span>.cos(angle))</div><div class="line">                &#125;,&#123;</div><div class="line">                    <span class="attr">x</span>: _.r*(<span class="number">1</span>+<span class="number">.02</span>*<span class="built_in">Math</span>.cos(angle)),</div><div class="line">                    <span class="attr">y</span>: _.r*(<span class="number">1</span>+<span class="number">.02</span>*<span class="built_in">Math</span>.sin(angle))</div><div class="line">                &#125;,&#123;</div><div class="line">                    <span class="attr">x</span>: _.r*(<span class="number">1</span><span class="number">-.15</span>*c*<span class="built_in">Math</span>.sin(angle)),</div><div class="line">                    <span class="attr">y</span>: _.r*(<span class="number">1</span>+<span class="number">.15</span>*c*<span class="built_in">Math</span>.cos(angle))</div><div class="line">                &#125;,&#123;</div><div class="line">                    <span class="attr">x</span>: _.r*(<span class="number">1</span><span class="number">-.02</span>*<span class="built_in">Math</span>.cos(angle)),</div><div class="line">                    <span class="attr">y</span>: _.r*(<span class="number">1</span><span class="number">-.02</span>*<span class="built_in">Math</span>.sin(angle))</div><div class="line">                &#125;]</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            paintLine(o);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> paintArc = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</div><div class="line">            o.context.beginPath();</div><div class="line">            o.context.arc(o.x, o.y, o.r, o.sAngle, o.eAngle, o.counterclockwise);</div><div class="line">            <span class="keyword">if</span>(o.type===<span class="string">'stroke'</span>)&#123;</div><div class="line">                o.context.strokeStyle = o.style;</div><div class="line">                o.context.stroke();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                o.context.fillStyle = o.style;</div><div class="line">                o.context.fill();</div><div class="line">            &#125;</div><div class="line">            o.context.closePath();</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> paintLine = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> len = o.points.length;</div><div class="line">            <span class="keyword">if</span>(len&lt;<span class="number">2</span>) <span class="keyword">return</span> ;</div><div class="line">            o.context.beginPath();</div><div class="line">            o.context.moveTo(o.points[<span class="number">0</span>].x, o.points[<span class="number">0</span>].y);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;len;++i)&#123;</div><div class="line">                o.context.lineTo(o.points[i].x, o.points[i].y);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(o.type===<span class="string">'stroke'</span>)&#123;</div><div class="line">                o.context.strokeStyle = o.style;</div><div class="line">                o.context.stroke();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                o.context.lineTo(o.points[<span class="number">0</span>].x, o.points[<span class="number">0</span>].y);</div><div class="line">                o.context.fillStyle = o.style;</div><div class="line">                o.context.fill();</div><div class="line">            &#125;</div><div class="line">            o.context.closePath();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $.fn.clock = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.length;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> _ = $(<span class="keyword">this</span>),</div><div class="line">                key = <span class="string">'clock'</span>+(len&gt;<span class="number">1</span>?<span class="string">'-'</span>+ ++index:<span class="string">''</span>),</div><div class="line">                instance = (<span class="keyword">new</span> Clock().init(_,o));</div><div class="line">            _.data(key,instance).data(<span class="string">'key'</span>,key);</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS3 泡泡球]]></title>
      <url>http://koala.ink/2015/08/14/css3_ball_battle/</url>
      <content type="html"><![CDATA[<p>CSS3 实现的小球效果  </p>
<p>简单的进行边缘碰撞检测，小球碰撞边框后消失（从DOM 中remove ）。  </p>
<p>使用 A/D  控制发射器左右旋转，空格 发射小球。  </p>
<p>DEMO运行效果：<a href="/rush/150814/">点击查看</a>  </p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>H5 &amp; CSS3 Rush!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></div><div class="line">        .control-panel &#123;</div><div class="line">            position: relative;</div><div class="line">            width: 800px;</div><div class="line">            height: 500px;</div><div class="line">            margin: 80px auto 30px;</div><div class="line">            border: 2px solid #666;</div><div class="line">            -webkit-border-radius: 5px;</div><div class="line">            -moz-border-radius: 5px;</div><div class="line">            -ms-border-radius: 5px;</div><div class="line">            -o-border-radius: 5px;</div><div class="line">            border-radius: 5px;</div><div class="line">            -webkit-box-shadow: 0 0 10px 4px #666;</div><div class="line">            -moz-box-shadow: 0 0 10px 4px #666;</div><div class="line">            -ms-box-shadow: 0 0 10px 4px #666;</div><div class="line">            -o-box-shadow: 0 0 10px 4px #666;</div><div class="line">            box-shadow: 0 0 10px 4px #666;</div><div class="line">        &#125;</div><div class="line">        .ball &#123;</div><div class="line">            width: 60px;</div><div class="line">            height: 60px;</div><div class="line">            cursor: pointer;</div><div class="line">            border: 2px solid #fff;</div><div class="line">            -webkit-border-radius: 50%;</div><div class="line">            -moz-border-radius: 50%;</div><div class="line">            -ms-border-radius: 50%;</div><div class="line">            -o-border-radius: 50%;</div><div class="line">            border-radius: 50%;</div><div class="line">            -webkit-box-shadow: 0 0 10px 4px #fff inset;</div><div class="line">            -moz-box-shadow: 0 0 10px 4px #fff inset;</div><div class="line">            -ms-box-shadow: 0 0 10px 4px #fff inset;</div><div class="line">            -o-box-shadow: 0 0 10px 4px #fff inset;</div><div class="line">            box-shadow: 0 0 10px 4px #fff inset;</div><div class="line">            background: -webkit-linear-gradient(top,#fff,#ace);</div><div class="line">            background:    -moz-linear-gradient(top,#fff,#ace);</div><div class="line">            background:     -ms-linear-gradient(top,#fff,#ace);</div><div class="line">            background:      -o-linear-gradient(top,#fff,#ace);</div><div class="line">            background:         linear-gradient(top,#fff,#ace);</div><div class="line">        &#125;</div><div class="line">        .ball-hover &#123;</div><div class="line">            -webkit-box-shadow: 0 0 10px 4px #fff;</div><div class="line">            -moz-box-shadow: 0 0 10px 4px #fff;</div><div class="line">            -ms-box-shadow: 0 0 10px 4px #fff;</div><div class="line">            -o-box-shadow: 0 0 10px 4px #fff;</div><div class="line">            box-shadow: 0 0 10px 4px #fff;</div><div class="line">        &#125;</div><div class="line">        .ball-bullet &#123;</div><div class="line">            position: absolute;</div><div class="line">            z-index: -1;</div><div class="line">            opacity: 1;</div><div class="line">            transition: all 1.5s linear;</div><div class="line">            -webkit-animation: burst 1s linear 1.5s forwards;</div><div class="line">            -moz-animation: burst 1s linear 1.5s forwards;</div><div class="line">            -ms-animation: burst 1s linear 1.5s forwards;</div><div class="line">            -o-animation: burst 1s linear 1.5s forwards;</div><div class="line">            animation: burst 1s linear 1.5s forwards;</div><div class="line">        &#125;</div><div class="line">        @-webkit-keyframes burst &#123;</div><div class="line">            0% &#123; opacity: 1;transform: scale(1); &#125;</div><div class="line">            100% &#123; opacity: 0;transform: scale(1.8); &#125;</div><div class="line">        &#125;</div><div class="line">        @-moz-keyframes burst &#123;</div><div class="line">            0% &#123; opacity: 1;transform: scale(1); &#125;</div><div class="line">            100% &#123; opacity: 0;transform: scale(1.8); &#125;</div><div class="line">        &#125;</div><div class="line">        @-ms-keyframes burst &#123;</div><div class="line">            0% &#123; opacity: 1;transform: scale(1); &#125;</div><div class="line">            100% &#123; opacity: 0;transform: scale(1.8); &#125;</div><div class="line">        &#125;</div><div class="line">        @-o-keyframes burst &#123;</div><div class="line">            0% &#123; opacity: 1;transform: scale(1); &#125;</div><div class="line">            100% &#123; opacity: 0;transform: scale(1.8); &#125;</div><div class="line">        &#125;</div><div class="line">        @keyframes burst &#123;</div><div class="line">            0% &#123; opacity: 1;transform: scale(1); &#125;</div><div class="line">            100% &#123; opacity: 0;transform: scale(1.8); &#125;</div><div class="line">        &#125;</div><div class="line">        .ball-red &#123;</div><div class="line">            background: -webkit-linear-gradient(top,#fff,red);</div><div class="line">            background:    -moz-linear-gradient(top,#fff,red);</div><div class="line">            background:     -ms-linear-gradient(top,#fff,red);</div><div class="line">            background:      -o-linear-gradient(top,#fff,red);</div><div class="line">            background:         linear-gradient(top,#fff,red);</div><div class="line">        &#125;</div><div class="line">        .ball-green &#123;</div><div class="line">            background: -webkit-linear-gradient(top,#fff,forestgreen);</div><div class="line">            background:    -moz-linear-gradient(top,#fff,forestgreen);</div><div class="line">            background:     -ms-linear-gradient(top,#fff,forestgreen);</div><div class="line">            background:      -o-linear-gradient(top,#fff,forestgreen);</div><div class="line">            background:         linear-gradient(top,#fff,forestgreen);</div><div class="line">        &#125;</div><div class="line">        .ball-blue &#123;</div><div class="line">            background: -webkit-linear-gradient(top,#fff,#004c9b);</div><div class="line">            background:    -moz-linear-gradient(top,#fff,#004c9b);</div><div class="line">            background:     -ms-linear-gradient(top,#fff,#004c9b);</div><div class="line">            background:      -o-linear-gradient(top,#fff,#004c9b);</div><div class="line">            background:         linear-gradient(top,#fff,#004c9b);</div><div class="line">        &#125;</div><div class="line">        .ball-purple &#123;</div><div class="line">            background: -webkit-linear-gradient(top,#fff,purple);</div><div class="line">            background:    -moz-linear-gradient(top,#fff,purple);</div><div class="line">            background:     -ms-linear-gradient(top,#fff,purple);</div><div class="line">            background:      -o-linear-gradient(top,#fff,purple);</div><div class="line">            background:         linear-gradient(top,#fff,purple);</div><div class="line">        &#125;</div><div class="line">        .ball-yellow &#123;</div><div class="line">            background: -webkit-linear-gradient(top,#fff,yellow);</div><div class="line">            background:    -moz-linear-gradient(top,#fff,yellow);</div><div class="line">            background:     -ms-linear-gradient(top,#fff,yellow);</div><div class="line">            background:      -o-linear-gradient(top,#fff,yellow);</div><div class="line">            background:         linear-gradient(top,#fff,yellow);</div><div class="line">        &#125;</div><div class="line">        .ball-gray &#123;</div><div class="line">            background: -webkit-linear-gradient(top,#fff,gray);</div><div class="line">            background:    -moz-linear-gradient(top,#fff,gray);</div><div class="line">            background:     -ms-linear-gradient(top,#fff,gray);</div><div class="line">            background:      -o-linear-gradient(top,#fff,gray);</div><div class="line">            background:         linear-gradient(top,#fff,gray);</div><div class="line">        &#125;</div><div class="line">        .control-ball &#123;</div><div class="line">            position: absolute;</div><div class="line">            display: block;</div><div class="line">            left: 50%;</div><div class="line">            bottom: 0;</div><div class="line">            margin-left: -32px;</div><div class="line">            z-index: 99;</div><div class="line">        &#125;</div><div class="line">        .control-ball:hover &#123;</div><div class="line">            -webkit-box-shadow: 0 0 10px 4px #fff;</div><div class="line">            -moz-box-shadow: 0 0 10px 4px #fff;</div><div class="line">            -ms-box-shadow: 0 0 10px 4px #fff;</div><div class="line">            -o-box-shadow: 0 0 10px 4px #fff;</div><div class="line">            box-shadow: 0 0 10px 4px #fff;</div><div class="line">        &#125;</div><div class="line">        .control-barrel &#123;</div><div class="line">            position: absolute;</div><div class="line">            bottom: 30px;</div><div class="line">            left: 50%;</div><div class="line">            margin-left: -32px;</div><div class="line">            width: 60px;</div><div class="line">            height: 100px;</div><div class="line">            border: 2px solid #fff;</div><div class="line">            -webkit-box-shadow: 0 0 10px 4px #fff inset;</div><div class="line">            -moz-box-shadow: 0 0 10px 4px #fff inset;</div><div class="line">            -o-box-shadow: 0 0 10px 4px #fff inset;</div><div class="line">            box-shadow: 0 0 10px 4px #fff inset;</div><div class="line">            background: -webkit-linear-gradient(left,#fff,#ace);</div><div class="line">            background:    -moz-linear-gradient(left,#fff,#ace);</div><div class="line">            background:     -ms-linear-gradient(left,#fff,#ace);</div><div class="line">            background:      -o-linear-gradient(left,#fff,#ace);</div><div class="line">            background:         linear-gradient(left,#fff,#ace);</div><div class="line">            -webkit-transform-origin: 32px 102px;</div><div class="line">            -moz-transform-origin: 32px 102px;</div><div class="line">            -ms-transform-origin: 32px 102px;</div><div class="line">            -o-transform-origin: 32px 102px;</div><div class="line">            transform-origin: 32px 102px;</div><div class="line">            -webkit-transition: all .1s linear;</div><div class="line">            -moz-transition: all .1s linear;</div><div class="line">            -ms-transition: all .1s linear;</div><div class="line">            -o-transition: all .1s linear;</div><div class="line">            transition: all .1s linear;</div><div class="line">        &#125;</div><div class="line">        .control-barrel::before &#123;</div><div class="line">            content: " ";</div><div class="line">            position: absolute;</div><div class="line">            top: -21px;</div><div class="line">            left: -2px;</div><div class="line">            display: block;</div><div class="line">            width: 60px;</div><div class="line">            height: 30px;</div><div class="line">            border: 2px solid #fff;</div><div class="line">            -webkit-border-radius: 50%;</div><div class="line">            -moz-border-radius: 50%;</div><div class="line">            -ms-border-radius: 50%;</div><div class="line">            -o-border-radius: 50%;</div><div class="line">            border-radius: 50%;</div><div class="line">            -webkit-box-shadow: 0 0 13px 0 #fff inset;</div><div class="line">            -moz-box-shadow: 0 0 13px 0 #fff inset;</div><div class="line">            -ms-box-shadow: 0 0 13px 0 #fff inset;</div><div class="line">            -o-box-shadow: 0 0 13px 0 #fff inset;</div><div class="line">            box-shadow: 0 0 13px 0 #fff inset;</div><div class="line">            background: -webkit-linear-gradient(top,#333,#000,#333);</div><div class="line">            background:    -moz-linear-gradient(top,#333,#000,#333);</div><div class="line">            background:     -ms-linear-gradient(top,#333,#000,#333);</div><div class="line">            background:      -o-linear-gradient(top,#333,#000,#333);</div><div class="line">            background:         linear-gradient(top,#333,#000,#333);</div><div class="line">        &#125;</div><div class="line">        .control-barrel,</div><div class="line">        .next-balls &#123;</div><div class="line">            z-index: -1;</div><div class="line">        &#125;</div><div class="line">        .barrel-ready &#123;</div><div class="line">            width: 64px;</div><div class="line">            height: 80px;</div><div class="line">            margin-left: -34px;</div><div class="line">            -webkit-transform-origin: 34px 84px;</div><div class="line">            -moz-transform-origin: 34px 84px;</div><div class="line">            -ms-transform-origin: 34px 84px;</div><div class="line">            -o-transform-origin: 34px 84px;</div><div class="line">            transform-origin: 34px 84px;</div><div class="line">        &#125;</div><div class="line">        .barrel-ready::before &#123;</div><div class="line">            width: 64px;</div><div class="line">        &#125;</div><div class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control-panel"</span> <span class="attr">id</span>=<span class="string">"control-panel"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball control-ball"</span> <span class="attr">id</span>=<span class="string">"control-ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control-barrel"</span> <span class="attr">id</span>=<span class="string">"control-barrel"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/jquery-1.8.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ox = <span class="number">402</span>,</div><div class="line">        oy = <span class="number">474</span>,</div><div class="line">        sx = <span class="number">1</span>,</div><div class="line">        sy = <span class="number">1</span>,</div><div class="line">        sin= <span class="number">0</span>,</div><div class="line">        cos= <span class="number">1</span>,</div><div class="line">        angle = <span class="number">0</span>,</div><div class="line">        k=cos/sin,</div><div class="line">        canShoot = <span class="literal">false</span>,</div><div class="line">        leftDown = <span class="literal">false</span>,</div><div class="line">        rightDown = <span class="literal">false</span>,</div><div class="line">        blankDown = <span class="literal">false</span>,</div><div class="line">        blankUp = <span class="literal">false</span>,</div><div class="line">        controlBall = $(<span class="string">"#control-ball"</span>),</div><div class="line">        controlPanel = $(<span class="string">"#control-panel"</span>),</div><div class="line">        controlBarrel = $(<span class="string">"#control-barrel"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> colorArr = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>,<span class="string">"purple"</span>,<span class="string">"yellow"</span>,<span class="string">"gray"</span>];</div><div class="line">    <span class="keyword">var</span> colorNum = colorArr.length;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> nextSize = <span class="number">6</span>;</div><div class="line">    <span class="keyword">var</span> nextArr = <span class="keyword">new</span> <span class="built_in">Array</span>(nextSize+<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> cur=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(cur=<span class="number">0</span>;cur&lt;nextSize;++cur)&#123;</div><div class="line">        nextArr[cur] = colorArr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*colorNum)];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cur=nextSize;</div><div class="line"></div><div class="line">    controlBall.addClass(<span class="string">"ball-"</span>+nextArr[cur]);</div><div class="line"></div><div class="line">    $(<span class="built_in">document</span>).bind(<span class="string">"keydown"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="comment">//alert(e.keyCode);</span></div><div class="line">        <span class="keyword">if</span>(e.keyCode == <span class="number">32</span> )&#123;</div><div class="line">            blankDown = <span class="literal">true</span>;</div><div class="line">            blankUp = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(e.keyCode == <span class="number">65</span> )&#123;</div><div class="line">            leftDown = <span class="literal">true</span>;</div><div class="line">            rightDown = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(e.keyCode == <span class="number">68</span> )&#123;</div><div class="line">            rightDown = <span class="literal">true</span>;</div><div class="line">            leftDown = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(blankDown)&#123;</div><div class="line">            shootReady();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    $(<span class="built_in">document</span>).bind(<span class="string">"keyup"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(e.keyCode == <span class="number">32</span> )&#123;</div><div class="line">            blankDown = <span class="literal">false</span>;</div><div class="line">            blankUp = <span class="literal">true</span>;controlBarrel</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(e.keyCode == <span class="number">65</span> )&#123;</div><div class="line">            leftDown = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(e.keyCode == <span class="number">68</span> )&#123;</div><div class="line">            rightDown = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(blankUp)&#123;</div><div class="line">            shoot();</div><div class="line">            shootEnd();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(leftDown)&#123;</div><div class="line">            angle -= <span class="number">5</span>;</div><div class="line">            <span class="keyword">if</span>(angle&lt;=<span class="number">-90</span>)&#123; angle=<span class="number">-90</span>;&#125;</div><div class="line">            sin = <span class="built_in">Math</span>.sin(angle*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</div><div class="line">            cos = <span class="built_in">Math</span>.sqrt(<span class="number">1</span>-<span class="built_in">Math</span>.pow(sin,<span class="number">2</span>));</div><div class="line">            k = cos/sin;</div><div class="line">            controlBarrel.css(<span class="string">"transform"</span>,<span class="string">"rotate("</span>+angle+<span class="string">"deg)"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(rightDown)&#123;</div><div class="line">            angle += <span class="number">5</span>;</div><div class="line">            <span class="keyword">if</span>(angle&gt;=<span class="number">90</span>)&#123; angle=<span class="number">90</span>;&#125;</div><div class="line">            sin = <span class="built_in">Math</span>.sin(angle*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</div><div class="line">            cos = <span class="built_in">Math</span>.sqrt(<span class="number">1</span>-<span class="built_in">Math</span>.pow(sin,<span class="number">2</span>));</div><div class="line">            k = cos/sin;</div><div class="line">            controlBarrel.css(<span class="string">"transform"</span>,<span class="string">"rotate("</span>+angle+<span class="string">"deg)"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;,<span class="number">100</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">shootReady</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        canShoot = <span class="literal">true</span>;</div><div class="line">        controlBall.addClass(<span class="string">"ball-hover"</span>);</div><div class="line">        controlBarrel.addClass(<span class="string">"barrel-ready"</span>);</div><div class="line">        controlBarrel.css(<span class="string">"transform"</span>,<span class="string">"rotate("</span>+angle+<span class="string">"deg)"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">shootEnd</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        sx = <span class="number">1</span>;</div><div class="line">        sy = <span class="number">1</span>;</div><div class="line">        controlBall.removeClass(<span class="string">"ball-hover"</span>);</div><div class="line">        controlBarrel.removeClass(<span class="string">"barrel-ready"</span>);</div><div class="line">        controlBarrel.css(<span class="string">"transform"</span>,<span class="string">"rotate("</span>+angle+<span class="string">"deg)"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">shoot</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(!canShoot) <span class="keyword">return</span> ;</div><div class="line">        <span class="keyword">var</span> bullet = $(<span class="string">"&lt;div&gt;&lt;/div&gt;"</span>);</div><div class="line">        bullet.addClass(<span class="string">"ball ball-bullet ball-"</span>+nextArr[cur]);</div><div class="line">        bullet.css(<span class="string">"top"</span>,<span class="string">"100%"</span>);</div><div class="line">        bullet.css(<span class="string">"left"</span>,<span class="string">"50%"</span>);</div><div class="line">        bullet.css(<span class="string">"margin-left"</span>,<span class="number">100</span>*sin<span class="number">-32</span>);</div><div class="line">        bullet.css(<span class="string">"margin-top"</span>,<span class="number">-64</span><span class="number">-100</span>*cos);</div><div class="line">        controlPanel.append(bullet);</div><div class="line">        <span class="keyword">var</span> ty = <span class="number">32</span>;</div><div class="line">        <span class="keyword">var</span> tx = ox+(oy-ty)/k;</div><div class="line">        <span class="keyword">if</span>(tx&gt;<span class="number">772</span>)&#123;</div><div class="line">            tx = <span class="number">772</span>;</div><div class="line">            ty = oy-(tx-ox)*k;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tx&lt;<span class="number">32</span>)&#123;</div><div class="line">            tx = <span class="number">32</span>;</div><div class="line">            ty = oy-(tx-ox)*k;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//bullet.css("margin-bottom",-ty);</span></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            bullet.css(<span class="string">"top"</span>,ty<span class="number">-32</span>);</div><div class="line">            bullet.css(<span class="string">"left"</span>,tx<span class="number">-32</span>);</div><div class="line">            bullet.css(<span class="string">"margin"</span>,<span class="number">0</span>);</div><div class="line">        &#125;,<span class="number">30</span>);</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;bullet.remove()&#125;,<span class="number">3000</span>);</div><div class="line">        canShoot = <span class="literal">false</span>;</div><div class="line">        controlBall.removeClass(<span class="string">"ball-"</span>+nextArr[cur]);</div><div class="line">        nextArr[cur] = colorArr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*colorNum)];</div><div class="line">        cur = (cur+<span class="number">1</span>)%nextSize;</div><div class="line">        controlBall.addClass(<span class="string">"ball-"</span>+nextArr[cur]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS3简单动画]]></title>
      <url>http://koala.ink/2015/08/10/css3_easy_aimation/</url>
      <content type="html"><![CDATA[<p>刚开始学习H5 方面的知识，看了CSS3 的基础属性，自己动手写了个小DEMO  </p>
<p>主要是对transform 属性的使用，元素位移、旋转、缩放的操作，以及改变transform操作原点  </p>
<p>DEMO运行效果：<a href="/rush/150810/">点击查看</a><br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>H5 &amp; CSS3 Rush<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></div><div class="line">        .content &#123;</div><div class="line">            min-width: 1000px;</div><div class="line">            width: 100%;</div><div class="line">            height: 100%;</div><div class="line">        &#125;</div><div class="line">        .content-head &#123;</div><div class="line">            display: inline-block;</div><div class="line">            width: 520px;</div><div class="line">            font: italic 900 78px/1 myfont;</div><div class="line">            text-align: center;</div><div class="line">            -webkit-text-shadow: -10px 10px 10px #666;</div><div class="line">            -moz-text-shadow: -10px 10px 10px #666;</div><div class="line">            -ms-text-shadow: -10px 10px 10px #666;</div><div class="line">            -o-text-shadow: -10px 10px 10px #666;</div><div class="line">            text-shadow: -10px 10px 10px #666;</div><div class="line">            opacity: 1;</div><div class="line">            -webkit-transform-origin: 10px 41px;</div><div class="line">            -moz-transform-origin: 10px 41px;</div><div class="line">            -ms-transform-origin: 10px 41px;</div><div class="line">            -o-transform-origin: 10px 41px;</div><div class="line">            transform-origin: 10px 41px;</div><div class="line">            -webkit-animation: animation1 4s ease-in-out forwards,animation2 5s ease-in-out 4s forwards,animation3 3s ease-in 9s forwards,animation4 4s ease-in 12s forwards;</div><div class="line">            -moz-animation: animation1 4s ease-in-out forwards,animation2 5s ease-in-out 4s forwards,animation3 3s ease-in 9s forwards,animation4 4s ease-in 12s forwards;</div><div class="line">            -o-animation: animation1 4s ease-in-out forwards,animation2 5s ease-in-out 4s forwards,animation3 3s ease-in 9s forwards,animation4 4s ease-in 12s forwards;</div><div class="line">            animation: animation1 4s ease-in-out forwards,animation2 5s ease-in-out 4s forwards,animation3 3s ease-in 9s forwards,animation4 4s ease-in 12s forwards;</div><div class="line">        &#125;</div><div class="line">        @-webkit-keyframes animation1 &#123;</div><div class="line">            0% &#123;  opacity: 0;-webkit-transform: translate(0);&#125;</div><div class="line">            50%&#123;  opacity: 1;-webkit-transform: translate(210px);&#125;</div><div class="line">            70%&#123;  opacity: 1;-webkit-transform: translate(230px);&#125;</div><div class="line">            100%&#123; opacity: 0;-webkit-transform: translate(420px);&#125;</div><div class="line">        &#125;</div><div class="line">        @-webkit-keyframes animation2 &#123;</div><div class="line">            0%  &#123;opacity: 0;&#125;</div><div class="line">            20%  &#123;opacity: 1;&#125;</div><div class="line">            40% &#123;opacity: 0; &#125;</div><div class="line">            60% &#123;opacity: 1;&#125;</div><div class="line">            80% &#123;opacity: 0; &#125;</div><div class="line">            100% &#123;opacity: 1;&#125;</div><div class="line">        &#125;</div><div class="line">        @-webkit-keyframes animation3 &#123;</div><div class="line">            0% &#123; -webkit-transform: translate(420px);&#125;</div><div class="line">            25% &#123; -webkit-transform: translate(420px);&#125;</div><div class="line">            50% &#123; -webkit-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            55% &#123; -webkit-transform: translate(420px) rotate(11deg);&#125;</div><div class="line">            60% &#123; -webkit-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            65% &#123; -webkit-transform: translate(420px) rotate(12deg);&#125;</div><div class="line">            70% &#123; -webkit-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            75% &#123; -webkit-transform: translate(420px) rotate(13deg);&#125;</div><div class="line">            80% &#123; -webkit-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            85% &#123; -webkit-transform: translate(420px) rotate(14deg);&#125;</div><div class="line">            90% &#123; -webkit-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            95% &#123; -webkit-transform: translate(420px) rotate(15deg);&#125;</div><div class="line">            100% &#123;-webkit-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">        &#125;</div><div class="line">        @-webkit-keyframes animation4 &#123;</div><div class="line">            0% &#123; -webkit-transform: translate(420px) rotate(16deg); &#125;</div><div class="line">            10% &#123; -webkit-transform-origin:510px 41px;-webkit-transform: translate(401px,137px) rotate(16deg); &#125;</div><div class="line">            25% &#123; -webkit-transform: translate(401px,400px) rotate(16deg); &#125;</div><div class="line">            50% &#123; -webkit-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            55% &#123; -webkit-transform: translate(401px,400px) rotate(8deg); &#125;</div><div class="line">            60% &#123; -webkit-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            65% &#123; -webkit-transform: translate(401px,400px) rotate(5deg); &#125;</div><div class="line">            70% &#123; -webkit-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            75% &#123; -webkit-transform: translate(401px,400px) rotate(3deg); &#125;</div><div class="line">            80% &#123; -webkit-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            85% &#123; -webkit-transform: translate(401px,400px) rotate(2deg); &#125;</div><div class="line">            90% &#123; -webkit-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            95% &#123; -webkit-transform: translate(401px,400px) rotate(1deg); &#125;</div><div class="line">            100% &#123; -webkit-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @-moz-keyframes animation1 &#123;</div><div class="line">            0% &#123;  opacity: 0;-moz-transform: translate(0);&#125;</div><div class="line">            50%&#123;  opacity: 1;-moz-transform: translate(210px);&#125;</div><div class="line">            70%&#123;  opacity: 1;-moz-transform: translate(230px);&#125;</div><div class="line">            100%&#123; opacity: 0;-moz-transform: translate(420px);&#125;</div><div class="line">        &#125;</div><div class="line">        @-moz-keyframes animation2 &#123;</div><div class="line">            0%  &#123;opacity: 0;&#125;</div><div class="line">            20%  &#123;opacity: 1;&#125;</div><div class="line">            40% &#123;opacity: 0; &#125;</div><div class="line">            60% &#123;opacity: 1;&#125;</div><div class="line">            80% &#123;opacity: 0; &#125;</div><div class="line">            100% &#123;opacity: 1;&#125;</div><div class="line">        &#125;</div><div class="line">        @-moz-keyframes animation3 &#123;</div><div class="line">            0% &#123; -moz-transform: translate(420px);&#125;</div><div class="line">            25% &#123; -moz-transform: translate(420px);&#125;</div><div class="line">            50% &#123; -moz-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            55% &#123; -moz-transform: translate(420px) rotate(11deg);&#125;</div><div class="line">            60% &#123; -moz-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            65% &#123; -moz-transform: translate(420px) rotate(12deg);&#125;</div><div class="line">            70% &#123; -moz-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            75% &#123; -moz-transform: translate(420px) rotate(13deg);&#125;</div><div class="line">            80% &#123; -moz-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            85% &#123; -moz-transform: translate(420px) rotate(14deg);&#125;</div><div class="line">            90% &#123; -moz-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            95% &#123; -moz-transform: translate(420px) rotate(15deg);&#125;</div><div class="line">            100% &#123;-moz-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">        &#125;</div><div class="line">        @-moz-keyframes animation4 &#123;</div><div class="line">            0% &#123; -moz-transform: translate(420px) rotate(16deg); &#125;</div><div class="line">            10% &#123; -moz-transform-origin:510px 41px;-moz-transform: translate(401px,137px) rotate(16deg); &#125;</div><div class="line">            25% &#123; -moz-transform: translate(401px,400px) rotate(16deg); &#125;</div><div class="line">            50% &#123; -moz-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            55% &#123; -moz-transform: translate(401px,400px) rotate(8deg); &#125;</div><div class="line">            60% &#123; -moz-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            65% &#123; -moz-transform: translate(401px,400px) rotate(5deg); &#125;</div><div class="line">            70% &#123; -moz-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            75% &#123; -moz-transform: translate(401px,400px) rotate(3deg); &#125;</div><div class="line">            80% &#123; -moz-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            85% &#123; -moz-transform: translate(401px,400px) rotate(2deg); &#125;</div><div class="line">            90% &#123; -moz-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            95% &#123; -moz-transform: translate(401px,400px) rotate(1deg); &#125;</div><div class="line">            100% &#123; -moz-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @-ms-keyframes animation1 &#123;</div><div class="line">            0% &#123;  opacity: 0;-ms-transform: translate(0);&#125;</div><div class="line">            50%&#123;  opacity: 1;-ms-transform: translate(210px);&#125;</div><div class="line">            70%&#123;  opacity: 1;-ms-transform: translate(230px);&#125;</div><div class="line">            100%&#123; opacity: 0;-ms-transform: translate(420px);&#125;</div><div class="line">        &#125;</div><div class="line">        @-ms-keyframes animation2 &#123;</div><div class="line">            0%  &#123;opacity: 0;&#125;</div><div class="line">            20%  &#123;opacity: 1;&#125;</div><div class="line">            40% &#123;opacity: 0; &#125;</div><div class="line">            60% &#123;opacity: 1;&#125;</div><div class="line">            80% &#123;opacity: 0; &#125;</div><div class="line">            100% &#123;opacity: 1;&#125;</div><div class="line">        &#125;</div><div class="line">        @-ms-keyframes animation3 &#123;</div><div class="line">            0% &#123; -ms-transform: translate(420px);&#125;</div><div class="line">            25% &#123; -ms-transform: translate(420px);&#125;</div><div class="line">            50% &#123; -ms-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            55% &#123; -ms-transform: translate(420px) rotate(11deg);&#125;</div><div class="line">            60% &#123; -ms-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            65% &#123; -ms-transform: translate(420px) rotate(12deg);&#125;</div><div class="line">            70% &#123; -ms-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            75% &#123; -ms-transform: translate(420px) rotate(13deg);&#125;</div><div class="line">            80% &#123; -ms-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            85% &#123; -ms-transform: translate(420px) rotate(14deg);&#125;</div><div class="line">            90% &#123; -ms-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            95% &#123; -ms-transform: translate(420px) rotate(15deg);&#125;</div><div class="line">            100% &#123;-ms-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">        &#125;</div><div class="line">        @-ms-keyframes animation4 &#123;</div><div class="line">            0% &#123; -ms-transform: translate(420px) rotate(16deg); &#125;</div><div class="line">            10% &#123; -ms-transform-origin:510px 41px;-ms-transform: translate(401px,137px) rotate(16deg); &#125;</div><div class="line">            25% &#123; -ms-transform: translate(401px,400px) rotate(16deg); &#125;</div><div class="line">            50% &#123; -ms-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            55% &#123; -ms-transform: translate(401px,400px) rotate(8deg); &#125;</div><div class="line">            60% &#123; -ms-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            65% &#123; -ms-transform: translate(401px,400px) rotate(5deg); &#125;</div><div class="line">            70% &#123; -ms-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            75% &#123; -ms-transform: translate(401px,400px) rotate(3deg); &#125;</div><div class="line">            80% &#123; -ms-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            85% &#123; -ms-transform: translate(401px,400px) rotate(2deg); &#125;</div><div class="line">            90% &#123; -ms-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            95% &#123; -ms-transform: translate(401px,400px) rotate(1deg); &#125;</div><div class="line">            100% &#123; -ms-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @-o-keyframes animation1 &#123;</div><div class="line">            0% &#123;  opacity: 0;-o-transform: translate(0);&#125;</div><div class="line">            50%&#123;  opacity: 1;-o-transform: translate(210px);&#125;</div><div class="line">            70%&#123;  opacity: 1;-o-transform: translate(230px);&#125;</div><div class="line">            100%&#123; opacity: 0;-o-transform: translate(420px);&#125;</div><div class="line">        &#125;</div><div class="line">        @-o-keyframes animation2 &#123;</div><div class="line">            0%  &#123;opacity: 0;&#125;</div><div class="line">            20%  &#123;opacity: 1;&#125;</div><div class="line">            40% &#123;opacity: 0; &#125;</div><div class="line">            60% &#123;opacity: 1;&#125;</div><div class="line">            80% &#123;opacity: 0; &#125;</div><div class="line">            100% &#123;opacity: 1;&#125;</div><div class="line">        &#125;</div><div class="line">        @-o-keyframes animation3 &#123;</div><div class="line">            0% &#123; -o-transform: translate(420px);&#125;</div><div class="line">            25% &#123; -o-transform: translate(420px);&#125;</div><div class="line">            50% &#123; -o-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            55% &#123; -o-transform: translate(420px) rotate(11deg);&#125;</div><div class="line">            60% &#123; -o-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            65% &#123; -o-transform: translate(420px) rotate(12deg);&#125;</div><div class="line">            70% &#123; -o-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            75% &#123; -o-transform: translate(420px) rotate(13deg);&#125;</div><div class="line">            80% &#123; -o-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            85% &#123; -o-transform: translate(420px) rotate(14deg);&#125;</div><div class="line">            90% &#123; -o-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            95% &#123; -o-transform: translate(420px) rotate(15deg);&#125;</div><div class="line">            100% &#123;-o-transform: translate(420px) rotate(16deg);&#125;</div><div class="line">        &#125;</div><div class="line">        @-o-keyframes animation4 &#123;</div><div class="line">            0% &#123; -o-transform: translate(420px) rotate(16deg); &#125;</div><div class="line">            10% &#123; -o-transform-origin:510px 41px;-o-transform: translate(401px,137px) rotate(16deg); &#125;</div><div class="line">            25% &#123; -o-transform: translate(401px,400px) rotate(16deg); &#125;</div><div class="line">            50% &#123; -o-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            55% &#123; -o-transform: translate(401px,400px) rotate(8deg); &#125;</div><div class="line">            60% &#123; -o-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            65% &#123; -o-transform: translate(401px,400px) rotate(5deg); &#125;</div><div class="line">            70% &#123; -o-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            75% &#123; -o-transform: translate(401px,400px) rotate(3deg); &#125;</div><div class="line">            80% &#123; -o-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            85% &#123; -o-transform: translate(401px,400px) rotate(2deg); &#125;</div><div class="line">            90% &#123; -o-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            95% &#123; -o-transform: translate(401px,400px) rotate(1deg); &#125;</div><div class="line">            100% &#123; -o-transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @keyframes animation1 &#123;</div><div class="line">            0% &#123;  opacity: 0;transform: translate(0);&#125;</div><div class="line">            50%&#123;  opacity: 1;transform: translate(210px);&#125;</div><div class="line">            70%&#123;  opacity: 1;transform: translate(230px);&#125;</div><div class="line">            100%&#123; opacity: 0;transform: translate(420px);&#125;</div><div class="line">        &#125;</div><div class="line">        @keyframes animation2 &#123;</div><div class="line">            0%  &#123;opacity: 0;&#125;</div><div class="line">            20%  &#123;opacity: 1;&#125;</div><div class="line">            40% &#123;opacity: 0; &#125;</div><div class="line">            60% &#123;opacity: 1;&#125;</div><div class="line">            80% &#123;opacity: 0; &#125;</div><div class="line">            100% &#123;opacity: 1;&#125;</div><div class="line">        &#125;</div><div class="line">        @keyframes animation3 &#123;</div><div class="line">            0% &#123; transform: translate(420px);&#125;</div><div class="line">            25% &#123; transform: translate(420px);&#125;</div><div class="line">            50% &#123; transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            55% &#123; transform: translate(420px) rotate(11deg);&#125;</div><div class="line">            60% &#123; transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            65% &#123; transform: translate(420px) rotate(12deg);&#125;</div><div class="line">            70% &#123; transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            75% &#123; transform: translate(420px) rotate(13deg);&#125;</div><div class="line">            80% &#123; transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            85% &#123; transform: translate(420px) rotate(14deg);&#125;</div><div class="line">            90% &#123; transform: translate(420px) rotate(16deg);&#125;</div><div class="line">            95% &#123; transform: translate(420px) rotate(15deg);&#125;</div><div class="line">            100% &#123;transform: translate(420px) rotate(16deg);&#125;</div><div class="line">        &#125;</div><div class="line">        @keyframes animation4 &#123;</div><div class="line">            0% &#123; transform: translate(420px) rotate(16deg); &#125;</div><div class="line">            10% &#123; transform-origin:510px 41px;transform: translate(401px,137px) rotate(16deg); &#125;</div><div class="line">            25% &#123; transform: translate(401px,400px) rotate(16deg); &#125;</div><div class="line">            50% &#123; transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            55% &#123; transform: translate(401px,400px) rotate(8deg); &#125;</div><div class="line">            60% &#123; transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            65% &#123; transform: translate(401px,400px) rotate(5deg); &#125;</div><div class="line">            70% &#123; transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            75% &#123; transform: translate(401px,400px) rotate(3deg); &#125;</div><div class="line">            80% &#123; transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            85% &#123; transform: translate(401px,400px) rotate(2deg); &#125;</div><div class="line">            90% &#123; transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">            95% &#123; transform: translate(401px,400px) rotate(1deg); &#125;</div><div class="line">            100% &#123; transform: translate(401px,400px) rotate(0deg); &#125;</div><div class="line">        &#125;</div><div class="line">        .demo-list &#123;</div><div class="line">            margin-left: 400px;</div><div class="line">            list-style-type: none;</div><div class="line">        &#125;</div><div class="line">        .demo-items &#123;</div><div class="line">            opacity: 0;</div><div class="line">            height: 50px;</div><div class="line">            width: 390px;</div><div class="line">            text-align: center;</div><div class="line">            font: italic 900 30px/50px myfont;</div><div class="line">            -webkit-animation: animation5 3s linear 16s forwards;</div><div class="line">            -o-animation: animation5 3s linear 16s forwards;</div><div class="line">            animation: animation5 3s linear 16s forwards;</div><div class="line">        &#125;</div><div class="line">        .demo-items a &#123;</div><div class="line">            color: inherit;</div><div class="line">            text-decoration: none;</div><div class="line">            text-shadow: -3px 3px 5px #666;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @keyframes animation5 &#123;</div><div class="line">            0%&#123;opacity:0;transform: scale(1.3);&#125;</div><div class="line">            50%&#123;opacity: 0.5;transform: scale(1.1);&#125;</div><div class="line">            100%&#123;opacity: 1;transform: scale(1);&#125;</div><div class="line">        &#125;</div><div class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"content-head"</span>&gt;</span>H5 &amp; CSS3 Rush！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"demo-list"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"demo-items"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Demo NO.1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"demo-items"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Demo NO.2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"demo-items"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Demo NO.0<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"demo-items"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Demo NO.0<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[扩展欧几里得算法及实现]]></title>
      <url>http://koala.ink/2014/12/02/exgcd/</url>
      <content type="html"><![CDATA[<p>欧几里得算法，即辗转相除法，用于求整数a,b的最大公约数。  </p>
<p>欧几里得算法C++实现代码：（无需确定 a,b 大小关系）  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> b?gcd(b,a%b):a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>扩展欧几里得算法：设a和b不全为0，则存在整数x和y，使得 gcd(a,b) = xa + yb<br>证明： 假设 a&gt;b  </p>
<p>当 b==0 时：gcd(a,b) = a , 此时 x=1 , y=0<br><a id="more"></a><br>当 ab!=0时：  </p>
<p>设： x1a + y1b = gcd(a,b)  </p>
<p>x2b + y2(a%b) = gcd(b,a%b)  </p>
<p>因为 gcd(a,b) == gcd(b,a%b)  </p>
<p>所以 x1a + y1b = x2b + y2(a%b) = x2b + y2(a-a/b<em>b) =y2a  + x2b - y2(a/b)\</em>b  </p>
<p>因此 x1 = y2 , y1 = x2-(a/b)y2  </p>
<p>这样就能够基于 x2, y2 求出 x1 , y1 的解。  </p>
<p>扩展欧几里得C++实现代码 01：  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Exgcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span>&amp; x,<span class="keyword">long</span> <span class="keyword">long</span>&amp; y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</div><div class="line">        x=<span class="number">1</span>;</div><div class="line">        y=<span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> d=exgcd(b,a%b,x,y);</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp=x;</div><div class="line">    x=y;</div><div class="line">    y=tmp-a/b*y;</div><div class="line">    <span class="keyword">return</span> d;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>扩展欧几里得C++实现代码 02：  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Exgcd</span><span class="params">(ll a,ll b,ll&amp; d,ll&amp; x,ll&amp; y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!b)&#123; d=a;x=<span class="number">1</span>;y=<span class="number">0</span>;<span class="keyword">return</span> ;&#125;</div><div class="line">    Exgcd(b,a%b,d,y,x);</div><div class="line">    y -= a/b*x ;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java语言程序设计基础篇 第八章 课后编程答案]]></title>
      <url>http://koala.ink/2014/04/06/Java/</url>
      <content type="html"><![CDATA[<h2 id="ch0801"><a href="#ch0801" class="headerlink" title="ch0801"></a>ch0801</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ch0801</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</div><div class="line">    Rectangle r1 = <span class="keyword">new</span> Rectangle(<span class="number">4</span>,<span class="number">40</span>) ;</div><div class="line">    Rectangle r2 = <span class="keyword">new</span> Rectangle(<span class="number">3.5</span>,<span class="number">35.9</span>) ;</div><div class="line">    System.out.println(<span class="string">"Rectangle1 : width = "</span> + r1.width + <span class="string">" , height = "</span> + r1.height + <span class="string">" , area = "</span> + r1.getArea() + <span class="string">" , perimeter = "</span> + r1.getPerimeter() ) ;</div><div class="line">    System.out.println(<span class="string">"Rectangle2 : width = "</span> + r2.width + <span class="string">" , height = "</span> + r2.height + <span class="string">" , area = "</span> + r2.getArea() + <span class="string">" , perimeter = "</span> + r2.getPerimeter() ) ;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span></span>&#123;</div><div class="line">  <span class="keyword">double</span> width ;</div><div class="line">  <span class="keyword">double</span> height ;</div><div class="line">  Rectangle()&#123;</div><div class="line">    width = height = <span class="number">1</span> ;</div><div class="line">  &#125;</div><div class="line">  Rectangle( <span class="keyword">double</span> w , <span class="keyword">double</span> h )&#123;</div><div class="line">    width = w ;</div><div class="line">    height = h ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> width*height ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getPerimeter</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (width+height)*<span class="number">2</span> ;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="ch0802"><a href="#ch0802" class="headerlink" title="ch0802"></a>ch0802</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ch0802</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</div><div class="line">    Stock myStock = <span class="keyword">new</span> Stock(<span class="string">"JAVA"</span>,<span class="string">"Sum Microsystems Inc"</span>) ;</div><div class="line">    myStock.setPreviousClosingPrice(<span class="number">4.5</span>) ;</div><div class="line">    myStock.setCurrentPrice(<span class="number">4.35</span>) ;</div><div class="line">    System.out.println(<span class="string">"Has changed "</span> + myStock.getChangePerent() ) ;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stock</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> String symbol ;</div><div class="line">  <span class="keyword">private</span> String name ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> previousClosingPrice ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> currentPrice ;</div><div class="line">  Stock()&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  Stock( String symbol , String name )&#123;</div><div class="line">    <span class="keyword">this</span>.symbol = symbol ;</div><div class="line">    <span class="keyword">this</span>.name = name ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getChangePerent</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (currentPrice-previousClosingPrice)/previousClosingPrice ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setPreviousClosingPrice</span><span class="params">( <span class="keyword">double</span> previousClosingPrice )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.previousClosingPrice = previousClosingPrice ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setCurrentPrice</span><span class="params">( <span class="keyword">double</span> currentPrice )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.currentPrice = currentPrice ;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ch0803"><a href="#ch0803" class="headerlink" title="ch0803"></a>ch0803</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ch0803</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</div><div class="line">    Date date = <span class="keyword">new</span> Date() ;</div><div class="line">    <span class="keyword">long</span> goesTime = <span class="number">10000</span> ;</div><div class="line">    <span class="keyword">int</span> times = <span class="number">1</span> ;</div><div class="line">    <span class="keyword">while</span>( times &lt;= <span class="number">8</span> )&#123;</div><div class="line">      date.setTime(goesTime);</div><div class="line">      System.out.println(date.toString()) ;</div><div class="line">      goesTime = goesTime * <span class="number">10</span> ;</div><div class="line">      times++ ;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ch0804"><a href="#ch0804" class="headerlink" title="ch0804"></a>ch0804</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ch0804</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</div><div class="line">    Random random = <span class="keyword">new</span> Random(<span class="number">1000</span>) ;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">while</span>( i &lt; <span class="number">50</span> )&#123;</div><div class="line">      <span class="keyword">int</span> x = random.nextInt(<span class="number">100</span>) ;</div><div class="line">      System.out.println(x) ;</div><div class="line">      ++i ;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ch0805"><a href="#ch0805" class="headerlink" title="ch0805"></a>ch0805</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.GregorianCalendar;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ch0805</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</div><div class="line">    myGregorianCalendar calendar = <span class="keyword">new</span> myGregorianCalendar() ;</div><div class="line">    calendar.show_date() ;</div><div class="line">    calendar.set(<span class="number">123456789765L</span>) ;</div><div class="line">    calendar.show_date() ;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">myGregorianCalendar</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> GregorianCalendar ca ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> year ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> month ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> day ;</div><div class="line">  myGregorianCalendar()&#123;</div><div class="line">    ca = <span class="keyword">new</span> GregorianCalendar() ;</div><div class="line">    year = ca.get(GregorianCalendar.YEAR) ;</div><div class="line">    month = ca.get(GregorianCalendar.MONTH) + <span class="number">1</span> ;</div><div class="line">    day = ca.get(GregorianCalendar.DAY_OF_MONTH) ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">show_date</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.println( <span class="string">"Current date is "</span> + month + <span class="string">" "</span> + day + <span class="string">", "</span> + year ) ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">( <span class="keyword">long</span> d )</span></span>&#123;</div><div class="line">    ca.setTimeInMillis(d) ;</div><div class="line">    year = ca.get(GregorianCalendar.YEAR) ;</div><div class="line">    month = ca.get(GregorianCalendar.MONTH) + <span class="number">1</span> ;</div><div class="line">    day = ca.get(GregorianCalendar.DAY_OF_MONTH) ;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ch0806"><a href="#ch0806" class="headerlink" title="ch0806"></a>ch0806</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ch0806</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        PrintCalendar myCalendar = <span class="keyword">new</span> PrintCalendar() ;</div><div class="line"></div><div class="line">        myCalendar.print() ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintCalendar</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> year ;</div><div class="line">    <span class="keyword">int</span> month ;</div><div class="line">    <span class="comment">// static String output ;</span></div><div class="line">    PrintCalendar()&#123;</div><div class="line"></div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in) ;</div><div class="line"></div><div class="line">        System.out.print(<span class="string">"Enter Year : "</span>) ;</div><div class="line"></div><div class="line">        year = in.nextInt() ;</div><div class="line"></div><div class="line">        System.out.print(<span class="string">"Enter Month: "</span>) ;</div><div class="line"></div><div class="line">        month = in.nextInt() ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> st = <span class="keyword">this</span>.getFirst() ;</div><div class="line">        String output = <span class="string">""</span> ;</div><div class="line">        output += <span class="string">"      "</span> + monthInEnglish() + <span class="string">", "</span> + year + <span class="string">"\n"</span> ;</div><div class="line">        output += <span class="string">"-------------------------------\n"</span> ;</div><div class="line">        output += <span class="string">" Sum Mon Tue Wed Thu Fri Sat\n"</span> ;</div><div class="line">        <span class="keyword">int</span> days = getMonthDays() ;</div><div class="line">        <span class="keyword">int</span> p_day = <span class="number">1</span> ;</div><div class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; st ; ++i )&#123;</div><div class="line">            output += <span class="string">"    "</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>( st &lt;= <span class="number">6</span> )&#123;</div><div class="line">            output += <span class="string">"   "</span> + p_day ;</div><div class="line">            p_day++ ;</div><div class="line">            st++ ;</div><div class="line">        &#125;</div><div class="line">        output += <span class="string">"\n"</span> ;</div><div class="line">        <span class="keyword">while</span>( <span class="keyword">true</span> )&#123;</div><div class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">7</span> ; ++i )&#123;</div><div class="line">                output += <span class="string">"  "</span> + (p_day&lt;<span class="number">10</span>?(<span class="string">" "</span>+p_day):(p_day)) ;</div><div class="line">                p_day++ ;</div><div class="line">                <span class="keyword">if</span>( p_day &gt; days )</div><div class="line">                    <span class="keyword">break</span> ;</div><div class="line">            &#125;</div><div class="line">            output += <span class="string">"\n"</span> ;</div><div class="line">            <span class="keyword">if</span>( p_day &gt; days )</div><div class="line">                <span class="keyword">break</span> ;</div><div class="line">        &#125;</div><div class="line">        System.out.println(output);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> c ;</div><div class="line">        <span class="keyword">int</span> y ;</div><div class="line">        <span class="keyword">int</span> m ;</div><div class="line">        <span class="keyword">int</span> d = <span class="number">1</span> ;</div><div class="line">        <span class="keyword">if</span>( month &gt;= <span class="number">3</span> )&#123;</div><div class="line">            m = month ;</div><div class="line">            c = year/<span class="number">100</span> ;</div><div class="line">            y = year%<span class="number">100</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            m = <span class="number">12</span> + month ;</div><div class="line">            c = (year-<span class="number">1</span>)/<span class="number">100</span> ;</div><div class="line">            y = (year-<span class="number">1</span>)%<span class="number">100</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> w = y + y/<span class="number">4</span> + c/<span class="number">4</span> - <span class="number">2</span>*c + <span class="number">26</span>*(m+<span class="number">1</span>)/<span class="number">10</span> + d - <span class="number">1</span> ;</div><div class="line">        w = w % <span class="number">7</span> ;</div><div class="line">        <span class="keyword">if</span>( w &lt; <span class="number">0</span> ) w += <span class="number">7</span> ;</div><div class="line">        <span class="keyword">return</span> w ;</div><div class="line">    &#125;</div><div class="line">    <span class="function">String <span class="title">monthInEnglish</span><span class="params">()</span></span>&#123;</div><div class="line">        String[] m = &#123; <span class="string">""</span> , <span class="string">"January"</span> , <span class="string">"February"</span> , <span class="string">"March"</span> , <span class="string">"April"</span> , <span class="string">"May"</span> , <span class="string">"June"</span> , <span class="string">"July"</span> , <span class="string">"August"</span> , <span class="string">"September"</span> , <span class="string">"October"</span> , <span class="string">"November"</span> , <span class="string">"December"</span> &#125; ;</div><div class="line">        <span class="keyword">return</span> m[month] ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMonthDays</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>( month == <span class="number">1</span> || month == <span class="number">3</span> || month == <span class="number">5</span> || month == <span class="number">7</span> || month == <span class="number">8</span> || month == <span class="number">10</span> || month == <span class="number">12</span> )</div><div class="line">            <span class="keyword">return</span> <span class="number">31</span> ;</div><div class="line">        <span class="keyword">if</span>( month != <span class="number">2</span> )</div><div class="line">            <span class="keyword">return</span> <span class="number">30</span> ;</div><div class="line">        <span class="keyword">if</span>( year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; ( year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span> ) )</div><div class="line">            <span class="keyword">return</span> <span class="number">29</span> ;</div><div class="line">        <span class="keyword">return</span> <span class="number">28</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ch0807"><a href="#ch0807" class="headerlink" title="ch0807"></a>ch0807</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ch0807</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</div><div class="line">    Account myAccount = <span class="keyword">new</span> Account(<span class="number">1122</span>,<span class="number">20000</span>) ;</div><div class="line">    myAccount.setAnnualInterestRate(<span class="number">4.5</span>) ;</div><div class="line">    myAccount.withDraw(<span class="number">2500</span>) ;</div><div class="line">    myAccount.deposit(<span class="number">3000</span>) ;</div><div class="line">    System.out.println( <span class="string">"balance =: "</span> + myAccount.getBalance()) ;</div><div class="line">    System.out.println( <span class="string">"MonthlyTnterest =: "</span> + myAccount.getMonthlyTnterest()) ;</div><div class="line">    System.out.println(myAccount.getDateCreated()) ;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> balance ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> annualInterestRate ;</div><div class="line">  Date dateCreated ;</div><div class="line">  Account()&#123;</div><div class="line">    id = <span class="number">0</span> ;</div><div class="line">    balance = annualInterestRate = <span class="number">0</span> ;</div><div class="line">    dateCreated = <span class="keyword">new</span> Date() ;</div><div class="line">  &#125;</div><div class="line">  Account( <span class="keyword">int</span> id , <span class="keyword">double</span> balance )&#123;</div><div class="line">    <span class="keyword">this</span>.id = id ;</div><div class="line">    <span class="keyword">this</span>.balance = balance ;</div><div class="line">    annualInterestRate = <span class="number">0</span> ;</div><div class="line">    dateCreated = <span class="keyword">new</span> Date() ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> id ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> balance ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getAnnualInterestRate</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> annualInterestRate ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setId</span><span class="params">( <span class="keyword">int</span> id )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.id = id ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setBalance</span><span class="params">( <span class="keyword">double</span> balance )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.balance = balance ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setAnnualInterestRate</span><span class="params">( <span class="keyword">double</span> annualInterestRate )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.annualInterestRate = annualInterestRate ;</div><div class="line">  &#125;</div><div class="line">  <span class="function">Date <span class="title">getDateCreated</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> dateCreated ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getMonthlyTnterest</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> balance * (annualInterestRate/<span class="number">1200</span>) ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">withDraw</span><span class="params">( <span class="keyword">double</span> num )</span></span>&#123;</div><div class="line">    balance -= num ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deposit</span><span class="params">( <span class="keyword">double</span> num )</span></span>&#123;</div><div class="line">    balance += num ;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ch0808"><a href="#ch0808" class="headerlink" title="ch0808"></a>ch0808</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ch0808</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</div><div class="line">    Fan fan1 = <span class="keyword">new</span> Fan() ;</div><div class="line">    fan1.setSpeed(<span class="number">3</span>) ;</div><div class="line">    fan1.setRadius(<span class="number">10</span>) ;</div><div class="line">    fan1.setColor(<span class="string">"yellow"</span>) ;</div><div class="line">    fan1.setOn(<span class="keyword">true</span>) ;</div><div class="line">    Fan fan2 = <span class="keyword">new</span> Fan() ;</div><div class="line">    fan2.setSpeed(<span class="number">2</span>) ;</div><div class="line">    fan2.setRadius(<span class="number">5</span>) ;</div><div class="line">    fan2.setColor(<span class="string">"blue"</span>) ;</div><div class="line">    fan2.setOn(<span class="keyword">false</span>) ;</div><div class="line">    System.out.println(<span class="string">"fan1:\n"</span> + fan1.tostring()) ;</div><div class="line">    System.out.println(<span class="string">"fan2:\n"</span> + fan2.tostring()) ;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fan</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> SLOW = <span class="number">1</span> ;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> MEDIUM = <span class="number">2</span> ;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> FAST = <span class="number">3</span> ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> speed ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> on ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> radius ;</div><div class="line">  String color ;</div><div class="line">  Fan()&#123;</div><div class="line">    speed = SLOW ;</div><div class="line">    on = <span class="keyword">false</span> ;</div><div class="line">    radius = <span class="number">5</span> ;</div><div class="line">    color = <span class="string">"blue"</span> ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getSpeed</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> speed ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setSpeed</span><span class="params">( <span class="keyword">int</span> speed )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.speed = speed ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">getOn</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> on ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setOn</span><span class="params">( <span class="keyword">boolean</span> on )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.on = on ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getRadius</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> radius ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setRadius</span><span class="params">( <span class="keyword">double</span> radius )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.radius = radius ;</div><div class="line">  &#125;</div><div class="line">  <span class="function">String <span class="title">getColor</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> color ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">( String color )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.color = color ;</div><div class="line">  &#125;</div><div class="line">  <span class="function">String <span class="title">tostring</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>( on )</div><div class="line">      <span class="keyword">return</span> <span class="string">"Fan is on and:\nNow speed is "</span> + speed + <span class="string">"\nColor is "</span> + color + <span class="string">"\nRadius is "</span> + radius + <span class="string">"\n"</span> ;</div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="keyword">return</span> <span class="string">"Fan is off and:\nColor is "</span> + color + <span class="string">"\nRadius is "</span> + radius + <span class="string">"\n"</span> ;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ch0809"><a href="#ch0809" class="headerlink" title="ch0809"></a>ch0809</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ch0809</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</div><div class="line">    RegularPolygon re1 = <span class="keyword">new</span> RegularPolygon() ;</div><div class="line">    RegularPolygon re2 = <span class="keyword">new</span> RegularPolygon(<span class="number">6</span>,<span class="number">4</span>) ;</div><div class="line">    RegularPolygon re3 = <span class="keyword">new</span> RegularPolygon(<span class="number">10</span>,<span class="number">4</span>,<span class="number">5.6</span>,<span class="number">7.8</span>) ;</div><div class="line">    System.out.println( <span class="string">"re1 perimeter is: "</span> + re1.getPerimeter() ) ;</div><div class="line">    System.out.println( <span class="string">"re1 area is: "</span> + re1.getArea() ) ;</div><div class="line">    System.out.println( <span class="string">"re2 perimeter is: "</span> + re2.getPerimeter() ) ;</div><div class="line">    System.out.println( <span class="string">"re2 area is: "</span> + re2.getArea() ) ;</div><div class="line">    System.out.println( <span class="string">"re3 perimeter is: "</span> + re3.getPerimeter() ) ;</div><div class="line">    System.out.println( <span class="string">"re3 area is: "</span> + re3.getArea() ) ;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegularPolygon</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> side ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> x ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> y ;</div><div class="line">  RegularPolygon()&#123;</div><div class="line">    <span class="keyword">this</span>.n = <span class="number">3</span> ;</div><div class="line">    <span class="keyword">this</span>.side = <span class="number">1</span> ;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">this</span>.y = <span class="number">0</span> ;</div><div class="line">  &#125;</div><div class="line">  RegularPolygon( <span class="keyword">int</span> n , <span class="keyword">double</span> side )&#123;</div><div class="line">    <span class="keyword">this</span>.x = y = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">this</span>.n = n ;</div><div class="line">    <span class="keyword">this</span>.side = side ;</div><div class="line">  &#125;</div><div class="line">  RegularPolygon( <span class="keyword">int</span> n , <span class="keyword">double</span> side , <span class="keyword">double</span> x , <span class="keyword">double</span> y )&#123;</div><div class="line">    <span class="keyword">this</span>.n = n ;</div><div class="line">    <span class="keyword">this</span>.side = side ;</div><div class="line">    <span class="keyword">this</span>.x = x ;</div><div class="line">    <span class="keyword">this</span>.y = y ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getN</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> n ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getSide</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> side ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getY</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> y ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setN</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.n = n ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setSide</span><span class="params">( <span class="keyword">double</span> side )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.side = side ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setX</span><span class="params">( <span class="keyword">double</span> x )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.x = x ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setY</span><span class="params">( <span class="keyword">double</span> y )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.y = y ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getPerimeter</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> n * side ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> n*side*side/<span class="number">4</span>/Math.tan(side) ;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ch0810"><a href="#ch0810" class="headerlink" title="ch0810"></a>ch0810</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ch0810</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</div><div class="line">    Scanner in = <span class="keyword">new</span> Scanner(System.in) ;</div><div class="line">    System.out.print(<span class="string">"Enter a, b, c: "</span>) ;</div><div class="line">    <span class="keyword">double</span> a = in.nextDouble() ;</div><div class="line">    <span class="keyword">double</span> b = in.nextDouble() ;</div><div class="line">    <span class="keyword">double</span> c = in.nextDouble() ;</div><div class="line">    QuadraticEquation qua = <span class="keyword">new</span> QuadraticEquation(a,b,c) ;</div><div class="line">    System.out.println(<span class="string">"Discriminant is: "</span>+qua.getDiscriminant()) ;</div><div class="line">    <span class="keyword">if</span>( qua.getDiscriminant() &gt;= <span class="number">0</span> )&#123;</div><div class="line">      System.out.println(<span class="string">"Root1 is: "</span> + qua.getRoot1() ) ;</div><div class="line">      System.out.println(<span class="string">"Root2 is: "</span> + qua.getRoot2() ) ;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuadraticEquation</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> a ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> b ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> c ;</div><div class="line">  QuadraticEquation( <span class="keyword">double</span> a , <span class="keyword">double</span> b , <span class="keyword">double</span> c )&#123;</div><div class="line">    <span class="keyword">this</span>.a = a ;</div><div class="line">    <span class="keyword">this</span>.b = b ;</div><div class="line">    <span class="keyword">this</span>.c = c ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getA</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getB</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> b ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getC</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> c ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getDiscriminant</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> b*b - <span class="number">4</span>*a*c ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getRoot1</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.getDiscriminant() &lt; <span class="number">0</span> )</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">    <span class="keyword">return</span> (-b+Math.sqrt(<span class="keyword">this</span>.getDiscriminant()))/(<span class="number">2</span>*a) ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getRoot2</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.getDiscriminant() &lt; <span class="number">0</span> )</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">    <span class="keyword">return</span> (-b+Math.sqrt(<span class="keyword">this</span>.getDiscriminant()))/(<span class="number">2</span>*a) ;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ch0811"><a href="#ch0811" class="headerlink" title="ch0811"></a>ch0811</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ch0811</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</div><div class="line">    Scanner in = <span class="keyword">new</span> Scanner(System.in) ;</div><div class="line">    System.out.println(<span class="string">"Enter a, b, c, d, e, f: "</span>) ;</div><div class="line">    <span class="keyword">double</span> a = in.nextDouble() ;</div><div class="line">    <span class="keyword">double</span> b = in.nextDouble() ;</div><div class="line">    <span class="keyword">double</span> c = in.nextDouble() ;</div><div class="line">    <span class="keyword">double</span> d = in.nextDouble() ;</div><div class="line">    <span class="keyword">double</span> e = in.nextDouble() ;</div><div class="line">    <span class="keyword">double</span> f = in.nextDouble() ;</div><div class="line">    LinearEquation line = <span class="keyword">new</span> LinearEquation(a,b,c,d,e,f) ;</div><div class="line">    <span class="keyword">if</span>( line.isSolvable() == <span class="keyword">false</span> )</div><div class="line">      System.out.println(<span class="string">"The equation has no solution."</span>) ;</div><div class="line">    <span class="keyword">else</span></div><div class="line">      System.out.println(<span class="string">"X = "</span> + line.getX() + <span class="string">" , Y = "</span> + line.getY() ) ;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearEquation</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> a ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> b ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> c ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> d ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> e ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> f ;</div><div class="line">  LinearEquation(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> c, <span class="keyword">double</span> d, <span class="keyword">double</span> e, <span class="keyword">double</span> f)&#123;</div><div class="line">    <span class="keyword">this</span>.a = a ;</div><div class="line">    <span class="keyword">this</span>.b = b ;</div><div class="line">    <span class="keyword">this</span>.c = c ;</div><div class="line">    <span class="keyword">this</span>.d = d ;</div><div class="line">    <span class="keyword">this</span>.e = e ;</div><div class="line">    <span class="keyword">this</span>.f = f ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isSolvable</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>( (a*d - b*c) != <span class="number">0</span> )</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (e*d-b*f)/(a*d-b*c) ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getY</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (a*f-e*c)/(a*d-b*c) ;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ch0812"><a href="#ch0812" class="headerlink" title="ch0812"></a>ch0812</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ch0812</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> sx , sy , ex , ey ;</div><div class="line">    line l1 = <span class="keyword">new</span> line() ;</div><div class="line">    line l2 = <span class="keyword">new</span> line() ;</div><div class="line">    Scanner in = <span class="keyword">new</span> Scanner(System.in) ;</div><div class="line">    System.out.print(<span class="string">"Enter the endpoints of the first line segment:"</span> ) ;</div><div class="line">    sx = in.nextDouble() ;</div><div class="line">    sy = in.nextDouble() ;</div><div class="line">    ex = in.nextDouble() ;</div><div class="line">    ey = in.nextDouble() ;</div><div class="line">    l1.set(sx,sy,ex,ey);</div><div class="line">    System.out.print(<span class="string">"Enter the endpoints of the second line segment:"</span> ) ;</div><div class="line">    sx = in.nextDouble() ;</div><div class="line">    sy = in.nextDouble() ;</div><div class="line">    ex = in.nextDouble() ;</div><div class="line">    ey = in.nextDouble() ;</div><div class="line">    l2.set(sx,sy,ex,ey) ;</div><div class="line">    l1.show_crosser_with(l2) ;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">line</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> sx ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> sy ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> ex ;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> ey ;</div><div class="line">  line()&#123;</div><div class="line">    <span class="keyword">this</span>.sx = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">this</span>.sy = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">this</span>.ex = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">this</span>.ey = <span class="number">0</span> ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">( <span class="keyword">double</span> sx , <span class="keyword">double</span> sy , <span class="keyword">double</span> ex , <span class="keyword">double</span> ey )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.sx = sx ;</div><div class="line">    <span class="keyword">this</span>.sy = sy ;</div><div class="line">    <span class="keyword">this</span>.ex = ex ;</div><div class="line">    <span class="keyword">this</span>.ey = ey ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">show_crosser_with</span><span class="params">( line line2 )</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> k1 = (ey-sy)/(ex-sx) ;</div><div class="line">    <span class="keyword">double</span> k2 = (line2.ey-line2.sy)/(line2.ex-line2.sx) ;</div><div class="line">    <span class="keyword">if</span>( k1 == k2 )&#123;</div><div class="line">      System.out.println( <span class="string">"These two lines are parallel to each other !"</span> ) ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">double</span> csx , csy ;</div><div class="line">      <span class="keyword">double</span> b1 = sy - k1*sx ;</div><div class="line">      <span class="keyword">double</span> b2 = line2.sy - k2*line2.sx ;</div><div class="line">      csx = (b2-b1)/(k1-k2) ;</div><div class="line">      csy = k1*(b2-b1)/(k1-k2) + b1 ;</div><div class="line">      System.out.println( <span class="string">"The intersecting point is: ("</span> + csx + <span class="string">", "</span> + csy + <span class="string">")"</span> ) ;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ch0813"><a href="#ch0813" class="headerlink" title="ch0813"></a>ch0813</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ch0813</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> r , c ;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</div><div class="line">    Scanner in = <span class="keyword">new</span> Scanner(System.in) ;</div><div class="line">    System.out.print(<span class="string">"Enter the number of rows and columns of the array: "</span>) ;</div><div class="line">    r = in.nextInt() ;</div><div class="line">    c = in.nextInt() ;</div><div class="line">    <span class="keyword">double</span>[][] a = <span class="keyword">new</span> <span class="keyword">double</span>[r][c] ;</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; r ; ++i )&#123;</div><div class="line">      <span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; c ; ++j )&#123;</div><div class="line">        a[i][j] = in.nextDouble() ;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    Location locat = <span class="keyword">new</span> Location() ;</div><div class="line">    locat = locateLargest(a) ;</div><div class="line">    System.out.println(<span class="string">"The location of the largest element is "</span> + locat.maxValue + <span class="string">" at ("</span> + locat.row + <span class="string">", "</span> + locat.column + <span class="string">")"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Location <span class="title">locateLargest</span><span class="params">( <span class="keyword">double</span>[][] a )</span></span>&#123;</div><div class="line">    Location locat = <span class="keyword">new</span> Location() ;</div><div class="line">    locat.maxValue = -<span class="number">0xffffff</span> ;</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; r ; ++i )&#123;</div><div class="line">      <span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; c ; ++j )&#123;</div><div class="line">        <span class="keyword">if</span>( a[i][j] &gt; locat.maxValue )&#123;</div><div class="line">          locat.maxValue = a[i][j] ;</div><div class="line">          locat.row = i ;</div><div class="line">          locat.column = j ;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> locat ;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Location</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> row ;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> column ;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">double</span> maxValue ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 1316 How Many Fibs?]]></title>
      <url>http://koala.ink/2013/11/24/HDU_1316_How_Many_Fibs/</url>
      <content type="html"><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1316">HDU 1316 How Many Fibs?</a></p>
<p>好吧，这道题目，让我WA了3次，实在是想哭，最后又重看了一遍题目，发现 f[1] = 1   f[2] = 2  ，  惯性思维害死人  </p>
<p>思路也没什么特别的  大数相加，然后大数的比较  </p>
<p>值得一提的还是审题啊<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> ds&#123;</div><div class="line">  <span class="keyword">int</span> num[<span class="number">105</span>] ;</div><div class="line">  <span class="keyword">int</span> len ;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">( <span class="keyword">char</span> s[<span class="number">105</span>] = <span class="string">"0"</span> )</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>( num , <span class="number">0</span> , <span class="keyword">sizeof</span>(num) );</div><div class="line">    len = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">int</span> l = <span class="built_in">strlen</span>(s) ;</div><div class="line">    <span class="keyword">for</span>( ; len &lt; l ; ++len )&#123;</div><div class="line">      num[len] = s[l<span class="number">-1</span>-len] - <span class="string">'0'</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">plus</span><span class="params">( <span class="keyword">const</span> ds&amp; a , <span class="keyword">const</span> ds&amp; b )</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;init();</div><div class="line">    <span class="keyword">int</span> maxlen = a.len&gt;b.len?a.len:b.len;</div><div class="line">    <span class="keyword">for</span>( len = <span class="number">0</span> ; len &lt; maxlen ; ++len )</div><div class="line">      num[len] = a.num[len] + b.num[len] ;</div><div class="line">    <span class="keyword">for</span>( len = <span class="number">0</span> ; len &lt; maxlen ; ++len )&#123;</div><div class="line">      num[len+<span class="number">1</span>] += num[len]/<span class="number">10</span> ;</div><div class="line">      num[len] %= <span class="number">10</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>( num[len] )</div><div class="line">      ++len ;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_less_than_or_equal_to</span><span class="params">( <span class="keyword">const</span> ds&amp; a )</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>( len != a.len )</div><div class="line">      <span class="keyword">return</span> len&lt;a.len ;</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = len - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; --i )&#123;</div><div class="line">      <span class="keyword">if</span>( num[i] != a.num[i] )</div><div class="line">        <span class="keyword">return</span> num[i]&lt;a.num[i] ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;fb[<span class="number">500</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  fb[<span class="number">1</span>].init(<span class="string">"1"</span>);</div><div class="line">  fb[<span class="number">2</span>].init(<span class="string">"2"</span>);</div><div class="line">  <span class="keyword">int</span> i , ans ;</div><div class="line">  <span class="keyword">for</span>( i = <span class="number">3</span> ; i &lt; <span class="number">500</span> ; ++i )</div><div class="line">    fb[i].plus(fb[i<span class="number">-1</span>],fb[i<span class="number">-2</span>]);</div><div class="line">  <span class="keyword">char</span> a[<span class="number">105</span>] , b[<span class="number">105</span>] ;</div><div class="line">  ds aa , bb ;</div><div class="line">  <span class="keyword">while</span>( <span class="built_in">scanf</span>( <span class="string">"%s%s"</span> , a , b ) )&#123;</div><div class="line">    <span class="keyword">if</span>( <span class="built_in">strcmp</span>(a,<span class="string">"0"</span>) == <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(b,<span class="string">"0"</span>) == <span class="number">0</span> )</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    aa.init(a);</div><div class="line">    bb.init(b);</div><div class="line">    ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>( i = <span class="number">0</span> ; i &lt; <span class="number">500</span> ; ++i )</div><div class="line">      <span class="keyword">if</span>( aa.is_less_than_or_equal_to(fb[i]) &amp;&amp; fb[i].is_less_than_or_equal_to(bb) )</div><div class="line">        ++ans;</div><div class="line">    <span class="built_in">printf</span>( <span class="string">"%d\n"</span> , ans );</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 1715 大菲波数 大数]]></title>
      <url>http://koala.ink/2013/11/22/HDU_1715_Fibonacci_BN/</url>
      <content type="html"><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1715">HDU 1715 大菲波数 大数</a>  </p>
<p>第一题手敲大数，自己的写法，应该很不规范  </p>
<p>毕竟是自己写的，贴代码纪念一下<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> ds&#123;</div><div class="line">  <span class="keyword">int</span> num[<span class="number">1001</span>];</div><div class="line">  <span class="keyword">int</span> len;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">inif</span><span class="params">(<span class="keyword">int</span> a , <span class="keyword">int</span> l)</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</div><div class="line">    len = l;</div><div class="line">    num[<span class="number">0</span>] = a;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">plus</span><span class="params">(<span class="keyword">const</span> ds&amp; a , <span class="keyword">const</span> ds&amp; b)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>( j &lt; a.len &amp;&amp; j &lt; b.len )&#123;</div><div class="line">      num[j] = ( a.num[j] + b.num[j] + tmp ) % <span class="number">10</span>;</div><div class="line">      tmp = ( a.num[j] + b.num[j] + tmp ) / <span class="number">10</span> ;</div><div class="line">      ++j;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>( j &lt; a.len )&#123;</div><div class="line">      <span class="keyword">while</span>( j &lt; a.len )&#123;</div><div class="line">        num[j] = ( a.num[j] + tmp ) % <span class="number">10</span> ;</div><div class="line">        tmp = ( a.num[j] + tmp ) / <span class="number">10</span> ;</div><div class="line">        j++;</div><div class="line">      &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">while</span>( j &lt; b.len )&#123;</div><div class="line">        num[j] = ( b.num[j] + tmp ) % <span class="number">10</span> ;</div><div class="line">        tmp = ( b.num[j] + tmp ) / <span class="number">10</span> ;</div><div class="line">        ++j;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>( tmp ) num[j++] = tmp ;</div><div class="line">    len = j ;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = len - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; --i )</div><div class="line">      <span class="built_in">printf</span>( <span class="string">"%d"</span> , num[i] );</div><div class="line">    <span class="built_in">printf</span>( <span class="string">"\n"</span> );</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">  &#125;</div><div class="line">&#125;f[<span class="number">1001</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  f[<span class="number">1</span>].inif(<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">  f[<span class="number">2</span>].inif(<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">  <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">3</span> ; i &lt; <span class="number">1001</span> ; ++i )</div><div class="line">    f[i].plus(f[i<span class="number">-1</span>],f[i<span class="number">-2</span>]);</div><div class="line">  <span class="keyword">int</span> t , n ;</div><div class="line">  <span class="built_in">scanf</span>( <span class="string">"%d"</span> , &amp;t );</div><div class="line">  <span class="keyword">while</span>( t-- )&#123;</div><div class="line">    <span class="built_in">scanf</span>( <span class="string">"%d"</span> , &amp;n );</div><div class="line">    f[n].print();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 2845 Beans]]></title>
      <url>http://koala.ink/2013/11/22/HDU_2845_Beans/</url>
      <content type="html"><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2845">HDU 2845 Beans</a></p>
<p>吃豆豆  </p>
<p>一个方格里一个值表示豆的质量，吃豆的规则是当你在(x,y)处吃了一个豆  </p>
<p>那个这个豆的左边一格、右边一格、以及上一行、下一行的豆都不能吃。  </p>
<p>问最多能吃到多少质量的豆  </p>
<p>解题思路：<br><a id="more"></a></p>
<p>每一行计算最大质量，因为一个格子只能选择吃或者不吃，所以用用nsum[0]、nsum[1]分别表示到这个格子处吃、或者不吃的最大质量  </p>
<p>用 cmax[0]、cmax[1] 表示前一格吃没吃豆子的最大质量  </p>
<p>若在该点没有吃豆子 ， 那显然可以从前状态可以推得到此最大值为 max(cmax[0],cmax[1]) ， nsum[0] = max(cmax[0],cmax[1])  </p>
<p>若在该点吃了豆子，那么根据规则，前一格必须没有吃  故 nsum[1] = cmax[0] + weight ;  </p>
<p>用这两个式子去更新状态，到达行末是，max(cmax[0],cmax[1])就是这一行的最大质量。  </p>
<p>算到这里，会发现，如果每一行的最大质量都算出来之后，我们就又得到一列数字，根据规则，吃了i行，那么i-1行与i+1行就不能吃  </p>
<p>可否将这列数字又看成是一行，吃了第i个位置的大豆子，就不能再吃左边、右边的豆子  </p>
<p>于是就可以根据刚才的更新规则再推一次，这次推完之后得到的就是题目所要求的最大质量了。  </p>
<p>由于考虑到题目对于  m  n   的限定是  1&lt;=M*N&lt;=200000  </p>
<p>如果要开二维数组来存的话显然是不行的  </p>
<p>所以就得到一个数据更新一次状态，就不用开数组了  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> nsum[<span class="number">2</span>] , pmax[<span class="number">2</span>] , cmax[<span class="number">2</span>] , rmax[<span class="number">2</span>] , sum ;</div><div class="line">  <span class="keyword">int</span> m , n , i , j , tmp ;</div><div class="line">  <span class="keyword">while</span>( <span class="built_in">scanf</span>( <span class="string">"%d%d"</span> , &amp;m , &amp;n ) != EOF )&#123;</div><div class="line">    <span class="built_in">memset</span>(pmax,<span class="number">0</span>,<span class="keyword">sizeof</span>(pmax));</div><div class="line">    <span class="built_in">memset</span>(rmax,<span class="number">0</span>,<span class="keyword">sizeof</span>(rmax));</div><div class="line">    <span class="keyword">for</span>( i = <span class="number">0</span> ; i &lt; m ; ++i )&#123;</div><div class="line">      <span class="built_in">memset</span>(cmax,<span class="number">0</span>,<span class="keyword">sizeof</span>(cmax));</div><div class="line">      <span class="built_in">memset</span>(nsum,<span class="number">0</span>,<span class="keyword">sizeof</span>(nsum));</div><div class="line">      <span class="keyword">for</span>( j = <span class="number">0</span> ; j &lt; n ; ++j )&#123;</div><div class="line">        <span class="built_in">scanf</span>( <span class="string">"%d"</span> , &amp;tmp );</div><div class="line">        nsum[<span class="number">0</span>] = cmax[<span class="number">1</span>]&gt;cmax[<span class="number">0</span>]?cmax[<span class="number">1</span>]:cmax[<span class="number">0</span>];</div><div class="line">        nsum[<span class="number">1</span>] = cmax[<span class="number">0</span>]+tmp ;</div><div class="line">        cmax[<span class="number">0</span>] = nsum[<span class="number">0</span>];</div><div class="line">        cmax[<span class="number">1</span>] = nsum[<span class="number">1</span>];</div><div class="line">      &#125;</div><div class="line">      sum = cmax[<span class="number">0</span>]&gt;cmax[<span class="number">1</span>]?cmax[<span class="number">0</span>]:cmax[<span class="number">1</span>] ;    </div><div class="line">      rmax[<span class="number">0</span>] = pmax[<span class="number">1</span>]&gt;pmax[<span class="number">0</span>]?pmax[<span class="number">1</span>]:pmax[<span class="number">0</span>];</div><div class="line">      rmax[<span class="number">1</span>] = pmax[<span class="number">0</span>]+sum;</div><div class="line">      pmax[<span class="number">0</span>] = rmax[<span class="number">0</span>];</div><div class="line">      pmax[<span class="number">1</span>] = rmax[<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>( <span class="string">"%d\n"</span> , pmax[<span class="number">0</span>]&gt;pmax[<span class="number">1</span>]?pmax[<span class="number">0</span>]:pmax[<span class="number">1</span>] );</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 1242 Rescue]]></title>
      <url>http://koala.ink/2013/11/21/HDU_1242_Rescue/</url>
      <content type="html"><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1242">HDU 1242</a>  </p>
<p>不知道怎么的最近写题目很粗心  </p>
<p>就这道题吧，之前A过了，现在重敲了一遍，然后呵呵呵呵的一排过去  </p>
<ul>
<li><p><code>scanf( &quot;%d%d&quot; , &amp;n , &amp;m );</code>  居然漏了一个 <code>%d</code> 写成 <code>scanf( &quot;%d&quot; , &amp;n , &amp;m );</code>  </p>
</li>
<li><p><code>main</code>函数里忘了调用<code>bfs()</code>函数，漏掉 <code>bfs();</code> 一句  </p>
</li>
<li><p><code>printf( &quot;%d\n&quot; , ans );</code>  也能漏掉一个 <code>\n</code>    </p>
</li>
<li><p><code>vis[sx][sy] = true;</code>  同漏  </p>
</li>
</ul>
<p>呵呵呵呵呵又是一排过去  </p>
<p>最后是，原本是用 r 做起点 a 做终点去做 ， 可是没想到人家 angle 是有好多朋友的啊呵呵呵呵呵哭了  </p>
<p>于是改掉用a做起点 r去判断终状态  </p>
<p>于是有了下面的代码<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n , m ;</div><div class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">205</span>][<span class="number">205</span>];</div><div class="line"><span class="keyword">bool</span> vis[<span class="number">205</span>][<span class="number">205</span>];</div><div class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; <span class="number">1</span> , <span class="number">0</span> , <span class="number">-1</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">1</span> , <span class="number">0</span> , <span class="number">-1</span> &#125;;</div><div class="line"><span class="keyword">int</span> sx , sy , ex , ey , ans ;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">    <span class="keyword">int</span> x , y ;</div><div class="line">    <span class="keyword">int</span> time;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>( x&lt;<span class="number">0</span> || x&gt;=n || y&lt;<span class="number">0</span> || y&gt;=m || <span class="built_in">map</span>[x][y] == <span class="string">'#'</span> )</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">    node now , next;</div><div class="line">  now.x = sx ;</div><div class="line">  now.y = sy ;</div><div class="line">  now.time = <span class="number">0</span> ;</div><div class="line">  vis[sx][sy] = <span class="literal">true</span>;</div><div class="line">  <span class="built_in">queue</span>&lt;node&gt; q;</div><div class="line">  q.push(now);</div><div class="line">  <span class="keyword">while</span>( !q.empty() )&#123;</div><div class="line">    now = q.front();</div><div class="line">    q.pop();</div><div class="line">    <span class="keyword">if</span>( <span class="built_in">map</span>[now.x][now.y] == <span class="string">'r'</span> )&#123;</div><div class="line">      ans = now.time;</div><div class="line">      <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">4</span> ; ++i )&#123;</div><div class="line">      next.x = now.x + dir[i][<span class="number">0</span>];</div><div class="line">      next.y = now.y + dir[i][<span class="number">1</span>];</div><div class="line">      next.time = now.time;</div><div class="line">      <span class="keyword">if</span>( !next.check() ) <span class="keyword">continue</span>;</div><div class="line">      <span class="keyword">if</span>( vis[next.x][next.y] ) <span class="keyword">continue</span>;</div><div class="line">      <span class="keyword">if</span>( <span class="built_in">map</span>[next.x][next.y] == <span class="string">'x'</span> )</div><div class="line">        next.time += <span class="number">2</span>;</div><div class="line">      <span class="keyword">else</span></div><div class="line">        next.time += <span class="number">1</span>;</div><div class="line">      vis[next.x][next.y] = <span class="literal">true</span>;</div><div class="line">      q.push(next);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>( <span class="built_in">scanf</span>( <span class="string">"%d%d"</span> , &amp;n , &amp;m ) != EOF )&#123;</div><div class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; ++i )&#123;</div><div class="line">            <span class="keyword">char</span> tmp[<span class="number">205</span>];</div><div class="line">            <span class="built_in">scanf</span>( <span class="string">"%s"</span> , tmp );</div><div class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; m ; ++j )&#123;</div><div class="line">                <span class="built_in">map</span>[i][j] = tmp[j] ;</div><div class="line">                <span class="keyword">if</span>( tmp[j] == <span class="string">'a'</span> )</div><div class="line">                    sx = i , sy = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>( vis , <span class="literal">false</span> , <span class="keyword">sizeof</span>(vis) );</div><div class="line">        ans = <span class="number">-1</span>;</div><div class="line">        bfs();</div><div class="line">        <span class="keyword">if</span>( ans != <span class="number">-1</span> )</div><div class="line">            <span class="built_in">printf</span>( <span class="string">"%d\n"</span> , ans );</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>( <span class="string">"Poor ANGEL has to stay in the prison all his life.\n"</span> );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 2100 Lovekey]]></title>
      <url>http://koala.ink/2013/11/14/HDU_2100_Lovekey/</url>
      <content type="html"><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2100">HDU 2100</a>  </p>
<p>题目说了那么多，其实就是一道类似A + B的题目。  </p>
<p>输入两个26进制的数a和b，用26进制的形式输出a+b的结果 。  </p>
<p>a b的长度最长不超过200  </p>
<p>这道题我用的是字符去处理的，大数现在还未写过，只能用字符去计算了。  </p>
<p>实现过程就是将a，b用两个字符数组储存，然后用i，j从串尾开始往前遍历，计算过程也没什么好说的，就是取模运算而已  </p>
<p>以下AC代码<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">char</span> a[<span class="number">205</span>] , b[<span class="number">205</span>] , ans[<span class="number">205</span>] ;</div><div class="line">  <span class="keyword">int</span> tmp;</div><div class="line">  <span class="keyword">int</span> i , j , k , l1 , l2 ;</div><div class="line">  <span class="keyword">while</span>( <span class="built_in">scanf</span>( <span class="string">"%s%s"</span> , a , b ) != EOF )&#123;</div><div class="line">    l1 = <span class="built_in">strlen</span>(a);</div><div class="line">    l2 = <span class="built_in">strlen</span>(b);</div><div class="line">    i = l1 - <span class="number">1</span>;        <span class="comment">// 初始化i j ， k的最开始要保留一位，故ans的长度不用 -1</span></div><div class="line">    j = l2 - <span class="number">1</span>;</div><div class="line">    k = l1&gt;l2?l1:l2;</div><div class="line">    ans[k+<span class="number">1</span>] = <span class="string">'\0'</span> ;    <span class="comment">// 先将ans的最末尾置上结束符</span></div><div class="line">    tmp = <span class="number">0</span>;        <span class="comment">// 初始化进位为0</span></div><div class="line">    <span class="keyword">while</span>( i&gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span> )&#123;  <span class="comment">// 第一次循环，就是两串 尾对其的部分，为 a + b</span></div><div class="line">      ans[k--] = (<span class="keyword">char</span>)( ( tmp + a[i] + b[j] - <span class="number">2</span> * <span class="string">'A'</span> ) % <span class="number">26</span> + <span class="string">'A'</span> );</div><div class="line">      tmp = ( tmp + a[i] + b[j] - <span class="number">2</span> * <span class="string">'A'</span> ) / <span class="number">26</span> ;</div><div class="line">      --i;</div><div class="line">      --j;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>( i &gt;= <span class="number">0</span> )&#123;      <span class="comment">// if else  就是计算剩余的高位， a+tmp 或者 b+tmp</span></div><div class="line">      <span class="keyword">while</span>( i &gt;= <span class="number">0</span> )&#123;</div><div class="line">        ans[k--] = (<span class="keyword">char</span>)( ( tmp + a[i] - <span class="string">'A'</span> ) % <span class="number">26</span> + <span class="string">'A'</span> );</div><div class="line">        tmp = ( tmp + a[i] - <span class="string">'A'</span> ) / <span class="number">26</span> ;</div><div class="line">        --i;</div><div class="line">      &#125;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>( j &gt;= <span class="number">0</span> )&#123;</div><div class="line">      <span class="keyword">while</span>( j &gt;= <span class="number">0</span> )&#123;</div><div class="line">        ans[k--] = (<span class="keyword">char</span>)( ( tmp + b[j] - <span class="string">'A'</span> ) % <span class="number">26</span> + <span class="string">'A'</span> );</div><div class="line">        tmp = ( tmp + b[j] - <span class="string">'A'</span> ) / <span class="number">26</span> ;</div><div class="line">        --j;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    ans[k] = tmp + <span class="string">'A'</span> ;    <span class="comment">//  最后是补上ans的最高位</span></div><div class="line">    <span class="keyword">while</span>( ans[k] == <span class="string">'A'</span> ) ++k;   <span class="comment">// 这里要注意，因为A表示的是0，故要先将串头的A都去掉再输出ans</span></div><div class="line">    <span class="built_in">printf</span>( <span class="string">"%s\n"</span> , ans+k );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 1081 To The Max]]></title>
      <url>http://koala.ink/2013/11/13/HDU_1081_To_The_Max/</url>
      <content type="html"><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1081">HDU 1081</a>  </p>
<p>想了好久都没想出来，最后还是看了别人的思路，自己动手实现了一下才AC了。  </p>
<p>求最大子串和，将一个二维的问题转化成多个一维的最大子串和问题进行求解  </p>
<p>大致转换思路是 给定一个 i 为起始行，j 为结束行，将每一列的元素从 i 行到 j 行累加起来作为一个元素，组成一个长度为n的数组，既可将一个 i 到 j 行的二维数组压缩为一维，求解这个一维数组的最大子串和，循环每一个可能的 i 跟 j ，得到的最大的那个最大子串和即为所求值。  </p>
<p>至于一维的最大子串和求解，最大子串和必定以数组中某个元素为结尾，可用dp[i]表示以元素a[i]为结尾的所有子串的最大和，对于dp[i]这个状态，可有两种状态推得，因为dp[i]中必然要含有a[i]这个元素，所以 dp[i] = max ( dp[i-1]+a[i] , a[i] ) ，这个就是状态转移方程，所以找出dp[n]中最大的值就是该数组的最大子串和。  </p>
<p>具体见以下代码的实现<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[<span class="number">105</span>][<span class="number">105</span>] , c[<span class="number">105</span>][<span class="number">105</span>][<span class="number">105</span>];    <span class="comment">// a为所给元素  c[i][j][n] 表示对于一个 i j 压缩得的长度为n的数组</span></div><div class="line"><span class="keyword">int</span> dp[<span class="number">105</span>][<span class="number">105</span>][<span class="number">105</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a , <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a&gt;b?a:b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> n , i , j , k , l ;</div><div class="line">  <span class="keyword">int</span> MAX;</div><div class="line">  <span class="keyword">while</span>( <span class="built_in">scanf</span>( <span class="string">"%d"</span> , &amp;n ) != EOF )&#123;</div><div class="line">    <span class="keyword">for</span>( i = <span class="number">0</span> ; i &lt; n ; ++i )</div><div class="line">      <span class="keyword">for</span>( j = <span class="number">0</span> ; j &lt; n ; ++j )</div><div class="line">        <span class="built_in">scanf</span>( <span class="string">"%d"</span> , &amp;a[i][j] );</div><div class="line">    <span class="built_in">memset</span>( c , <span class="number">0</span> , <span class="keyword">sizeof</span>(c) );</div><div class="line">    <span class="built_in">memset</span>( dp , <span class="number">0</span> , <span class="keyword">sizeof</span>(dp) );</div><div class="line">    MAX = <span class="number">-99999999</span>;              <span class="comment">// 对于MAX的初始化不能用0，因为最大子串和也可能是为负</span></div><div class="line">    <span class="keyword">for</span>( i = <span class="number">0</span> ; i &lt; n ; ++i )&#123;          <span class="comment">// 起始行</span></div><div class="line">      <span class="keyword">for</span>( j = i ; j &lt; n ; ++j )&#123;        <span class="comment">// 结束行</span></div><div class="line">        <span class="keyword">for</span>( k = <span class="number">0</span> ; k &lt; n ; ++k )&#123;      <span class="comment">// 循环所有列</span></div><div class="line">          <span class="keyword">for</span>( l = i ; l &lt;= j ; ++l ) c[i][j][k] += a[l][k] ;      <span class="comment">// 计算每一列的和</span></div><div class="line">          dp[i][j][k] = max(dp[i][j][k<span class="number">-1</span>]+c[i][j][k],c[i][j][k]);    <span class="comment">// 求该i j 对应的压缩数组的最大子串和</span></div><div class="line">          <span class="keyword">if</span>( dp[i][j][k] &gt; MAX ) MAX = dp[i][j][k];</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>( <span class="string">"%d\n"</span> , MAX );</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 1000 A + B Problem]]></title>
      <url>http://koala.ink/2013/11/12/hdu_1000_A_B_Problem/</url>
      <content type="html"><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1000">HDU 1000</a>  </p>
<p>我只记得这是我的第一题，还是WA。  </p>
<p>用这一题来开始我做题的记录  </p>
<p>贴个代码  看个效果  </p>
<p>纪念在ACM里逝去的青春以及收获的喜悦<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> a , b ;</div><div class="line">  <span class="keyword">while</span>( <span class="built_in">scanf</span>( <span class="string">"%d%d"</span> , &amp;a , &amp;b ) != EOF )&#123;</div><div class="line">    <span class="built_in">printf</span>( <span class="string">"%d\n"</span> , a + b );</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
  
  
</search>
